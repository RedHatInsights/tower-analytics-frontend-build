{"version":3,"sources":["webpack:///./src/Components/JobExplorerListRow.js","webpack:///./src/Components/JobExplorerList.js","webpack:///./src/Containers/JobExplorer/JobExplorer.js"],"names":["categoryColor","ok","global_palette_green_300","passed","unreachable","global_palette_black_400","changed","global_palette_gold_300","failed","global_palette_red_100","skipped","global_palette_blue_300","JobExplorerListRow","job","useState","expanded","setExpanded","categoryCount","ok_host_count","skipped_host_count","changed_host_count","failed_host_count","unreachable_host_count","expandedInfo","label","value","created","formatDateTime","started","finished","host_task_count","Tr","Td","expand","rowIndex","id","isExpanded","onToggle","href","tower_link","template_name","JobStatus","status","cluster_name","org_name","formatJobType","job_type","colSpan","ExpandableRowContent","Flex","FlexItem","align","default","host_count","Breakdown","showPercent","failed_tasks","showMore","setShowMore","Grid","hasGutter","slice","length","map","task","idx","passed_host_count","GridItem","lg","md","key","task_name","module_name","className","Button","variant","onClick","fullWidth","renderMoreButton","renderFailedTaskBar","most_failed_tasks","DescriptionList","isHorizontal","columnModifier","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","propTypes","PropTypes","cols","sortableCols","sortMap","0","1","4","reverseSortMap","JobExplorerList","jobs","queryParams","queryParamsDispatch","sortIdx","setSortIdx","sortDir","setSortDir","useEffect","sort_options","sort_order","onSort","_event","dir","type","TableComposable","aria-label","Thead","Th","head","params","includes","sort","sortBy","index","direction","columnIndex","Tbody","initialQueryParams","jobExplorer","attributes","qsConfig","getQSConfig","JobExplorer","useQueryParams","setFromPagination","setFromToolbar","dispatch","useRequest","useCallback","readJobExplorerOptions","options","result","error","fetchOptions","request","readJobExplorer","items","meta","data","dataIsLoading","isLoading","dataIsSuccess","isSuccess","fetchEndpoints","ApiErrorState","message","PageHeader","PageHeaderTitle","title","Main","Card","CardBody","categories","filters","setFilters","pagination","Pagination","count","limit","parseInt","offset","setPagination","isCompact","hasSettings","LoadingState","NoResults","PaginationVariant","location","history"],"mappings":"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","file":"js/823.88b78fe52424c1ebc0cc.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Tr, Td, ExpandableRowContent } from '@patternfly/react-table';\n\nimport { formatDateTime, formatJobType } from '../Utilities/helpers';\nimport JobStatus from './JobStatus';\nimport Breakdown from './Breakdown';\nimport {\n  global_palette_green_300,\n  global_palette_black_400,\n  global_palette_gold_300,\n  global_palette_red_100,\n  global_palette_blue_300,\n} from '@patternfly/react-tokens';\nimport {\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Button,\n} from '@patternfly/react-core';\n\nconst categoryColor = {\n  ok: global_palette_green_300.value,\n  passed: global_palette_green_300.value,\n  unreachable: global_palette_black_400.value,\n  changed: global_palette_gold_300.value,\n  failed: global_palette_red_100.value,\n  skipped: global_palette_blue_300.value,\n};\n\nconst renderMoreButton = (showMore, setShowMore) => {\n  return (\n    <Flex className=\"pf-u-mb-md\">\n      <FlexItem align={{ default: 'alignRight' }}>\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            setShowMore(!showMore);\n          }}\n          fullWidth={{ default: 'fullWidth' }}\n        >\n          {showMore ? 'Show less' : 'Show more'}\n        </Button>\n      </FlexItem>\n    </Flex>\n  );\n};\n\nconst renderFailedTaskBar = (failed_tasks) => {\n  const [showMore, setShowMore] = useState(false);\n\n  if (failed_tasks != null) {\n    return (\n      <>\n        <p>\n          <strong>Top failed tasks</strong>\n        </p>\n\n        <Grid hasGutter>\n          {failed_tasks\n            .slice(0, showMore ? failed_tasks.length : 2)\n            .map((task, idx) => {\n              const categoryCount = {\n                passed: task?.passed_host_count ?? 0,\n                failed: task?.failed_host_count ?? 0,\n                unreachable: task?.unreachable_host_count ?? 0,\n              };\n\n              return (\n                <GridItem lg={6} md={12} key={`most-failed-${idx}`}>\n                  <Flex>\n                    <FlexItem>\n                      <strong>Task name </strong> {task?.task_name}\n                    </FlexItem>\n\n                    <FlexItem align={{ default: 'alignRight' }}>\n                      <strong>Module name </strong> {task?.module_name}\n                    </FlexItem>\n                  </Flex>\n                  <Breakdown\n                    categoryCount={categoryCount}\n                    categoryColor={categoryColor}\n                    showPercent\n                  />\n                </GridItem>\n              );\n            })}\n        </Grid>\n\n        {failed_tasks.length > 2\n          ? renderMoreButton(showMore, setShowMore)\n          : null}\n      </>\n    );\n  }\n};\n\nconst JobExplorerListRow = ({ job }) => {\n  const [expanded, setExpanded] = useState(false);\n  const handleExpansion = () => {\n    setExpanded(!expanded);\n  };\n\n  const categoryCount = job\n    ? {\n        ok: job?.ok_host_count ?? 0,\n        skipped: job?.skipped_host_count ?? 0,\n        changed: job?.changed_host_count ?? 0,\n        failed: job?.failed_host_count ?? 0,\n        unreachable: job?.unreachable_host_count ?? 0,\n      }\n    : null;\n\n  const expandedInfo = [\n    {\n      label: 'Created',\n      value: job.created ? formatDateTime(job.created) : 'Unavailable',\n    },\n    {\n      label: 'Started',\n      value: job.created ? formatDateTime(job.started) : 'Unavailable',\n    },\n    {\n      label: 'Finished',\n      value: job.created ? formatDateTime(job.finished) : 'Unavailable',\n    },\n    {\n      label: 'Tasks',\n      value: job.host_task_count ?? 0,\n    },\n  ];\n\n  return (\n    <>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex: job.id.id,\n            isExpanded: expanded,\n            onToggle: handleExpansion,\n          }}\n        />\n        <Td\n          href={job.id.tower_link}\n        >{`${job.id.id} - ${job.id.template_name}`}</Td>\n        <Td>\n          <JobStatus status={job?.status} />\n        </Td>\n        <Td>{job?.cluster_name}</Td>\n        <Td>{job?.org_name}</Td>\n        <Td>{formatJobType(job?.job_type)}</Td>\n      </Tr>\n      <Tr isExpanded={expanded}>\n        <Td colSpan={6}>\n          <ExpandableRowContent>\n            <Flex>\n              <FlexItem>\n                <strong>Host status</strong>\n              </FlexItem>\n              <FlexItem align={{ default: 'alignRight' }}>\n                <strong>Hosts</strong>\n                {'  '}\n                {job?.host_count ?? 0}\n              </FlexItem>\n            </Flex>\n            <Breakdown\n              categoryCount={categoryCount}\n              categoryColor={categoryColor}\n              showPercent\n            />\n            {renderFailedTaskBar(job.most_failed_tasks)}\n\n            <DescriptionList isHorizontal columnModifier={{ lg: '3Col' }}>\n              {expandedInfo.map(({ label, value }) => (\n                <DescriptionListGroup key={label}>\n                  <DescriptionListTerm>{label}</DescriptionListTerm>\n                  <DescriptionListDescription>\n                    {value}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n              ))}\n            </DescriptionList>\n          </ExpandableRowContent>\n        </Td>\n      </Tr>\n    </>\n  );\n};\n\nJobExplorerListRow.propTypes = {\n  job: PropTypes.object.isRequired,\n};\n\nexport default JobExplorerListRow;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TableComposable, Thead, Tbody, Tr, Th } from '@patternfly/react-table';\nimport JobExplorerListRow from './JobExplorerListRow';\n\nconst cols = ['Id/Name', 'Status', 'Cluster', 'Organization', 'Type'];\nconst sortableCols = ['Id/Name', 'Status', 'Type'];\n\nconst sortMap = {\n  0: 'id',\n  1: 'status',\n  4: 'job_type',\n};\n\nconst reverseSortMap = {\n  id: 0,\n  status: 1,\n  job_type: 4,\n};\n\nconst JobExplorerList = ({ jobs, queryParams, queryParamsDispatch }) => {\n  const [sortIdx, setSortIdx] = useState(-1);\n  const [sortDir, setSortDir] = useState('none');\n\n  useEffect(() => {\n    if (queryParams?.sort_options in reverseSortMap) {\n      setSortIdx(reverseSortMap[queryParams.sort_options]);\n      setSortDir(\n        queryParams?.sort_order &&\n          (queryParams.sort_order === 'desc' ||\n            queryParams.sort_order === 'asc')\n          ? queryParams.sort_order\n          : 'desc'\n      );\n    } else {\n      setSortIdx(-1);\n      setSortDir('none');\n    }\n  }, [queryParams]);\n\n  const onSort = (_event, idx, dir) => {\n    if (idx !== sortIdx) {\n      setSortIdx(idx);\n      queryParamsDispatch({\n        type: 'SET_SORT_OPTIONS',\n        value: { sort_options: sortMap[idx] },\n      });\n    }\n\n    if (dir !== sortDir) {\n      setSortDir(dir);\n      queryParamsDispatch({\n        type: 'SET_SORT_ORDER',\n        value: { sort_order: dir },\n      });\n    }\n  };\n\n  return (\n    <TableComposable aria-label=\"Job Explorer Table\" variant=\"compact\">\n      <Thead>\n        <Tr>\n          <Th />\n          {cols.map((head, idx) => {\n            const params = sortableCols.includes(head)\n              ? {\n                  sort: {\n                    sortBy: {\n                      index: sortIdx,\n                      direction: sortDir,\n                    },\n                    onSort,\n                    columnIndex: idx,\n                  },\n                }\n              : {};\n            return (\n              <Th key={`col-${idx}`} {...params}>\n                {head}\n              </Th>\n            );\n          })}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {jobs.map((job) => (\n          <JobExplorerListRow job={job} key={job.id.id} />\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nJobExplorerList.propTypes = {\n  jobs: PropTypes.array.isRequired,\n  queryParams: PropTypes.object.isRequired,\n  queryParamsDispatch: PropTypes.func.isRequired,\n};\n\nexport default JobExplorerList;\n","import React, { useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useQueryParams } from '../../Utilities/useQueryParams';\nimport useRequest from '../../Utilities/useRequest';\n\nimport LoadingState from '../../Components/LoadingState';\nimport NoResults from '../../Components/NoResults';\nimport ApiErrorState from '../../Components/ApiErrorState';\nimport Pagination from '../../Components/Pagination';\n\nimport { readJobExplorer, readJobExplorerOptions } from '../../Api/';\nimport { jobExplorer } from '../../Utilities/constants';\n\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport { Card, CardBody, PaginationVariant } from '@patternfly/react-core';\n\nimport JobExplorerList from '../../Components/JobExplorerList';\nimport FilterableToolbar from '../../Components/Toolbar/';\nimport { getQSConfig } from '../../Utilities/qs';\n\nconst initialQueryParams = {\n  ...jobExplorer.defaultParams,\n  attributes: jobExplorer.attributes,\n};\nconst qsConfig = getQSConfig('job-explorer', { ...initialQueryParams }, [\n  'limit',\n  'offset',\n]);\n\nconst JobExplorer = () => {\n  const {\n    queryParams,\n    setFromPagination,\n    setFromToolbar,\n    dispatch: queryParamsDispatch,\n  } = useQueryParams(qsConfig);\n\n  const {\n    result: options,\n    error,\n    request: fetchOptions,\n  } = useRequest(\n    useCallback(() => readJobExplorerOptions(queryParams), [queryParams]),\n    {}\n  );\n\n  const {\n    result: { items: data, meta },\n    isLoading: dataIsLoading,\n    isSuccess: dataIsSuccess,\n    request: fetchEndpoints,\n  } = useRequest(\n    useCallback(() => readJobExplorer(queryParams), [queryParams]),\n    { items: [], meta: {} }\n  );\n\n  useEffect(() => {\n    fetchOptions();\n    fetchEndpoints();\n  }, [queryParams]);\n\n  if (error) return <ApiErrorState message={error.error} />;\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle title={'Job Explorer'} />\n      </PageHeader>\n      <Main>\n        <Card>\n          <CardBody>\n            <FilterableToolbar\n              categories={options}\n              filters={queryParams}\n              qsConfig={qsConfig}\n              setFilters={setFromToolbar}\n              pagination={\n                <Pagination\n                  count={meta?.count}\n                  params={{\n                    limit: parseInt(queryParams.limit),\n                    offset: parseInt(queryParams.offset),\n                  }}\n                  qsConfig={qsConfig}\n                  setPagination={setFromPagination}\n                  isCompact\n                />\n              }\n              hasSettings\n            />\n            {dataIsLoading && <LoadingState />}\n            {dataIsSuccess && data.length <= 0 && <NoResults />}\n            {dataIsSuccess && data.length > 0 && (\n              <JobExplorerList\n                jobs={data}\n                queryParams={queryParams}\n                queryParamsDispatch={queryParamsDispatch}\n              />\n            )}\n            <Pagination\n              count={meta?.count}\n              params={{\n                limit: parseInt(queryParams.limit),\n                offset: parseInt(queryParams.offset),\n              }}\n              qsConfig={qsConfig}\n              setPagination={setFromPagination}\n              variant={PaginationVariant.bottom}\n            />\n          </CardBody>\n        </Card>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nJobExplorer.propTypes = {\n  location: PropTypes.object,\n  history: PropTypes.object,\n};\n\nexport default JobExplorer;\n"],"sourceRoot":""}