{"version":3,"file":"js/718.409093c871ab7130695d.js","mappings":"6IAAO,MAAMA,EAA0B,CACrC,KAAQ,iCACR,MAAS,UACT,IAAO,sC,+GCCHC,EAAeC,EAAAA,QAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4KAWzBC,EAAMJ,EAAAA,QAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,2BAIhBG,EAAkBN,EAAAA,QAAOC,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,0GAO5BK,EAAQR,EAAAA,QAAOC,IAAGQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,qGAOlBO,EAASV,EAAAA,QAAOC,IAAGU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,0EAQzB,SAASS,EAAMC,GACb,OAAOA,EAAI,GAAGC,cAAgBD,EAAIE,MAAM,GAAGC,aAC7C,CAEA,IAAMC,EAAY,SAAHC,GAA8D,IAAxDC,EAAaD,EAAbC,cAAeC,EAAaF,EAAbE,cAAaC,EAAAH,EAAEI,YAAAA,OAAW,IAAAD,GAAQA,EAC9DE,EAAaC,OAAOC,OAAON,GAAeO,QAC9C,SAACC,EAAaC,GAAU,OAAKD,EAAcC,CAAU,IAGjDC,EAAmBL,OAAOM,KAAKX,GAClCY,QAAO,SAACC,GAAQ,OAAKb,EAAca,GAAY,CAAC,IAChDC,MAAK,SAACC,EAAGC,GACR,OAAIhB,EAAce,GAAKf,EAAcgB,GAC5B,EAELhB,EAAce,GAAKf,EAAcgB,IAC3B,EAEH,CACT,IACCC,KAAI,SAACJ,GACJ,MAAO,CACLK,KAAML,EACNM,WAAYnB,EAAca,GAAYT,EACtCgB,MAAOnB,EAAcY,GAEzB,IAEIQ,EAAiB,EA9BN,KA8BYX,EAAiBY,OAAS,GAAmB,IAE1E,OACEC,IAAAA,cAAAA,IAAAA,SAAA,KACEA,IAAAA,cAAC3C,EAAY,KACV8B,EAAiBO,KAAI,SAAAO,EAAwBC,GAAQ,IAA7BN,EAAUK,EAAVL,WAAYC,EAAKI,EAALJ,MACnC,OAAIK,EAAMf,EAAiBY,OAAS,EAEhCC,IAAAA,cAACA,IAAAA,SAAc,CAACG,IAAKD,GACnBF,IAAAA,cAACtC,EAAG,CACF0C,MAAO,CACLC,gBAAiBR,EACjBS,MAAO,GAAFC,OAAkB,IAAbX,EAAmBE,EAAc,QAG/CE,IAAAA,cAACtC,EAAG,CACF0C,MAAO,CACLC,gBAAiB,cACjBC,MAAO,GAAFC,OAhDN,IAgDqB,SAO1BP,IAAAA,cAACA,IAAAA,SAAc,CAACG,IAAKD,GACnBF,IAAAA,cAACtC,EAAG,CACF0C,MAAO,CACLC,gBAAiBR,EACjBS,MAAO,GAAFC,OAAkB,IAAbX,EAAmBE,EAAc,QAMvD,KAEFE,IAAAA,cAACpC,EAAe,KACbuB,EAAiBO,KAAI,SAAAc,GAAA,IAAGb,EAAIa,EAAJb,KAAMC,EAAUY,EAAVZ,WAAYC,EAAKW,EAALX,MAAK,OAC9CG,IAAAA,cAAClC,EAAK,CAACqC,IAAG,SAAAI,OAAWZ,IACnBK,IAAAA,cAAChC,EAAM,CAACoC,MAAO,CAAEC,gBAAiBR,KACjCjB,EACCoB,IAAAA,cAAA,SACG9B,EAAMyB,GAAM,IAAEc,KAAKC,MAAmB,IAAbd,GAAkB,KAG9CI,IAAAA,cAAA,SAAI9B,EAAMyB,IAEN,KAKlB,EAEApB,EAAUoC,UAAY,CACpBjC,cAAekC,IAAAA,OAAiBC,WAChCpC,cAAemC,IAAAA,OAAiBC,WAChCjC,YAAagC,IAAAA,MAGf,S,qaCiOA,QAzToB,WAClB,IAAAE,GAKIC,EAAAA,EAAAA,IAAeC,EAAAA,GAAYC,eAJ7BC,EAAWJ,EAAXI,YACAC,EAAiBL,EAAjBK,kBACAC,EAAcN,EAAdM,eACUC,EAAmBP,EAA7BQ,SAGFC,GAIIC,EAAAA,EAAAA,IAAWC,EAAAA,GAAwB,CAAC,GAH9BC,EAAOH,EAAfI,OACAC,EAAKL,EAALK,MACSC,EAAYN,EAArBO,QAGFC,GAGIP,EAAAA,EAAAA,IAAWQ,EAAAA,GAAiB,CAAEC,MAAO,GAAIC,KAAM,CAAEC,MAAO,KAAMC,EAAAL,EAFhEJ,OAAiBU,EAAID,EAAXH,MAAaC,EAAIE,EAAJF,KACdI,EAAcP,EAAvBD,QAQF,IALAS,EAAAA,EAAAA,YAAU,WACRV,EAAaX,GACboB,EAAepB,EACjB,GAAG,CAACA,IAEAU,EAAO,OAAO5B,IAAAA,cAACwC,EAAAA,EAAa,CAACC,QAASb,EAAMA,MAAMA,QAEtD,IAsBMlD,EAAgB,CACpBgE,GAAIC,EAAAA,EAAyBC,MAC7BC,OAAQF,EAAAA,EAAyBC,MACjCE,YAAaC,EAAAA,EAAyBH,MACtCI,QAASC,EAAAA,EAAwBL,MACjCM,OAAQC,EAAAA,EAAuBP,MAC/BQ,QAASC,EAAAA,EAAwBT,OAsE7BnE,EAAgB,SAAC6E,GAAI,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACzBL,EACI,CACEZ,GAAuB,QAArBa,EAAED,aAAI,EAAJA,EAAMM,qBAAa,IAAAL,EAAAA,EAAI,EAC3BH,QAAiC,QAA1BI,EAAEF,aAAI,EAAJA,EAAMO,0BAAkB,IAAAL,EAAAA,EAAI,EACrCR,QAAiC,QAA1BS,EAAEH,aAAI,EAAJA,EAAMQ,0BAAkB,IAAAL,EAAAA,EAAI,EACrCP,OAA+B,QAAzBQ,EAAEJ,aAAI,EAAJA,EAAMS,yBAAiB,IAAAL,EAAAA,EAAI,EACnCZ,YAAyC,QAA9Ba,EAAEL,aAAI,EAAJA,EAAMU,8BAAsB,IAAAL,EAAAA,EAAI,GAE/C,IAAI,EAqBJM,EAA0B,CAC9B,CACEC,OAAQ,UACR3E,KAAM,KACN4E,KAAM,OACNC,KAAM,SAACd,GAAI,OAAKtD,IAAAA,cAACqE,EAAAA,SAAQ,CAACC,KAAMhB,EAAKiB,GAAGA,GAAIC,SAAS,MAAO,EAC5D5B,MAAO,SAACU,GACN,OACEtD,IAAAA,cAAA,KACEyE,KAAMnB,EAAKiB,GAAGG,WACdC,OAAO,SACPC,IAAI,uBAAqB,GAAArE,OAErB+C,EAAKiB,GAAGA,GAAE,OAAAhE,OAAM+C,EAAKiB,GAAGM,eAGlC,GAEF,CACEX,OAAQ,SACR3E,KAAM,SACN4E,KAAM,QACNC,KAAM,SAACd,GAAI,OAAKtD,IAAAA,cAAC8E,EAAAA,EAAS,CAACC,OAAQzB,aAAI,EAAJA,EAAMyB,QAAU,EACnDnC,MAAO,SAACU,GACN,OAAOtD,IAAAA,cAAC8E,EAAAA,EAAS,CAACC,OAAQzB,aAAI,EAAJA,EAAMyB,QAClC,GAEF,CACEb,OAAQ,UACRC,KAAM,OACNC,KAAM,SAACd,GAAI,OAAKtD,IAAAA,cAACqE,EAAAA,SAAQ,CAACC,KAAMhB,EAAK0B,aAAcR,SAAS,MAAO,EACnE5B,MAAO,SAACU,GACN,OAAOA,EAAK0B,YACd,GAEF,CACEd,OAAQ,eACRC,KAAM,OACNC,KAAM,SAACd,GAAI,OAAKtD,IAAAA,cAACqE,EAAAA,SAAQ,CAACC,KAAMhB,EAAK2B,SAAUT,SAAS,MAAO,EAC/D5B,MAAO,SAACU,GACN,OAAOA,EAAK2B,QACd,GAEF,CACEf,OAAQ,OACR3E,KAAM,WACN4E,KAAM,OACNC,KAAM,SAACd,GAAI,OAAKtD,IAAAA,cAACqE,EAAAA,SAAQ,CAACC,KAAMhB,EAAK4B,SAAUV,SAAS,MAAO,EAC/D5B,MAAO,SAACU,GACN,OAAO6B,EAAAA,EAAAA,IAAc7B,aAAI,EAAJA,EAAM4B,SAC7B,IAiCJ,OACElF,IAAAA,cAACA,IAAAA,SAAc,KACbA,IAAAA,cAACoF,EAAAA,WAAU,CAAClH,MAAO,iBACnB8B,IAAAA,cAACqF,EAAAA,GAAW,KACVrF,IAAAA,cAACsF,EAAAA,EAAI,KACHtF,IAAAA,cAACuF,EAAAA,EAAQ,KACPvF,IAAAA,cAACwF,EAAAA,EAAiB,CAChBC,WAAY/D,EACZgE,QAASxE,EACTyE,WAAYvE,EACZwE,WACE5F,IAAAA,cAAC6F,EAAAA,EAAU,CACT1D,MAAOD,EAAKC,MACZ2D,OAAQ,CACNC,OAAQ7E,EAAY6E,MACpBC,QAAS9E,EAAY8E,QAEvBC,cAAe9E,EACf+E,WAAS,IAGbC,cAAe,SAACC,EAAqBC,GAAgB,OACnDrG,IAAAA,cAACsG,EAAAA,GAAa,CACZZ,QAASxE,EACTyE,WAAYvE,EACZiF,iBAAkBA,EAClBD,oBAAqBA,EACrB7B,GAAI,uBACJgC,MAAO,mCACPC,SAAU,mCACVC,UACEvF,EAAYwF,wCAEdC,SAAU,SAAC/D,GACTxB,EACE,0CACAwB,EAEJ,EACAgE,UAAW,iCACXC,YACE,yIAEF,EAEJC,aAAW,IAEb9G,IAAAA,cAAC+G,EAAAA,UAAS,CACRC,UAAW3E,EACX4E,UAAW/E,EAAKC,MAChB+E,oBAAkB,EAClBC,aAAclD,EACdmD,YAjFe,SAAC9D,GAAI,IAAA+D,EAAA,OAC9BrH,IAAAA,cAACsH,EAAAA,qBAAoB,KACnBtH,IAAAA,cAACuH,EAAAA,EAAI,KACHvH,IAAAA,cAACwH,EAAAA,EAAQ,KACPxH,IAAAA,cAAA,cAAQ,gBAEVA,IAAAA,cAACwH,EAAAA,EAAQ,CAACC,MAAO,CAAEC,QAAS,eAC1B1H,IAAAA,cAAA,cAAQ,SACP,KACgB,QADZqH,EACJ/D,aAAI,EAAJA,EAAMqE,kBAAU,IAAAN,EAAAA,EAAI,IAGzBrH,IAAAA,cAACzB,EAAAA,EAAS,CACRE,cAAeA,EAAc6E,GAC7B5E,cAAeA,EACfE,aAAW,IApJW,SAACgJ,GAC3B,IAAAC,GAAgCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAE5B,GAAoB,MAAhBH,EACF,OACE5H,IAAAA,cAAAA,IAAAA,SAAA,KACEA,IAAAA,cAAA,SACEA,IAAAA,cAAA,cAAQ,qBAGVA,IAAAA,cAACmI,EAAAA,EAAI,CAACC,WAAS,GACZR,EACEvJ,MAAM,EAAG4J,EAAWL,EAAa7H,OAAS,GAC1CL,KAAI,SAAC2I,EAAMnI,GAAQ,IAAAoI,EAAAC,EAAAC,EACZ/J,EAAgB,CACpBoE,OAA+B,QAAzByF,EAAED,aAAI,EAAJA,EAAMI,yBAAiB,IAAAH,EAAAA,EAAI,EACnCpF,OAA+B,QAAzBqF,EAAEF,aAAI,EAAJA,EAAMtE,yBAAiB,IAAAwE,EAAAA,EAAI,EACnCzF,YAAyC,QAA9B0F,EAAEH,aAAI,EAAJA,EAAMrE,8BAAsB,IAAAwE,EAAAA,EAAI,GAG/C,OACExI,IAAAA,cAAC0I,EAAAA,EAAQ,CAACC,GAAI,EAAGC,GAAI,GAAIzI,IAAG,eAAAI,OAAiBL,IAC3CF,IAAAA,cAACuH,EAAAA,EAAI,KACHvH,IAAAA,cAACwH,EAAAA,EAAQ,KACPxH,IAAAA,cAAA,cAAQ,cAAmB,IAAEqI,aAAI,EAAJA,EAAMQ,WAGrC7I,IAAAA,cAACwH,EAAAA,EAAQ,CAACC,MAAO,CAAEC,QAAS,eAC1B1H,IAAAA,cAAA,cAAQ,gBAAqB,IAAEqI,aAAI,EAAJA,EAAMS,cAGzC9I,IAAAA,cAACzB,EAAAA,EAAS,CACRE,cAAeA,EACfC,cAAeA,EACfE,aAAW,IAInB,KAGHgJ,EAAa7H,OAAS,EA3DN,SAACkI,EAAUC,GAClC,OACElI,IAAAA,cAACuH,EAAAA,EAAI,CAACwB,UAAU,cACd/I,IAAAA,cAACwH,EAAAA,EAAQ,CAACC,MAAO,CAAEC,QAAS,eAC1B1H,IAAAA,cAACgJ,EAAAA,GAAM,CACLC,QAAQ,YACRC,QAAS,WACPhB,GAAaD,EACf,EACAkB,UAAW,CAAEzB,QAAS,cAErBO,EAAW,YAAc,cAKpC,CA4CYmB,CAAiBnB,EAAUC,GAC3B,KAIZ,CAuGKmB,CAAoB/F,EAAKgG,mBAC1BtJ,IAAAA,cAACuJ,EAAAA,EAAe,CAACC,cAAY,EAACC,eAAgB,CAAEd,GAAI,SA3FnC,SAACrF,GAAI,IAAAoG,EAAA,MAAK,CAC7B,CACEnD,MAAO,UACP3D,MAAOU,EAAKqG,SAAUC,EAAAA,EAAAA,IAAetG,EAAKqG,SAAW,eAEvD,CACEpD,MAAO,UACP3D,MAAOU,EAAKqG,SAAUC,EAAAA,EAAAA,IAAetG,EAAKuG,SAAW,eAEvD,CACEtD,MAAO,WACP3D,MAAOU,EAAKqG,SAAUC,EAAAA,EAAAA,IAAetG,EAAKwG,UAAY,eAExD,CACEvD,MAAO,QACP3D,MAA2B,QAAtB8G,EAAEpG,EAAKyG,uBAAe,IAAAL,EAAAA,EAAI,GAElC,CA2EMM,CAAa1G,GAAM5D,KAAI,SAAAlB,GAAA,IAAG+H,EAAK/H,EAAL+H,MAAO3D,EAAKpE,EAALoE,MAAK,OACrC5C,IAAAA,cAACiK,EAAAA,EAAoB,CAAC9J,IAAKoG,GACzBvG,IAAAA,cAACkK,EAAAA,EAAmB,KAAE3D,GACtBvG,IAAAA,cAACmK,EAAAA,EAA0B,KAAEvH,GACR,KAGN,EAwDbwH,gBAAiB,0BACjBC,gBAAiB,mBACjBC,sBAAuB,qCACvB/K,KAAM2B,EAAYqJ,aAClBC,cAAetJ,EAAYuJ,WAC3BC,QAAS,SAACC,GA7QN,IAACzK,KA6QmByK,KA5QtBzJ,EAAYqJ,cACtBlJ,EAAoB,CAClB8C,KAAM,mBACNvB,MAAO,CAAE2H,aAAcrK,KAEzBmB,EAAoB,CAClB8C,KAAM,iBACNvB,MAAO,CACL6H,WAAY,UAIhBpJ,EAAoB,CAClB8C,KAAM,iBACNvB,MAAO,CACL6H,WAAuC,QAA3BvJ,EAAYuJ,WAAuB,OAAS,QA6P1B,IAE5BzK,IAAAA,cAAC6F,EAAAA,EAAU,CACT1D,MAAOD,EAAKC,MACZ2D,OAAQ,CACNC,OAAQ7E,EAAY6E,MACpBC,QAAS9E,EAAY8E,QAEvBC,cAAe9E,EACf8H,QAAS2B,EAAAA,EAAkBC,YAOzC,C,wICzUA,MAgDA,EAhD4C,EAAG9F,YAqC3C,kBAAC,IAAK,CACJkE,QAAQ,UACRpJ,MAtCa,MACf,OAAQkF,GACN,IAAK,aACH,MAAO,QACT,IAAK,SACL,IAAK,QACH,MAAO,MACT,IAAK,UACL,IAAK,UACH,MAAO,OACT,IAAK,WACH,MAAO,SAET,QACE,MAAO,O,EAwBF+F,GACPC,KArBY,MACd,OAAQhG,GACN,IAAK,aACH,OAAO,kBAAC,KAAe,MACzB,IAAK,SACL,IAAK,QACH,OAAO,kBAAC,KAAqB,MAC/B,IAAK,UACH,OAAO,kBAAC,KAAW,MACrB,IAAK,WACH,OAAO,kBAAC,KAAuB,MAEjC,QACE,OAAO,kBAAC,KAAS,M,EAQbiG,GACN5K,MAAO,CAAE6K,YAAa,SAAUC,aAAc,YAE7C,QAAWnG,G,0FC/DlB,MAAMoG,EAAwB,CAC5B,CAAEjN,MAAO,IAAK0E,MAAO,GACrB,CAAE1E,MAAO,KAAM0E,MAAO,IACtB,CAAE1E,MAAO,KAAM0E,MAAO,IACtB,CAAE1E,MAAO,KAAM0E,MAAO,IACtB,CAAE1E,MAAO,KAAM0E,MAAO,KAgBlB,EAAuC,EAC3CT,QAAQ,EACRiJ,iBAAiB,KACjBtF,SACAG,mBACGoF,MAEH,MAAM,OAAErF,EAAM,MAAED,GAAUD,EACpBwF,EAAc7K,KAAK8K,MAAMvF,EAASD,EAAQ,GAC1CyF,EAAmBC,IAAkBA,EAAO,GAAK1F,EAEvD,OACE,kBAAC,IAAY,WACFsF,EAAMnF,UAAY,iBAAmB,oBAC9Ce,UAAW9E,EACXuJ,SAAS,gBACTN,eAAgBA,GAAkBD,EAClCQ,QAAS5F,EACT0F,KAAMH,EACNM,gBAAiB,CAACC,EAAIF,EAAiBF,KACrCxF,EAAcuF,EAAgBC,GAAOE,EAAQ,EAE/CG,UAAW,CAACD,EAAIJ,KACdxF,EAAcuF,EAAgBC,GAAM,KAElCJ,GAEP,EAGH,EAAW1K,UAAY,CACrBwB,MAAO,WACP2D,OAAQ,UAAgB,CACtBE,OAAQ,WAAiBnF,WACzBkF,MAAO,WAAiBlF,aACvBA,WACHoF,cAAe,SAAepF,WAC9BuK,eAAgB,YACd,UAAgB,CACdlN,MAAO,WAAiB2C,WACxB+B,MAAO,WAAiB/B,aACvBA,aAIP,MCpEA,EDoEA,C","sources":["webpack:///./node_modules/@patternfly/react-tokens/dist/esm/global_danger_color_200.js","webpack:///./src/Charts/Breakdown.js","webpack:///./src/Containers/JobExplorer/JobExplorer.js","webpack:///./src/Components/JobStatus.tsx","webpack:///./src/Components/Pagination/Pagination.tsx","webpack:///./src/Components/Pagination/index.ts"],"sourcesContent":["export const global_danger_color_200 = {\n  \"name\": \"--pf-global--danger-color--200\",\n  \"value\": \"#a30000\",\n  \"var\": \"var(--pf-global--danger-color--200)\"\n};\nexport default global_danger_color_200;","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst BarContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  width: 100%;\n  max-width: 100%;\n  height: 1rem;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n`;\n\nconst Bar = styled.div`\n  height: 100%;\n`;\n\nconst LabelsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-bottom: 1rem;\n`;\n\nconst Label = styled.div`\n  padding-left: 2rem;\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n`;\n\nconst Square = styled.div`\n  width: 0.75rem;\n  height: 0.75rem;\n  margin-right: 0.5rem;\n`;\n\nconst whiteSpace = 0.15; // Currently in percent of total bar width\n\nfunction title(str) {\n  return str[0].toUpperCase() + str.slice(1).toLowerCase();\n}\n\nconst Breakdown = ({ categoryCount, categoryColor, showPercent = false }) => {\n  const totalCount = Object.values(categoryCount).reduce(\n    (accumulated, currentVal) => accumulated + currentVal\n  );\n\n  const sortedCategories = Object.keys(categoryCount)\n    .filter((category) => categoryCount[category] > 0)\n    .sort((a, b) => {\n      if (categoryCount[a] < categoryCount[b]) {\n        return 1; // Normally should be -1, but we want descending order\n      }\n      if (categoryCount[a] > categoryCount[b]) {\n        return -1;\n      }\n      return 0;\n    })\n    .map((category) => {\n      return {\n        name: category,\n        barSpacing: categoryCount[category] / totalCount,\n        color: categoryColor[category],\n      };\n    });\n\n  const remainingSpace = 1 - ((sortedCategories.length - 1) * whiteSpace) / 100;\n\n  return (\n    <>\n      <BarContainer>\n        {sortedCategories.map(({ barSpacing, color }, idx) => {\n          if (idx < sortedCategories.length - 1) {\n            return (\n              <React.Fragment key={idx}>\n                <Bar\n                  style={{\n                    backgroundColor: color,\n                    width: `${barSpacing * 100 * remainingSpace}%`,\n                  }}\n                />\n                <Bar\n                  style={{\n                    backgroundColor: 'transparent',\n                    width: `${whiteSpace}%`,\n                  }}\n                />\n              </React.Fragment>\n            );\n          } else {\n            return (\n              <React.Fragment key={idx}>\n                <Bar\n                  style={{\n                    backgroundColor: color,\n                    width: `${barSpacing * 100 * remainingSpace}%`,\n                  }}\n                />\n              </React.Fragment>\n            );\n          }\n        })}\n      </BarContainer>\n      <LabelsContainer>\n        {sortedCategories.map(({ name, barSpacing, color }) => (\n          <Label key={`label-${name}`}>\n            <Square style={{ backgroundColor: color }} />\n            {showPercent ? (\n              <p>\n                {title(name)} {Math.round(barSpacing * 100)}%\n              </p>\n            ) : (\n              <p>{title(name)}</p>\n            )}\n          </Label>\n        ))}\n      </LabelsContainer>\n    </>\n  );\n};\n\nBreakdown.propTypes = {\n  categoryColor: PropTypes.object.isRequired,\n  categoryCount: PropTypes.object.isRequired,\n  showPercent: PropTypes.bool,\n};\n\nexport default Breakdown;\n","import React, { useEffect, useState } from 'react';\n\nimport { useQueryParams } from '../../QueryParams/';\nimport useRequest from '../../Utilities/useRequest';\nimport { formatDateTime, formatJobType } from '../../Utilities/helpers';\nimport JobStatus from '../../Components/JobStatus';\nimport Breakdown from '../../Charts/Breakdown';\n\nimport ApiErrorState from '../../Components/ApiStatus/ApiErrorState';\nimport Pagination from '../../Components/Pagination';\n\nimport { readJobExplorer, readJobExplorerOptions } from '../../Api/';\nimport { jobExplorer } from '../../Utilities/constants';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  PageSection,\n  PaginationVariant,\n} from '@patternfly/react-core';\nimport {\n  global_palette_green_300,\n  global_palette_black_400,\n  global_palette_gold_300,\n  global_palette_red_100,\n  global_palette_blue_300,\n} from '@patternfly/react-tokens';\nimport { ExpandableRowContent } from '@patternfly/react-table';\n\nimport FilterableToolbar from '../../Components/Toolbar/';\nimport { SettingsPanel } from '../../Components/Toolbar/Groups';\nimport { PageHeader, PageTable, TextCell } from '@ansible/ansible-ui-framework';\n\nconst JobExplorer = () => {\n  const {\n    queryParams,\n    setFromPagination,\n    setFromToolbar,\n    dispatch: queryParamsDispatch,\n  } = useQueryParams(jobExplorer.defaultParams);\n\n  const {\n    result: options,\n    error,\n    request: fetchOptions,\n  } = useRequest(readJobExplorerOptions, {});\n\n  const {\n    result: { items: data, meta },\n    request: fetchEndpoints,\n  } = useRequest(readJobExplorer, { items: [], meta: { count: 0 } });\n\n  useEffect(() => {\n    fetchOptions(queryParams);\n    fetchEndpoints(queryParams);\n  }, [queryParams]);\n\n  if (error) return <ApiErrorState message={error.error.error} />;\n\n  const setSort = (idx) => {\n    if (idx !== queryParams.sort_options) {\n      queryParamsDispatch({\n        type: 'SET_SORT_OPTIONS',\n        value: { sort_options: idx },\n      });\n      queryParamsDispatch({\n        type: 'SET_SORT_ORDER',\n        value: {\n          sort_order: 'asc',\n        },\n      });\n    } else {\n      queryParamsDispatch({\n        type: 'SET_SORT_ORDER',\n        value: {\n          sort_order: queryParams.sort_order === 'asc' ? 'desc' : 'asc',\n        },\n      });\n    }\n  };\n\n  const categoryColor = {\n    ok: global_palette_green_300.value,\n    passed: global_palette_green_300.value,\n    unreachable: global_palette_black_400.value,\n    changed: global_palette_gold_300.value,\n    failed: global_palette_red_100.value,\n    skipped: global_palette_blue_300.value,\n  };\n\n  const renderMoreButton = (showMore, setShowMore) => {\n    return (\n      <Flex className=\"pf-u-mb-md\">\n        <FlexItem align={{ default: 'alignRight' }}>\n          <Button\n            variant=\"secondary\"\n            onClick={() => {\n              setShowMore(!showMore);\n            }}\n            fullWidth={{ default: 'fullWidth' }}\n          >\n            {showMore ? 'Show less' : 'Show more'}\n          </Button>\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  const renderFailedTaskBar = (failed_tasks) => {\n    const [showMore, setShowMore] = useState(false);\n\n    if (failed_tasks != null) {\n      return (\n        <>\n          <p>\n            <strong>Top failed tasks</strong>\n          </p>\n\n          <Grid hasGutter>\n            {failed_tasks\n              .slice(0, showMore ? failed_tasks.length : 2)\n              .map((task, idx) => {\n                const categoryCount = {\n                  passed: task?.passed_host_count ?? 0,\n                  failed: task?.failed_host_count ?? 0,\n                  unreachable: task?.unreachable_host_count ?? 0,\n                };\n\n                return (\n                  <GridItem lg={6} md={12} key={`most-failed-${idx}`}>\n                    <Flex>\n                      <FlexItem>\n                        <strong>Task name </strong> {task?.task_name}\n                      </FlexItem>\n\n                      <FlexItem align={{ default: 'alignRight' }}>\n                        <strong>Module name </strong> {task?.module_name}\n                      </FlexItem>\n                    </Flex>\n                    <Breakdown\n                      categoryCount={categoryCount}\n                      categoryColor={categoryColor}\n                      showPercent\n                    />\n                  </GridItem>\n                );\n              })}\n          </Grid>\n\n          {failed_tasks.length > 2\n            ? renderMoreButton(showMore, setShowMore)\n            : null}\n        </>\n      );\n    }\n  };\n\n  const categoryCount = (item) =>\n    item\n      ? {\n          ok: item?.ok_host_count ?? 0,\n          skipped: item?.skipped_host_count ?? 0,\n          changed: item?.changed_host_count ?? 0,\n          failed: item?.failed_host_count ?? 0,\n          unreachable: item?.unreachable_host_count ?? 0,\n        }\n      : null;\n\n  const expandedInfo = (item) => [\n    {\n      label: 'Created',\n      value: item.created ? formatDateTime(item.created) : 'Unavailable',\n    },\n    {\n      label: 'Started',\n      value: item.created ? formatDateTime(item.started) : 'Unavailable',\n    },\n    {\n      label: 'Finished',\n      value: item.created ? formatDateTime(item.finished) : 'Unavailable',\n    },\n    {\n      label: 'Tasks',\n      value: item.host_task_count ?? 0,\n    },\n  ];\n\n  const jobExplorerTableColumns = [\n    {\n      header: 'ID/Name',\n      sort: 'id',\n      type: 'text',\n      cell: (item) => <TextCell text={item.id.id} iconSize=\"sm\" />,\n      value: (item) => {\n        return (\n          <a\n            href={item.id.tower_link}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {`${item.id.id} - ${item.id.template_name}`}\n          </a>\n        );\n      },\n    },\n    {\n      header: 'Status',\n      sort: 'status',\n      type: 'label',\n      cell: (item) => <JobStatus status={item?.status} />,\n      value: (item) => {\n        return <JobStatus status={item?.status} />;\n      },\n    },\n    {\n      header: 'Cluster',\n      type: 'text',\n      cell: (item) => <TextCell text={item.cluster_name} iconSize=\"sm\" />,\n      value: (item) => {\n        return item.cluster_name;\n      },\n    },\n    {\n      header: 'Organization',\n      type: 'text',\n      cell: (item) => <TextCell text={item.org_name} iconSize=\"sm\" />,\n      value: (item) => {\n        return item.org_name;\n      },\n    },\n    {\n      header: 'Type',\n      sort: 'job_type',\n      type: 'text',\n      cell: (item) => <TextCell text={item.job_type} iconSize=\"sm\" />,\n      value: (item) => {\n        return formatJobType(item?.job_type);\n      },\n    },\n  ];\n\n  const expandedRowContent = (item) => (\n    <ExpandableRowContent>\n      <Flex>\n        <FlexItem>\n          <strong>Host status</strong>\n        </FlexItem>\n        <FlexItem align={{ default: 'alignRight' }}>\n          <strong>Hosts</strong>\n          {'  '}\n          {item?.host_count ?? 0}\n        </FlexItem>\n      </Flex>\n      <Breakdown\n        categoryCount={categoryCount(item)}\n        categoryColor={categoryColor}\n        showPercent\n      />\n      {renderFailedTaskBar(item.most_failed_tasks)}\n      <DescriptionList isHorizontal columnModifier={{ lg: '3Col' }}>\n        {expandedInfo(item).map(({ label, value }) => (\n          <DescriptionListGroup key={label}>\n            <DescriptionListTerm>{label}</DescriptionListTerm>\n            <DescriptionListDescription>{value}</DescriptionListDescription>\n          </DescriptionListGroup>\n        ))}\n      </DescriptionList>\n    </ExpandableRowContent>\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader title={'Job Explorer'} />\n      <PageSection>\n        <Card>\n          <CardBody>\n            <FilterableToolbar\n              categories={options}\n              filters={queryParams}\n              setFilters={setFromToolbar}\n              pagination={\n                <Pagination\n                  count={meta.count}\n                  params={{\n                    limit: +queryParams.limit,\n                    offset: +queryParams.offset,\n                  }}\n                  setPagination={setFromPagination}\n                  isCompact\n                />\n              }\n              settingsPanel={(setSettingsExpanded, settingsExpanded) => (\n                <SettingsPanel\n                  filters={queryParams}\n                  setFilters={setFromToolbar}\n                  settingsExpanded={settingsExpanded}\n                  setSettingsExpanded={setSettingsExpanded}\n                  id={'showRootWorkflowJobs'}\n                  label={'Ignore nested workflows and jobs'}\n                  labelOff={'Ignore nested workflows and jobs'}\n                  isChecked={\n                    queryParams.only_root_workflows_and_standalone_jobs\n                  }\n                  onChange={(value) => {\n                    setFromToolbar(\n                      'only_root_workflows_and_standalone_jobs',\n                      value\n                    );\n                  }}\n                  ariaLabel={'ignore nested workflow popover'}\n                  bodyContent={\n                    'If enabled, nested workflows and jobs will not be included in the overall totals. Enable this option to filter out duplicate entries.'\n                  }\n                />\n              )}\n              hasSettings\n            />\n            <PageTable\n              pageItems={data}\n              itemCount={meta.count}\n              autoHidePagination\n              tableColumns={jobExplorerTableColumns}\n              expandedRow={expandedRowContent}\n              errorStateTitle={'Error loading templates'}\n              emptyStateTitle={'No templates yet'}\n              emptyStateDescription={'To get started, create a template.'}\n              sort={queryParams.sort_options}\n              sortDirection={queryParams.sort_order}\n              setSort={(e) => setSort(e)}\n            />\n            <Pagination\n              count={meta.count}\n              params={{\n                limit: +queryParams.limit,\n                offset: +queryParams.offset,\n              }}\n              setPagination={setFromPagination}\n              variant={PaginationVariant.bottom}\n            />\n          </CardBody>\n        </Card>\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nexport default JobExplorer;\n","import React, { FunctionComponent } from 'react';\nimport { Label } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ClockIcon,\n  SyncAltIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\n\nimport { capitalize } from '../Utilities/helpers';\n\ninterface Props {\n  status:\n    | 'successful'\n    | 'failed'\n    | 'running'\n    | 'pending'\n    | 'error'\n    | 'canceled'\n    | 'new'\n    | 'waiting';\n}\n\nconst JobStatus: FunctionComponent<Props> = ({ status }) => {\n  const getColor = () => {\n    switch (status) {\n      case 'successful':\n        return 'green';\n      case 'failed':\n      case 'error':\n        return 'red';\n      case 'running':\n      case 'pending':\n        return 'blue';\n      case 'canceled':\n        return 'orange';\n      // case new, waiting\n      default:\n        return 'grey';\n    }\n  };\n\n  const getIcon = () => {\n    switch (status) {\n      case 'successful':\n        return <CheckCircleIcon />;\n      case 'failed':\n      case 'error':\n        return <ExclamationCircleIcon />;\n      case 'running':\n        return <SyncAltIcon />;\n      case 'canceled':\n        return <ExclamationTriangleIcon />;\n      // case new, waiting, pending\n      default:\n        return <ClockIcon />;\n    }\n  };\n\n  return (\n    <Label\n      variant=\"outline\"\n      color={getColor()}\n      icon={getIcon()}\n      style={{ marginRight: '0.5rem', marginBottom: '0.5rem' }}\n    >\n      {capitalize(status)}\n    </Label>\n  );\n};\n\nexport default JobStatus;\n","import React, { FunctionComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nconst defaultPerPageOptions = [\n  { title: '5', value: 5 },\n  { title: '10', value: 10 },\n  { title: '15', value: 15 },\n  { title: '20', value: 20 },\n  { title: '25', value: 25 },\n];\n\ntype SetPagination = (offset: number, limit?: number) => void;\n\ninterface Props {\n  count?: number;\n  perPageOptions?: { title: string; value: number }[];\n  params: {\n    offset: number;\n    limit: number;\n  };\n  setPagination: SetPagination;\n  [x: string]: unknown;\n}\n\nconst Pagination: FunctionComponent<Props> = ({\n  count = 0,\n  perPageOptions = null,\n  params,\n  setPagination,\n  ...props\n}) => {\n  const { offset, limit } = params;\n  const currentPage = Math.floor(offset / limit + 1);\n  const returnOffsetVal = (page: number) => (page - 1) * limit;\n\n  return (\n    <PFPagination\n      data-cy={props.isCompact ? 'pagination_top' : 'pagination_bottom'}\n      itemCount={count}\n      widgetId=\"aa-pagination\"\n      perPageOptions={perPageOptions ?? defaultPerPageOptions}\n      perPage={limit}\n      page={currentPage}\n      onPerPageSelect={(_e, perPage: number, page: number) => {\n        setPagination(returnOffsetVal(page), perPage);\n      }}\n      onSetPage={(_e, page: number) => {\n        setPagination(returnOffsetVal(page));\n      }}\n      {...props}\n    />\n  );\n};\n\nPagination.propTypes = {\n  count: PropTypes.number,\n  params: PropTypes.exact({\n    offset: PropTypes.number.isRequired,\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  setPagination: PropTypes.func.isRequired,\n  perPageOptions: PropTypes.arrayOf(\n    PropTypes.exact({\n      title: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default Pagination;\n","import Pagination from './Pagination';\n\nexport default Pagination;\n"],"names":["global_danger_color_200","BarContainer","styled","div","_templateObject","_taggedTemplateLiteral","Bar","_templateObject2","LabelsContainer","_templateObject3","Label","_templateObject4","Square","_templateObject5","title","str","toUpperCase","slice","toLowerCase","Breakdown","_ref","categoryCount","categoryColor","_ref$showPercent","showPercent","totalCount","Object","values","reduce","accumulated","currentVal","sortedCategories","keys","filter","category","sort","a","b","map","name","barSpacing","color","remainingSpace","length","React","_ref2","idx","key","style","backgroundColor","width","concat","_ref3","Math","round","propTypes","PropTypes","isRequired","_useQueryParams","useQueryParams","jobExplorer","defaultParams","queryParams","setFromPagination","setFromToolbar","queryParamsDispatch","dispatch","_useRequest","useRequest","readJobExplorerOptions","options","result","error","fetchOptions","request","_useRequest2","readJobExplorer","items","meta","count","_useRequest2$result","data","fetchEndpoints","useEffect","ApiErrorState","message","ok","global_palette_green_300","value","passed","unreachable","global_palette_black_400","changed","global_palette_gold_300","failed","global_palette_red_100","skipped","global_palette_blue_300","item","_item$ok_host_count","_item$skipped_host_co","_item$changed_host_co","_item$failed_host_cou","_item$unreachable_hos","ok_host_count","skipped_host_count","changed_host_count","failed_host_count","unreachable_host_count","jobExplorerTableColumns","header","type","cell","TextCell","text","id","iconSize","href","tower_link","target","rel","template_name","JobStatus","status","cluster_name","org_name","job_type","formatJobType","PageHeader","PageSection","Card","CardBody","FilterableToolbar","categories","filters","setFilters","pagination","Pagination","params","limit","offset","setPagination","isCompact","settingsPanel","setSettingsExpanded","settingsExpanded","SettingsPanel","label","labelOff","isChecked","only_root_workflows_and_standalone_jobs","onChange","ariaLabel","bodyContent","hasSettings","PageTable","pageItems","itemCount","autoHidePagination","tableColumns","expandedRow","_item$host_count","ExpandableRowContent","Flex","FlexItem","align","default","host_count","failed_tasks","_useState","useState","_useState2","_slicedToArray","showMore","setShowMore","Grid","hasGutter","task","_task$passed_host_cou","_task$failed_host_cou","_task$unreachable_hos","passed_host_count","GridItem","lg","md","task_name","module_name","className","Button","variant","onClick","fullWidth","renderMoreButton","renderFailedTaskBar","most_failed_tasks","DescriptionList","isHorizontal","columnModifier","_item$host_task_count","created","formatDateTime","started","finished","host_task_count","expandedInfo","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","errorStateTitle","emptyStateTitle","emptyStateDescription","sort_options","sortDirection","sort_order","setSort","e","PaginationVariant","bottom","getColor","icon","getIcon","marginRight","marginBottom","defaultPerPageOptions","perPageOptions","props","currentPage","floor","returnOffsetVal","page","widgetId","perPage","onPerPageSelect","_e","onSetPage"],"sourceRoot":""}