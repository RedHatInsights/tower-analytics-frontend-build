{"version":3,"file":"js/456.56efad2c9296988e8b49.js","mappings":"ySAwFA,QAxEqB,WACjB,IAAIA,GAAW,IAAAC,eACXC,EAAOF,EAASG,SAASC,MAAM,KAAKC,MACpCC,EAAQ,IAAIC,gBAAgBP,EAASQ,QAAQC,IAAI,SACjDC,EAAS,IAAIH,gBAAgBP,EAASQ,QAAQC,IAAI,UAClDE,GAAS,OAAUT,GAiEvB,OAAOS,EAhEQ,WACX,IAAIC,GAAW,UACXC,EAAKF,EAAOG,YAAaC,EAAsBF,EAAGE,oBAAqBC,EAAgBH,EAAGG,cAAeC,EAAeJ,EAAGI,aAAcC,EAAkBL,EAAGK,gBAC9JC,GAAc,QAAoBD,GAClCE,GAAc,QAAeJ,GAAeI,YAC5CC,EAAYN,EAAsBA,EAAoB,GAAK,MAC3DO,GAAK,EAAAC,EAAA,IAAWJ,EAAa,CAAEK,aAAc,KAAOC,EAAUH,EAAGI,OAAQC,EAAeL,EAAGM,QAASC,EAAYP,EAAGO,UAAWC,EAAYR,EAAGQ,WACjJ,IAAAC,YAAU,WACNJ,EAAaP,KACd,CAACA,IACJ,IAAIY,EAAc,CACdC,EAAGb,EAAYI,aACfU,MAAOd,EAAYI,aACnBW,aAAa,QAA2Bf,EAAYgB,aACpDf,UAAWA,GAEXgB,GAAyB,QAAmB,CAC5CA,uBAAwB,IACzB,YAAYA,uBACf,IAAKR,GAAaC,EAAW,CACzB,IAAIQ,EAA8E,SAA9D,IAAI/B,gBAAgBP,EAASQ,QAAQC,IAAI,kBAG7D,OAAkB,CACdP,KAAMA,EACNqC,aAAc,CACVN,EAAGD,EAAYC,EACfC,MAAOF,EAAYE,MACnBC,YAAaH,EAAYG,YACzBd,UAAWW,EAAYX,WAE3BmB,mBAAoB,CAChBlC,MAAOA,EACPI,OAAQA,EACR4B,cAAeA,EACfG,YAAaxB,EACbG,YAAaA,EACbsB,cAAejB,EACfY,uBAAwBA,EACxBM,YAAavB,EAAYI,aACzBoB,UAAsC,SAA3BxB,EAAYyB,WAAwB,OAAS,MACxDC,gBAAiB1B,EAAYgB,YAC7BW,UAAW3B,EAAY4B,WACvBC,QAAS7B,EAAY8B,SACrBC,UAAW/B,EAAYgC,mBAE5BxC,EAAUV,GAEjB,IAAImD,GAAW,UACf,OAAQ,kBAAoB,EAAAC,KAAM,KAC9B,kBAAoB,EAAAC,SAAU,KAC1B,kBAAoB,EAAAC,WAAY,CAAEC,QAAS,EAAAC,kBAAA,MACvC,kBAAoB,EAAAC,eAAgB,CAAEC,KAAM,OAC5C,kBAAoB,EAAAC,MAAO,CAAEC,KAAM,KAAMC,aAAc,MAAQ,qCAC/D,kBAAoB,EAAAC,eAAgB,KAChC,2CACA,IACA,kBAAoB,IAAK,CAAEC,KAAM,+CAAiD,SAClF,IACA,mDACJ,kBAAoB,EAAAC,OAAQ,CAAEC,IAAK,kBAAmBV,QAAS,EAAAW,cAAA,QAAuB,aAAc,kBAAmBC,QAAS,WACxHhB,EAAS,gBACR,sBAETiB,GAAa,kBAAoB,aAAgB,OCrFrE,ECG2B,WACvB,OAAQ,kBAAoB,EAAAC,OAAQ,KAChC,kBAAoB,EAAAC,MAAO,CAAEC,KAAM,CAAC,mBAAuB,SAAU,oBACjE,kBAAoB,EAAgB","sources":["webpack:///./src/Containers/DownloadReport/DownloadReport.tsx","webpack:///./src/Containers/DownloadReport/index.tsx","webpack:///./src/Containers/DownloadReport/DownloadReportRouter.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport React, { useEffect } from 'react';\nimport { downloadPdf as downloadPdfAction } from '../../store/pdfDownloadButton/actions';\nimport { useAppDispatch } from '../../store';\nimport { useQueryParams, useReadQueryParams, useRedirect, } from '../../QueryParams';\nimport useRequest from '../../Utilities/useRequest';\nimport { endpointFunctionMap } from '../../Api';\nimport { useLocation } from 'react-router-dom';\nimport { getReport } from '../Reports/Shared/schemas';\nimport { Button, ButtonVariant, Card, CardBody, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title, } from '@patternfly/react-core';\nimport { Paths } from '../../paths';\nimport { getDateFormatByGranularity } from '../../Utilities/helpers';\nimport { DownloadIcon } from '@patternfly/react-icons';\nvar DownloadReport = function () {\n    var location = useLocation();\n    var slug = location.pathname.split('/').pop();\n    var token = new URLSearchParams(location.search).get('token');\n    var expiry = new URLSearchParams(location.search).get('expiry');\n    var report = getReport(slug);\n    var download = function () {\n        var dispatch = useAppDispatch();\n        var _a = report.layoutProps, availableChartTypes = _a.availableChartTypes, defaultParams = _a.defaultParams, dataEndpoint = _a.dataEndpoint, optionsEndpoint = _a.optionsEndpoint;\n        var readOptions = endpointFunctionMap(optionsEndpoint);\n        var queryParams = useQueryParams(defaultParams).queryParams;\n        var chartType = availableChartTypes ? availableChartTypes[0] : 'bar';\n        var _b = useRequest(readOptions, { sort_options: [] }), options = _b.result, fetchOptions = _b.request, isLoading = _b.isLoading, isSuccess = _b.isSuccess;\n        useEffect(function () {\n            fetchOptions(queryParams);\n        }, [queryParams]);\n        var chartParams = {\n            y: queryParams.sort_options,\n            label: queryParams.sort_options,\n            xTickFormat: getDateFormatByGranularity(queryParams.granularity),\n            chartType: chartType,\n        };\n        var chartSeriesHiddenProps = useReadQueryParams({\n            chartSeriesHiddenProps: [],\n        }, 'settings').chartSeriesHiddenProps;\n        if (!isLoading && isSuccess) {\n            var showExtraRows = new URLSearchParams(location.search).get('showExtraRows') === 'true'\n                ? true\n                : false;\n            downloadPdfAction({\n                slug: slug,\n                schemaParams: {\n                    y: chartParams.y,\n                    label: chartParams.label,\n                    xTickFormat: chartParams.xTickFormat,\n                    chartType: chartParams.chartType,\n                },\n                dataFetchingParams: {\n                    token: token,\n                    expiry: expiry,\n                    showExtraRows: showExtraRows,\n                    endpointUrl: dataEndpoint,\n                    queryParams: queryParams,\n                    selectOptions: options,\n                    chartSeriesHiddenProps: chartSeriesHiddenProps,\n                    sortOptions: queryParams.sort_options,\n                    sortOrder: queryParams.sort_order === 'desc' ? 'desc' : 'asc',\n                    dateGranularity: queryParams.granularity,\n                    startDate: queryParams.start_date,\n                    endDate: queryParams.end_date,\n                    dateRange: queryParams.quick_date_range,\n                },\n            }, dispatch, slug);\n        }\n        var redirect = useRedirect();\n        return (React.createElement(Card, null,\n            React.createElement(CardBody, null,\n                React.createElement(EmptyState, { variant: EmptyStateVariant.full },\n                    React.createElement(EmptyStateIcon, { icon: DownloadIcon }),\n                    React.createElement(Title, { size: \"lg\", headingLevel: \"h3\" }, 'The report is being processed....'),\n                    React.createElement(EmptyStateBody, null,\n                        \"The download will start shortly. You can\",\n                        ' ',\n                        React.createElement(\"a\", { href: \"javascript:window.open('','_self').close();\" }, \"close\"),\n                        ' ',\n                        \"this page after the report has been downloaded.\"),\n                    React.createElement(Button, { key: \"add-item-button\", variant: ButtonVariant.primary, \"aria-label\": 'Go to home page', onClick: function () {\n                            redirect(Paths.clusters);\n                        } }, 'Go to home page')))));\n    };\n    return report ? download() : React.createElement(React.Fragment, null);\n};\nexport default DownloadReport;\n","import DownloadReportRouter from './DownloadReportRouter';\nexport default DownloadReportRouter;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport DownloadReport from './DownloadReport';\nimport { Paths } from '../../paths';\nvar DownloadReportRouter = function () {\n    return (React.createElement(Switch, null,\n        React.createElement(Route, { path: [Paths.downloadReport + \"/:slug\", '/downloadReport'] },\n            React.createElement(DownloadReport, null))));\n};\nexport default DownloadReportRouter;\n"],"names":["location","useLocation","slug","pathname","split","pop","token","URLSearchParams","search","get","expiry","report","dispatch","_a","layoutProps","availableChartTypes","defaultParams","dataEndpoint","optionsEndpoint","readOptions","queryParams","chartType","_b","useRequest","sort_options","options","result","fetchOptions","request","isLoading","isSuccess","useEffect","chartParams","y","label","xTickFormat","granularity","chartSeriesHiddenProps","showExtraRows","schemaParams","dataFetchingParams","endpointUrl","selectOptions","sortOptions","sortOrder","sort_order","dateGranularity","startDate","start_date","endDate","end_date","dateRange","quick_date_range","redirect","Card","CardBody","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","Title","size","headingLevel","EmptyStateBody","href","Button","key","ButtonVariant","onClick","download","Switch","Route","path"],"sourceRoot":""}