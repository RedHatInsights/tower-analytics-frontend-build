{"version":3,"file":"js/933.3886d372ca4ea162fb71.js","mappings":"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","sources":["webpack:///./src/Charts/Breakdown.js","webpack:///./src/Components/ApiStatus/LoadingState.tsx","webpack:///./src/Components/ApiStatus/NoData.tsx","webpack:///./src/Components/Chart/types.ts","webpack:///./src/Components/Chart/convertApi.ts","webpack:///./src/Components/Chart/index.tsx","webpack:///./src/Components/EmptyList.tsx","webpack:///./src/Components/Pagination/Pagination.tsx","webpack:///./src/Components/Pagination/index.ts","webpack:///./src/Components/ApiStatus/ApiStatusWrapper.tsx","webpack:///./src/Components/Chart/PlotlyChart.js","webpack:///./src/Utilities/percentageFormatter.ts","webpack:///./src/Containers/Reports/Layouts/Standard/Components/ExtendedTableRow/HostAnomalies.tsx","webpack:///./src/Containers/Reports/Layouts/Standard/Components/ExtendedTableRow/TemplatesExplorer.tsx","webpack:///./src/Containers/Reports/Layouts/Standard/Components/ExtendedTableRow/MostUsedModules.tsx","webpack:///./src/Containers/Reports/Layouts/Standard/Components/ExtendedTableRow/types.ts","webpack:///./src/Containers/Reports/Layouts/Standard/Table/TableRow.tsx","webpack:///./src/Containers/Reports/Layouts/Standard/Components/ExtendedTableRow/index.ts","webpack:///./src/Containers/Reports/Layouts/Standard/Table/index.tsx","webpack:///./src/Components/Toolbar/DownloadButton/constants.tsx","webpack:///./src/FeatureFlags/types.ts","webpack:///./src/FeatureFlags/useFeatureFlag.ts","webpack:///./src/Components/Toolbar/DownloadButton/Steps/ExportOptions/index.tsx","webpack:///./src/Components/Toolbar/DownloadButton/Steps/PdfDetails/index.tsx","webpack:///./src/Components/Toolbar/DownloadButton/Steps/EmailDetails/index.tsx","webpack:///./src/Components/Toolbar/DownloadButton/Steps/PdfDetails/PdfDownload.tsx","webpack:///./src/Components/Toolbar/DownloadButton/useOptionsData.tsx","webpack:///./src/Components/Toolbar/DownloadButton/Steps/EmailDetails/SendEmail.tsx","webpack:///./src/Components/Toolbar/DownloadButton/index.tsx","webpack:///./src/Containers/Reports/Shared/hydrateSchema.ts","webpack:///./src/Containers/Reports/Layouts/Standard/ReportCard.tsx","webpack:///./src/Containers/Reports/Layouts/AutomationCalculator/TotalSavings.tsx","webpack:///./src/Containers/Reports/Layouts/AutomationCalculator/CalculationCost.tsx","webpack:///./src/Containers/Reports/Layouts/AutomationCalculator/AutomationFormula.tsx","webpack:///./src/Utilities/timeFormatter.ts","webpack:///./src/Containers/Reports/Layouts/AutomationCalculator/TemplatesTable/ExplandedRowContents.tsx","webpack:///./src/Containers/Reports/Layouts/AutomationCalculator/TemplatesTable/Row.tsx","webpack:///./src/Containers/Reports/Layouts/AutomationCalculator/TemplatesTable/index.tsx","webpack:///./src/Containers/Reports/Layouts/AutomationCalculator/AutomationCalculator.tsx","webpack:///./src/Containers/Reports/Layouts/index.tsx","webpack:///./src/Containers/Reports/Shared/constants.ts","webpack:///./src/Containers/Reports/paths.ts","webpack:///./src/Utilities/currencyFormatter.ts","webpack:///./src/Utilities/hoursFormatter.ts"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst BarContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  width: 100%;\n  max-width: 100%;\n  height: 1rem;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n`;\n\nconst Bar = styled.div`\n  height: 100%;\n`;\n\nconst LabelsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-bottom: 1rem;\n`;\n\nconst Label = styled.div`\n  padding-left: 2rem;\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n`;\n\nconst Square = styled.div`\n  width: 0.75rem;\n  height: 0.75rem;\n  margin-right: 0.5rem;\n`;\n\nconst whiteSpace = 0.15; // Currently in percent of total bar width\n\nfunction title(str) {\n  return str[0].toUpperCase() + str.slice(1).toLowerCase();\n}\n\nconst Breakdown = ({ categoryCount, categoryColor, showPercent = false }) => {\n  const totalCount = Object.values(categoryCount).reduce(\n    (accumulated, currentVal) => accumulated + currentVal\n  );\n\n  const sortedCategories = Object.keys(categoryCount)\n    .filter((category) => categoryCount[category] > 0)\n    .sort((a, b) => {\n      if (categoryCount[a] < categoryCount[b]) {\n        return 1; // Normally should be -1, but we want descending order\n      }\n      if (categoryCount[a] > categoryCount[b]) {\n        return -1;\n      }\n      return 0;\n    })\n    .map((category) => {\n      return {\n        name: category,\n        barSpacing: categoryCount[category] / totalCount,\n        color: categoryColor[category],\n      };\n    });\n\n  const remainingSpace = 1 - ((sortedCategories.length - 1) * whiteSpace) / 100;\n\n  return (\n    <>\n      <BarContainer>\n        {sortedCategories.map(({ barSpacing, color }, idx) => {\n          if (idx < sortedCategories.length - 1) {\n            return (\n              <React.Fragment key={idx}>\n                <Bar\n                  style={{\n                    backgroundColor: color,\n                    width: `${barSpacing * 100 * remainingSpace}%`,\n                  }}\n                />\n                <Bar\n                  style={{\n                    backgroundColor: 'transparent',\n                    width: `${whiteSpace}%`,\n                  }}\n                />\n              </React.Fragment>\n            );\n          } else {\n            return (\n              <React.Fragment key={idx}>\n                <Bar\n                  style={{\n                    backgroundColor: color,\n                    width: `${barSpacing * 100 * remainingSpace}%`,\n                  }}\n                />\n              </React.Fragment>\n            );\n          }\n        })}\n      </BarContainer>\n      <LabelsContainer>\n        {sortedCategories.map(({ name, barSpacing, color }) => (\n          <Label key={`label-${name}`}>\n            <Square style={{ backgroundColor: color }} />\n            {showPercent ? (\n              <p>\n                {title(name)} {Math.round(barSpacing * 100)}%\n              </p>\n            ) : (\n              <p>{title(name)}</p>\n            )}\n          </Label>\n        ))}\n      </LabelsContainer>\n    </>\n  );\n};\n\nBreakdown.propTypes = {\n  categoryColor: PropTypes.object.isRequired,\n  categoryCount: PropTypes.object.isRequired,\n  showPercent: PropTypes.bool,\n};\n\nexport default Breakdown;\n","import React, { FunctionComponent } from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\n\nconst LoadingState: FunctionComponent<Record<string, never>> = () => (\n  <EmptyState variant={EmptyStateVariant.full} style={{ minHeight: '400px' }}>\n    <EmptyStateIcon icon={CubesIcon} />\n    <Title headingLevel=\"h5\" size=\"lg\">\n      Loading...\n    </Title>\n    <EmptyStateBody>Please wait.</EmptyStateBody>\n  </EmptyState>\n);\n\nexport default LoadingState;\n","import React, { FunctionComponent } from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\n\ninterface Props {\n  title?: string | Record<string, any>;\n  subtext?: string | Record<string, any>;\n}\n\nconst NoData: FunctionComponent<Props> = ({ title, subtext }) => (\n  <EmptyState variant={EmptyStateVariant.full} style={{ minHeight: '400px' }}>\n    <EmptyStateIcon icon={CubesIcon} />\n    <Title headingLevel=\"h5\" size=\"lg\">\n      {title ? title : 'No Data'}\n    </Title>\n    {subtext && <EmptyStateBody>{subtext}</EmptyStateBody>}\n  </EmptyState>\n);\n\nexport default NoData;\n","import { ChartLegendEntry } from '@ansible/react-json-chart-builder';\n\nexport enum ApiType {\n  nonGrouped = 'nonGrouped',\n  grouped = 'grouped',\n}\n\nexport interface NonGroupedApi {\n  type?: ApiType.nonGrouped;\n  items: Record<string, string | number>[];\n  meta: {\n    legend: ChartLegendEntry[];\n    count: number;\n  };\n}\n\nexport interface GroupedApi {\n  type?: ApiType.grouped;\n  dates: {\n    date: string;\n    items: Record<string, string | number>[];\n  }[];\n  meta: {\n    legend: ChartLegendEntry[];\n    count: number;\n  };\n}\n\nexport type ApiReturnType = NonGroupedApi | GroupedApi;\n","import { ChartData, ChartDataSerie } from '@ansible/react-json-chart-builder';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ApiReturnType, ApiType, GroupedApi } from './types';\n\nexport const convertGroupedByData = (data: GroupedApi): ChartDataSerie[] => {\n  const { dates } = data;\n  const items: ChartDataSerie[] = [];\n  dates.forEach((el) => {\n    // Add items to the correct serie\n    el.items.forEach((item, idx) => {\n      if (!items[idx]) {\n        items[idx] = {\n          serie: [],\n          hidden: false,\n          name: uuidv4(),\n        };\n      }\n      items[idx].serie.push({\n        created_date: el.date,\n        ...item,\n      });\n    });\n  });\n  return items;\n};\n\nexport const convertApiToData = (result: ApiReturnType): ChartData => {\n  const data: ChartData = {\n    series: [],\n    legend: [],\n  };\n\n  if ('dates' in result) {\n    result.type = ApiType.grouped;\n  } else {\n    result.type = ApiType.nonGrouped;\n  }\n\n  switch (result.type) {\n    case ApiType.grouped:\n      data.series = convertGroupedByData(result);\n      break;\n    case ApiType.nonGrouped:\n      data.series = [\n        {\n          serie: result.items || result.meta.legend,\n          hidden: false,\n          name: uuidv4(),\n        },\n      ];\n      break;\n  }\n\n  if (result.meta?.legend) {\n    data.legend = result.meta.legend.map((item) => {\n      const s = data.series.find(({ serie }) => {\n        return serie.find(({ id: serieId }) => serieId === item.id);\n      });\n      return {\n        ...item,\n        childName: s && s.name ? s.name : '',\n      };\n    });\n  }\n\n  return data;\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport ChartBuilder, {\n  ChartData,\n  ChartFunctions,\n  ChartSchemaElement,\n  functions,\n} from '@ansible/react-json-chart-builder';\nimport { useQueryParams } from '../../QueryParams';\nimport { convertApiToData } from './convertApi';\nimport { ApiReturnType } from './types';\nimport { ChartDataSerie } from '@ansible/react-json-chart-builder/dist/cjs';\n\ninterface Props {\n  schema: ChartSchemaElement[];\n  data: ApiReturnType;\n  specificFunctions?: ChartFunctions;\n  namespace?: string;\n}\n\ninterface Props {\n  x?: number;\n  y?: number;\n  [key: string]: any;\n}\n\nconst CustomPoint: FC<Props> = ({ x, y, disableInlineStyles, ...props }) => {\n  return x != undefined && y != undefined ? (\n    <ExclamationCircleIcon\n      x={x - 8}\n      y={y - 8}\n      {...props}\n      {...props.events}\n    ></ExclamationCircleIcon>\n  ) : null;\n};\n\nconst customFunctions = (specificFunctions?: ChartFunctions) => ({\n  ...functions,\n  axisFormat: {\n    ...functions.axisFormat,\n    formatAsYear: (tick: string | number) =>\n      Intl.DateTimeFormat('en', { year: 'numeric' }).format(new Date(tick)),\n    formatAsMonth: (tick: string | number) =>\n      Intl.DateTimeFormat('en', { month: 'long' }).format(new Date(tick)),\n    ...specificFunctions?.axisFormat,\n  },\n  labelFormat: {\n    ...functions.labelFormat,\n    ...specificFunctions?.labelFormat,\n  },\n\n  onClick: {\n    ...functions.onClick,\n    ...specificFunctions?.onClick,\n  },\n  dataComponent: {\n    scatterPlot: CustomPoint,\n  },\n});\n\nconst applyHiddenFilter = (\n  chartData: ChartData,\n  chartSeriesHidden: string[] = []\n): ChartData => ({\n  ...chartData,\n  series: chartData.series.map((series: ChartDataSerie) => ({\n    ...series,\n    hidden:\n      (!!series.serie[0].id || !!series.serie[0].host_id) &&\n      !!chartSeriesHidden.includes(\n        // eslint-disable-next-line no-prototype-builtins\n        series.serie[0].hasOwnProperty('host_id').toString() ||\n          // eslint-disable-next-line no-prototype-builtins\n          series.serie[0].hasOwnProperty('id').toString()\n      ),\n  })),\n});\n\nconst Chart: FC<Props> = ({\n  schema,\n  data,\n  specificFunctions,\n  namespace = 'settings',\n}) => {\n  const {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    queryParams: { chartSeriesHiddenProps },\n    dispatch,\n  } = useQueryParams(\n    {\n      chartSeriesHiddenProps: [],\n    },\n    namespace\n  );\n\n  const [chartData, setChartData] = useState<ChartData>({\n    series: [],\n    legend: [],\n  });\n\n  const setChartDataHook = (newChartData: ChartData) => {\n    dispatch({\n      type: 'SET_CHART_SERIES_HIDDEN_PROPS',\n      value: newChartData.series.map((line) => [line.serie[0].id, line.hidden]),\n    });\n\n    setChartData(newChartData);\n  };\n\n  useEffect(() => {\n    setChartData(\n      applyHiddenFilter(\n        convertApiToData(data),\n        chartSeriesHiddenProps as string[]\n      )\n    );\n  }, [data]);\n  return (\n    <ChartBuilder\n      schema={schema}\n      functions={{\n        ...customFunctions(specificFunctions),\n      }}\n      dataState={[chartData, setChartDataHook]}\n    />\n  );\n};\n\nexport default Chart;\n","import React, { FunctionComponent } from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Button,\n  EmptyStateVariant,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { AddCircleOIcon, SearchIcon } from '@patternfly/react-icons';\nimport { createUrl } from '../QueryParams/';\nimport { useNavigate } from 'react-router-dom';\n\ninterface Props {\n  label?: string;\n  title?: string;\n  message?: string;\n  canAdd?: boolean;\n  showButton?: boolean;\n  path?: string;\n  onButtonClick?: () => null;\n}\n\nconst EmptyList: FunctionComponent<Props> = ({\n  label = '',\n  title = 'No items found.',\n  message = '',\n  canAdd = false,\n  showButton = false,\n  path = undefined,\n  onButtonClick = undefined,\n}) => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  /* @ts-ignore */\n  const navigate = useNavigate();\n\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon icon={canAdd ? AddCircleOIcon : SearchIcon} />\n      <Title size=\"lg\" headingLevel=\"h3\">\n        {title}\n      </Title>\n      <EmptyStateBody>{message}</EmptyStateBody>\n      {(canAdd || showButton) && (\n        <Button\n          key=\"add-item-button\"\n          variant={ButtonVariant.primary}\n          aria-label={label}\n          onClick={() => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            /* @ts-ignore */\n            if (path) navigate(createUrl(path));\n            if (onButtonClick) onButtonClick();\n          }}\n        >\n          {label}\n        </Button>\n      )}\n    </EmptyState>\n  );\n};\n\nexport default EmptyList;\n","import React, { FunctionComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nconst defaultPerPageOptions = [\n  { title: '5', value: 5 },\n  { title: '10', value: 10 },\n  { title: '15', value: 15 },\n  { title: '20', value: 20 },\n  { title: '25', value: 25 },\n];\n\ntype SetPagination = (offset: number, limit?: number) => void;\n\ninterface Props {\n  count?: number;\n  perPageOptions?: { title: string; value: number }[];\n  params: {\n    offset: number;\n    limit: number;\n  };\n  setPagination: SetPagination;\n  [x: string]: unknown;\n}\n\nconst Pagination: FunctionComponent<Props> = ({\n  count = 0,\n  perPageOptions = null,\n  params,\n  setPagination,\n  ...props\n}) => {\n  const { offset, limit } = params;\n  const currentPage = Math.floor(offset / limit + 1);\n  const returnOffsetVal = (page: number) => (page - 1) * limit;\n\n  return (\n    <PFPagination\n      data-cy={props.isCompact ? 'pagination_top' : 'pagination_bottom'}\n      itemCount={count}\n      widgetId=\"aa-pagination\"\n      perPageOptions={perPageOptions ?? defaultPerPageOptions}\n      perPage={limit}\n      page={currentPage}\n      onPerPageSelect={(_e, perPage: number, page: number) => {\n        setPagination(returnOffsetVal(page), perPage);\n      }}\n      onSetPage={(_e, page: number) => {\n        setPagination(returnOffsetVal(page));\n      }}\n      {...props}\n    />\n  );\n};\n\nPagination.propTypes = {\n  count: PropTypes.number,\n  params: PropTypes.exact({\n    offset: PropTypes.number.isRequired,\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  setPagination: PropTypes.func.isRequired,\n  perPageOptions: PropTypes.arrayOf(\n    PropTypes.exact({\n      title: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default Pagination;\n","import Pagination from './Pagination';\n\nexport default Pagination;\n","import React, { FunctionComponent } from 'react';\nimport ApiErrorState from './ApiErrorState';\nimport LoadingState from './LoadingState';\nimport NoData from './NoData';\n\ninterface Props {\n  api: {\n    result: { meta: { count: number; tableData: [] } };\n    error: {\n      error: {\n        error: string;\n      };\n    };\n    isSuccess: boolean;\n    isLoading: boolean;\n  };\n  children: React.ReactNode;\n  customLoading: boolean;\n  customEmptyState?: boolean;\n}\n\nconst ApiStatusWrapper: FunctionComponent<Props> = ({\n  api,\n  children,\n  customLoading = false,\n  customEmptyState = false,\n}) => {\n  if (customLoading && api.isLoading) {\n    return <>{children}</>;\n  }\n  if (!api || api.isLoading)\n    return <LoadingState data-cy={'api_loading_state'} />;\n  if (api.error)\n    return <ApiErrorState message={api.error.error.error || api.error.error} />;\n\n  if (api.isSuccess) {\n    if (\n      api.result.meta.count === 0 &&\n      !customEmptyState &&\n      api.result.meta.tableData\n    )\n      return (\n        <NoData\n          title={'There is currently no data to display.'}\n          subtext={'Select a template filter to see data.'}\n        />\n      );\n    else if (api.result.meta.count === 0 && !customEmptyState)\n      return <NoData />;\n    return <>{children}</>;\n  }\n\n  return null;\n};\n\nexport default ApiStatusWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Plot from 'react-plotly.js';\nimport { useQueryParams } from '../../QueryParams';\nimport { reportDefaultParams } from '../../Utilities/constants';\n\nconst PlotlyChart = ({ data }) => {\n  const items = data;\n  const defaultParams = reportDefaultParams('templates_by_organization');\n  const { queryParams } = useQueryParams(defaultParams);\n\n  const xLabel = 'Organization';\n  const xLabelValue = 'customdata.org_name';\n  const yLabel = 'Template count';\n  const yToolTipLabel = 'Template';\n  const yToolTipLabelValue = 'customdata.template_name';\n\n  function findZLabel() {\n    let zLabel = '';\n    switch (queryParams.adoption_rate_type) {\n      case 'elapsed_of_templates_by_org':\n        return (zLabel = 'Elapsed');\n      case 'job_count_of_templates_by_org':\n        return (zLabel = 'Job count');\n      case 'task_count_of_templates_by_org':\n        return (zLabel = 'Task count');\n      case 'host_count_of_templates_by_org':\n        return (zLabel = 'Host count');\n      default:\n        return zLabel;\n    }\n  }\n\n  function findZLabelValue() {\n    let zLabelValue = '';\n    switch (queryParams.adoption_rate_type) {\n      case 'elapsed_of_templates_by_org':\n        return (zLabelValue = 'customdata.elapsed');\n      case 'job_count_of_templates_by_org':\n        return (zLabelValue = 'customdata.total_count');\n      case 'task_count_of_templates_by_org':\n        return (zLabelValue = 'customdata.host_task_count');\n      case 'host_count_of_templates_by_org':\n        return (zLabelValue = 'customdata.host_count');\n      default:\n        return zLabelValue;\n    }\n  }\n\n  const orgArray = items.map(function (el) {\n    return el.org_name;\n  });\n  const templateCountArray = items.map(function (el) {\n    return el.template_count;\n  });\n  const ZArray = items.map(function (el) {\n    switch (queryParams.adoption_rate_type) {\n      case 'elapsed_of_templates_by_org':\n        return el.elapsed;\n      case 'job_count_of_templates_by_org':\n        return el.total_count;\n      case 'task_count_of_templates_by_org':\n        return el.host_task_count;\n      case 'host_count_of_templates_by_org':\n        return el.host_count;\n      default:\n        return null;\n    }\n  });\n\n  const state = {\n    config: {\n      modeBarButtonsToRemove: ['zoom'],\n      displaylogo: false,\n      responsive: true,\n    },\n    data: [\n      {\n        customdata: items, //customization: items from API\n        hovertemplate: ` <br>  <b>${xLabel}</b>: %{${xLabelValue}}  <br>  <b>${yToolTipLabel}</b>: %{${yToolTipLabelValue}}  <br>  <b>${findZLabel()}</b>: %{${findZLabelValue()}}  <br> `, //customization: All labels and values defined above\n        marker: {\n          color: ZArray, //customization: Derived from items\n          coloraxis: 'coloraxis',\n        },\n        name: '',\n        x: orgArray, //customization: Derived from items\n        y: templateCountArray, //customization: Derived from items\n        type: 'bar',\n      },\n    ],\n    layout: {\n      template: {\n        data: {\n          bar: [\n            {\n              error_x: {\n                color: '#2a3f5f',\n              },\n              error_y: {\n                color: '#2a3f5f',\n              },\n              marker: {\n                line: {\n                  color: 'white',\n                  width: 0.5,\n                },\n                pattern: {\n                  fillmode: 'overlay',\n                  size: 10,\n                  solidity: 0.2,\n                },\n              },\n              type: 'bar',\n            },\n          ],\n        },\n        layout: {\n          hoverlabel: {\n            align: 'left',\n          },\n          hovermode: 'closest',\n          paper_bgcolor: 'white',\n          plot_bgcolor: 'white',\n          xaxis: {\n            automargin: true,\n            gridcolor: '#D2D2D2',\n            linecolor: '#D2D2D2',\n            title: {\n              standoff: 15,\n            },\n            zerolinecolor: '#D2D2D2',\n            zerolinewidth: 2,\n          },\n          yaxis: {\n            automargin: true,\n            gridcolor: '#D2D2D2',\n            linecolor: '#D2D2D2',\n            title: {\n              standoff: 15,\n            },\n            zerolinecolor: '#D2D2D2',\n            zerolinewidth: 2,\n          },\n        },\n      },\n      xaxis: {\n        tickangle: -45,\n        title: {\n          text: `${xLabel}`, //customization: All labels defined above\n          font: {\n            family:\n              'RedHatText, Overpass, overpass, helvetica, arial, sans-serif',\n            size: 15,\n            color: 'black',\n          },\n        },\n      },\n      yaxis: {\n        anchor: 'x',\n        domain: [0.0, 1.0],\n        title: {\n          text: `${yLabel}`, //customization: All labels defined above\n          font: {\n            family:\n              'RedHatText, Overpass, overpass, helvetica, arial, sans-serif',\n            size: 15,\n            color: 'black',\n          },\n        },\n        color: '#4f5255',\n      },\n      coloraxis: {\n        colorbar: {\n          title: {\n            text: `${findZLabel()}`,\n            font: {\n              color: '#4f5255',\n              family:\n                'RedHatText, Overpass, overpass, helvetica, arial, sans-serif',\n              size: 15,\n            },\n          },\n          tickfont: {\n            color: '#4f5255',\n            family:\n              'RedHatText, Overpass, overpass, helvetica, arial, sans-serif',\n            size: 15,\n          },\n        },\n        colorscale: [\n          [0.0, '#0066CC'],\n          [0.2, '#004B95'],\n          [0.4, '#5752D1'],\n          [0.6, '#3C3D99'],\n          [0.8, '#C9190B'],\n          [1.0, '#A30000'],\n        ],\n      },\n      legend: {\n        title: {\n          font: {\n            family:\n              'RedHatText, Overpass, overpass, helvetica, arial, sans-serif',\n            color: '#4f5255',\n          },\n        },\n        font: {\n          size: 10,\n        },\n      },\n      margin: {\n        t: 30,\n      },\n      font: {\n        family: 'RedHatText, Overpass, overpass, helvetica, arial, sans-serif',\n        size: 14,\n        color: '#4f5255',\n      },\n      title: {\n        font: {\n          family:\n            'RedHatText, Overpass, overpass, helvetica, arial, sans-serif',\n          color: '#4f5255',\n          size: 15,\n        },\n      },\n      hoverlabel: {\n        font: {\n          size: 14,\n          family:\n            'RedHatText, Overpass, overpass, helvetica, arial, sans-serif',\n        },\n        bgcolor: '#151515',\n      },\n      style: { cursor: 'auto' },\n    },\n    style: { height: '500px', width: '100%' },\n  };\n\n  return <Plot {...state} />;\n};\n\nPlotlyChart.propTypes = {\n  data: PropTypes.array,\n};\n\nexport default PlotlyChart;\n","const percentageFormatter = (n: number): string => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    maximumSignificantDigits: 2,\n  });\n\n  return formatter.format(n);\n};\nexport default percentageFormatter;\n","/* eslint-disable @typescript-eslint/no-unsafe-call */\n// TODO(Jo): Remove eslint-disable comments\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport React from 'react';\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from '@patternfly/react-core';\nimport { ExpandableRowContent, Td, Tr } from '@patternfly/react-table';\n\nimport percentageFormatter from '../../../../../../Utilities/percentageFormatter';\n\nconst TableExpandedRow: ExpandedTableRowComponent = ({ isExpanded, item }) => {\n  const expandedInfo = (item: any) => {\n    return [\n      {\n        label: 'Slow Hosts Count',\n        value: item.slow_hosts_count ?? 0,\n      },\n      {\n        label: 'Host Task Count',\n        value: item.host_task_count ?? 0,\n      },\n      {\n        label: 'Slow Hosts Percentage',\n        value: `${percentageFormatter(item.slow_hosts_percentage)}%` ?? 0,\n      },\n      {\n        label: 'Template Success Rate',\n        value: `${percentageFormatter(item.template_success_rate)}%` ?? 0,\n      },\n    ];\n  };\n\n  return (\n    <Tr isExpanded={isExpanded}>\n      <Td colSpan={6}>\n        <ExpandableRowContent>\n          <DescriptionList isHorizontal columnModifier={{ lg: '3Col' }}>\n            {expandedInfo(item).map(({ label, value }) => (\n              <DescriptionListGroup key={label}>\n                <DescriptionListTerm>{label}</DescriptionListTerm>\n                <DescriptionListDescription>{value}</DescriptionListDescription>\n              </DescriptionListGroup>\n            ))}\n          </DescriptionList>\n        </ExpandableRowContent>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default TableExpandedRow;\n","/**\n * TODO: This file is super specific to the data set, it is not reusable at all.\n * TODO: The types could be specified if I would be more confortable with the\n * data set this is developed for. The Brekadown component is not TS, which\n * is preventing the typescript compiler from compiling this component.\n */\n\n/* eslint-disable @typescript-eslint/no-floating-promises */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport React from 'react';\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n} from '@patternfly/react-core';\nimport { ExpandableRowContent, Td, Tr } from '@patternfly/react-table';\n\nimport Breakdown from '../../../../../../Charts/Breakdown';\nimport { categoryColor } from '../../../../../../Utilities/constants';\nimport styled from 'styled-components';\nimport { ExpandedTableRowComponent } from '.';\n\nconst FailedTaskDescriptionList = styled(DescriptionList)`\n  row-gap: 16px;\n`;\n\nconst TableExpandedRow: ExpandedTableRowComponent = ({ isExpanded, item }) => {\n  const totalCount = item\n    ? {\n        ok: item?.successful_count ?? 0,\n        skipped: item?.skipped_count ?? 0,\n        failed: item?.failed_count ?? 0,\n        error: item?.error_count ?? 0,\n      }\n    : null;\n\n  const totalTaskCount = item\n    ? {\n        ok: item?.average_host_task_ok_count_per_host ?? 0,\n        skipped: item?.average_host_task_skipped_count_per_host ?? 0,\n        changed: item?.average_host_task_changed_count_per_host ?? 0,\n        failed: item?.average_host_task_failed_count_per_host ?? 0,\n        unreachable: item?.average_host_task_unreachable_count_per_host ?? 0,\n      }\n    : null;\n\n  const totalHostCount = item\n    ? {\n        ok: item?.ok_host_count ?? 0,\n        skipped: item?.skipped_host_count ?? 0,\n        changed: item?.changed_host_count ?? 0,\n        failed: item?.failed_host_count ?? 0,\n        unreachable: item?.unreachable_host_count ?? 0,\n      }\n    : null;\n\n  const taskInfo = (task: any) => {\n    return [\n      {\n        label: 'Task name',\n        value: task.task_name,\n      },\n      {\n        label: 'Module name',\n        value: task.module_name,\n      },\n    ];\n  };\n\n  const totalHostStatusCount = (task: any) => {\n    return (\n      parseInt(task.passed_host_count) +\n      parseInt(task.failed_host_count) +\n      parseInt(task.unreachable_host_count)\n    );\n  };\n\n  const totalTaskStatusCount = (task: any) => {\n    return (\n      parseInt(task.successful_count) +\n      parseInt(task.failed_count) +\n      parseInt(task.unfinished_count)\n    );\n  };\n\n  const renderFailedTaskBar = (item: any) => {\n    const failed_tasks = item.most_failed_tasks;\n    if (failed_tasks != null) {\n      return (\n        <>\n          <p>\n            <strong>Most failed tasks</strong>\n          </p>\n          <br />\n          <Grid hasGutter>\n            {failed_tasks\n              .slice(0, failed_tasks.length)\n              .map((task: any, idx: number) => {\n                const hostCount = {\n                  passed: task?.passed_host_count ?? 0,\n                  failed: task?.failed_host_count ?? 0,\n                  unreachable: task?.unreachable_host_count ?? 0,\n                };\n                const taskCount = {\n                  passed: task?.successful_count ?? 0,\n                  failed: task?.failed_count ?? 0,\n                  unfinished: task?.unfinished_count ?? 0,\n                };\n                return (\n                  <>\n                    <GridItem>\n                      <FailedTaskDescriptionList isHorizontal>\n                        {taskInfo(task).map(({ label, value }) => (\n                          <DescriptionListGroup key={label}>\n                            <DescriptionListTerm>{label}</DescriptionListTerm>\n                            <DescriptionListDescription>\n                              {value}\n                            </DescriptionListDescription>\n                          </DescriptionListGroup>\n                        ))}\n                      </FailedTaskDescriptionList>\n                    </GridItem>\n                    <GridItem lg={6} md={12} key={`hosts-${idx}`}>\n                      <Flex>\n                        <FlexItem>\n                          <strong>Host status</strong>\n                        </FlexItem>\n                        <FlexItem align={{ default: 'alignRight' }}>\n                          <strong>Hosts</strong>\n                          {'  '}\n                          {totalHostStatusCount(task)}\n                        </FlexItem>\n                      </Flex>\n                      <Breakdown\n                        categoryCount={hostCount}\n                        categoryColor={categoryColor}\n                        showPercent\n                      />\n                    </GridItem>\n                    <GridItem lg={6} md={12} key={`tasks-${idx}`}>\n                      <Flex>\n                        <FlexItem>\n                          <strong>Task status</strong>\n                        </FlexItem>\n                        <FlexItem align={{ default: 'alignRight' }}>\n                          <strong>Tasks</strong>\n                          {'  '}\n                          {totalTaskStatusCount(task)}\n                        </FlexItem>\n                      </Flex>\n                      <Breakdown\n                        categoryCount={taskCount}\n                        categoryColor={categoryColor}\n                        showPercent\n                      />\n                    </GridItem>\n                  </>\n                );\n              })}\n          </Grid>\n        </>\n      );\n    }\n  };\n\n  const expandedInfo = (item: any) => {\n    return [\n      {\n        label: 'Clusters',\n        value: item.total_cluster_count ?? 0,\n      },\n      {\n        label: 'Organizations',\n        value: item.total_org_count ?? 0,\n      },\n    ];\n  };\n\n  return (\n    <Tr isExpanded={isExpanded}>\n      <Td colSpan={6}>\n        <ExpandableRowContent>\n          <Flex>\n            <FlexItem>\n              <strong>Job status</strong>\n            </FlexItem>\n            <FlexItem align={{ default: 'alignRight' }}>\n              <strong>Jobs</strong>\n              {'  '}\n              {item?.total_count ?? 0}\n            </FlexItem>\n          </Flex>\n          <Breakdown\n            categoryCount={totalCount}\n            categoryColor={categoryColor}\n            showPercent\n          />\n\n          <Flex>\n            <FlexItem>\n              <strong>All Host status</strong>\n            </FlexItem>\n            <FlexItem align={{ default: 'alignRight' }}>\n              <strong>Hosts</strong>\n              {'  '}\n              {item?.host_count ?? 0}\n            </FlexItem>\n          </Flex>\n          <Breakdown\n            categoryCount={totalHostCount}\n            categoryColor={categoryColor}\n            showPercent\n          />\n\n          <Flex>\n            <FlexItem>\n              <strong>All Task status</strong>\n            </FlexItem>\n            <FlexItem align={{ default: 'alignRight' }}>\n              <strong>Tasks</strong>\n              {'  '}\n              {item?.host_task_count ?? 0}\n            </FlexItem>\n          </Flex>\n          <Breakdown\n            categoryCount={totalTaskCount}\n            categoryColor={categoryColor}\n            showPercent\n          />\n\n          <Divider\n            component=\"div\"\n            style={{ marginTop: '2rem', marginBottom: '1.5rem' }}\n          />\n\n          {renderFailedTaskBar(item)}\n          <DescriptionList isHorizontal columnModifier={{ lg: '3Col' }}>\n            {expandedInfo(item).map(({ label, value }) => (\n              <DescriptionListGroup key={label}>\n                <DescriptionListTerm>{label}</DescriptionListTerm>\n                <DescriptionListDescription>{value}</DescriptionListDescription>\n              </DescriptionListGroup>\n            ))}\n          </DescriptionList>\n        </ExpandableRowContent>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default TableExpandedRow;\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { ExpandableRowContent, Td, Tr } from '@patternfly/react-table';\n\nimport Breakdown from '../../../../../../Charts/Breakdown';\nimport { categoryColor } from '../../../../../../Utilities/constants';\nimport { ExpandedTableRowComponent } from '.';\n\nconst TableExpandedRow: ExpandedTableRowComponent = ({ isExpanded, item }) => {\n  const totalTaskCount = item\n    ? {\n        ok: item?.host_task_ok_count ?? 0,\n        changed: item?.host_task_changed_count ?? 0,\n        failed: item?.host_task_failed_count ?? 0,\n        skipped: item?.host_task_skipped_count ?? 0,\n        unreachable: item?.host_task_unreachable_count ?? 0,\n      }\n    : null;\n\n  return (\n    <Tr isExpanded={isExpanded}>\n      <Td colSpan={10}>\n        <ExpandableRowContent>\n          <Flex>\n            <FlexItem>\n              <strong>All Task status</strong>\n            </FlexItem>\n            <FlexItem align={{ default: 'alignRight' }}>\n              <strong>Tasks</strong>\n              {'  '}\n              {item?.host_task_count ?? 0}\n            </FlexItem>\n          </Flex>\n          <Breakdown\n            categoryCount={totalTaskCount}\n            categoryColor={categoryColor}\n            showPercent\n          />\n        </ExpandableRowContent>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default TableExpandedRow;\n","import { FC } from 'react';\nimport { LegendEntry } from '../../types';\n\nexport enum ExpandedTableRowName {\n  templatesExplorer = 'templatesExplorer',\n  hostAnomalies = 'hostAnomalies',\n  mostUsedModules = 'mostUsedModules',\n}\n\ninterface ExpandedTableRowProps {\n  isExpanded: boolean;\n  item: LegendEntry;\n}\n\nexport type ExpandedTableRowComponent = FC<ExpandedTableRowProps>;\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nimport React, { FunctionComponent, useState } from 'react';\nimport { global_disabled_color_300 } from '@patternfly/react-tokens';\n\nimport { Td, Tr } from '@patternfly/react-table';\nimport {\n  avgDurationFormatter,\n  formatTotalTime,\n} from '../../../../../Utilities/helpers';\n\nimport currencyFormatter from '../../../../../Utilities/currencyFormatter';\n\nimport { LegendEntry, TableHeaders } from '../types';\nimport { ExpandedTableRowName, getExpandedRowComponent } from '../Components';\nimport paths from '../../../paths';\nimport { Tooltip } from '@patternfly/react-core';\nimport {\n  DEFAULT_NAMESPACE,\n  createUrl,\n  useQueryParams,\n} from '../../../../../QueryParams';\nimport { useNavigate } from 'react-router-dom';\nimport { specificReportDefaultParams } from '../../../../../Utilities/constants';\nimport { QueryParams } from '../../../../../QueryParams/types';\n\nconst timeFields: string[] = ['elapsed'];\nconst costFields: string[] = [];\n\nconst isOther = (item: Record<string, string | number>, key: string) =>\n  key === 'id' && item[key] === -1;\n\nconst isNoName = (item: Record<string, string | number>, key: string) =>\n  key === 'id' && item[key] === -2;\n\nconst isAvgDuration = (item: Record<string, string | number>, key: string) =>\n  key === 'average_duration_per_task';\n\nconst getText = (\n  item: Record<string, string | number>,\n  key: string\n): string => {\n  if (isNoName(item, key)) return '-';\n  if (isOther(item, key)) return '-';\n  if (timeFields.includes(key)) return formatTotalTime(+item[key]);\n  if (costFields.includes(key)) return currencyFormatter(+item[key]);\n  if (isAvgDuration(item, key)) return avgDurationFormatter(+item[key]);\n  return `${item[key]}`;\n};\n\nconst getOthersStyle = (item: Record<string, string | number>, key: string) => {\n  if (isOther(item, key)) {\n    return {\n      backgroundColor: global_disabled_color_300.value,\n    };\n  }\n  return {};\n};\n\ninterface Params {\n  legendEntry: LegendEntry;\n  headers: TableHeaders;\n  expandedRowName?: ExpandedTableRowName;\n  clickableLinking?: boolean;\n}\n\nconst TableRow: FunctionComponent<Params> = ({\n  legendEntry,\n  headers,\n  expandedRowName,\n  clickableLinking,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const navigate = useNavigate();\n\n  const navigateToModuleBy = (slug: string, moduleId: any) => {\n    const initialQueryParams = {\n      [DEFAULT_NAMESPACE]: {\n        ...specificReportDefaultParams(slug),\n        task_action_id: [moduleId],\n      },\n    };\n    navigate(\n      createUrl(\n        'reports/' + paths.getDetails(slug).replace('/', ''),\n        true,\n        initialQueryParams\n      )\n    );\n  };\n  const navigateToTemplatesExplorer = (\n    slug: string,\n    org_id: any,\n    queryParams: QueryParams\n  ) => {\n    const initialQueryParams = {\n      [DEFAULT_NAMESPACE]: {\n        ...specificReportDefaultParams(slug),\n        org_id: [org_id],\n        template_id: queryParams.template_id,\n        cluster_id: queryParams.cluster_id,\n        inventory_id: queryParams.inventory_id,\n        status: queryParams.status,\n        limit: queryParams.limit,\n        granularity: queryParams.granularity,\n        quick_date_range: queryParams.quick_date_range,\n      },\n    };\n    navigate(\n      createUrl(\n        'reports/' + paths.getDetails(slug).replace('/', ''),\n        true,\n        initialQueryParams\n      )\n    );\n  };\n\n  const getClickableText = (\n    item: Record<string, string | number>,\n    key: string\n  ) => {\n    const { queryParams } = useQueryParams(\n      specificReportDefaultParams('templates_by_organization')\n    );\n\n    const countMapper: { [key: string]: string } = {\n      host_task_count: 'module_usage_by_task',\n      total_org_count: 'module_usage_by_organization',\n      total_template_count: 'module_usage_by_job_template',\n      total_templates_per_org: 'templates_explorer',\n    };\n    if (isNoName(item, key)) return '-';\n    if (isOther(item, key)) return '-';\n    if (timeFields.includes(key)) return formatTotalTime(+item[key]);\n    if (costFields.includes(key)) return currencyFormatter(+item[key]);\n    if (Object.keys(countMapper).includes(key) && item.id != -1 && item.name) {\n      return (\n        <Tooltip content={`View ${item.name} usage`}>\n          <a\n            onClick={() => navigateToModuleBy(countMapper[key], item.id)}\n          >{`${item[key]}`}</a>\n        </Tooltip>\n      );\n    }\n    if (Object.keys(countMapper).includes(key) && item.org_id) {\n      return (\n        <Tooltip content={`View ${item.org_name} usage`}>\n          <a\n            onClick={() =>\n              navigateToTemplatesExplorer(\n                countMapper[key],\n                item.org_id,\n                queryParams\n              )\n            }\n          >{`${item[key]}`}</a>\n        </Tooltip>\n      );\n    }\n    return `${item[key]}`;\n  };\n\n  const renderExpandedRow = () => {\n    const Component = getExpandedRowComponent(expandedRowName);\n\n    return Component ? (\n      <Component item={legendEntry} isExpanded={isExpanded} />\n    ) : null;\n  };\n\n  const skipRow = (key: string): boolean => {\n    switch (true) {\n      case key == 'total_elapsed_per_org' &&\n        typeof legendEntry.total_elapsed_per_org == 'undefined':\n      case key == 'total_job_count_per_org' &&\n        typeof legendEntry.total_job_count_per_org == 'undefined':\n      case key == 'total_host_count_per_org' &&\n        typeof legendEntry.total_host_count_per_org == 'undefined':\n      case key == 'total_task_count_per_org' &&\n        typeof legendEntry.total_task_count_per_org == 'undefined':\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  return (\n    <>\n      <Tr style={getOthersStyle(legendEntry, 'id')}>\n        {expandedRowName && (\n          <Td\n            expand={{\n              rowIndex: +legendEntry.id,\n              isExpanded,\n              onToggle: () => setIsExpanded(!isExpanded),\n            }}\n          />\n        )}\n        {headers.map(({ key }) =>\n          skipRow(key) ? null : (\n            <Td key={`${legendEntry.id}-${key}`}>\n              {clickableLinking\n                ? getClickableText(legendEntry, key)\n                : getText(legendEntry, key)}\n            </Td>\n          )\n        )}\n      </Tr>\n      {renderExpandedRow()}\n    </>\n  );\n};\n\nexport default TableRow;\n","/* eslint-disable @typescript-eslint/no-unsafe-return */\nimport HostAnomalies from './HostAnomalies';\nimport TemplatesExplorer from './TemplatesExplorer';\nimport MostUsedModules from './MostUsedModules';\nimport { ExpandedTableRowComponent, ExpandedTableRowName } from './types';\nexport * from './types';\n\nexport const getExpandedRowComponent = (\n  name?: ExpandedTableRowName\n): ExpandedTableRowComponent | null => {\n  switch (name) {\n    case 'templatesExplorer':\n      return TemplatesExplorer;\n    case 'hostAnomalies':\n      return HostAnomalies;\n    case 'mostUsedModules':\n      return MostUsedModules;\n    default:\n      return null;\n  }\n};\n","import React, { FunctionComponent, useState } from 'react';\n\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nimport TableRow from './TableRow';\nimport { LegendEntry, TableHeaders, TableSortParams } from '../types';\nimport { ExpandedTableRowName } from '../Components';\nimport { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { useQueryParams } from '../../../../../QueryParams';\nimport { reportDefaultParams } from '../../../../../Utilities/constants';\n\ninterface Props {\n  headers: TableHeaders;\n  legend: LegendEntry[];\n  expandedRowName?: ExpandedTableRowName;\n  clickableLinking?: boolean;\n  showKebab?: boolean;\n  getSortParams?: (currKey: string) => TableSortParams;\n}\n\nconst ReportTable: FunctionComponent<Props> = ({\n  legend,\n  headers,\n  getSortParams = () => ({}),\n  expandedRowName,\n  clickableLinking,\n  showKebab,\n}) => {\n  const [isKebabOpen, setIsKebabOpen] = useState(false);\n  const defaultParams = reportDefaultParams('host_anomalies_scatter');\n  const { setFromToolbar } = useQueryParams(defaultParams);\n\n  const kebabDropdownItems = [\n    <DropdownItem\n      key=\"showAll\"\n      component=\"button\"\n      onClick={() => setFromToolbar('anomaly', undefined)}\n    >\n      Display all host rows\n    </DropdownItem>,\n    <DropdownItem\n      key=\"showAnomalousHosts\"\n      component=\"button\"\n      onClick={() => setFromToolbar('anomaly', true)}\n    >\n      Display only slow host rows\n    </DropdownItem>,\n    <DropdownItem\n      key=\"showNonAnomalousHosts\"\n      component=\"button\"\n      onClick={() => setFromToolbar('anomaly', false)}\n    >\n      Display only non-slow host rows\n    </DropdownItem>,\n  ];\n\n  const skipHeader = (key: string): boolean => {\n    switch (true) {\n      case key == 'total_elapsed_per_org' &&\n        typeof legend[0].total_elapsed_per_org == 'undefined':\n      case key == 'total_job_count_per_org' &&\n        typeof legend[0].total_job_count_per_org == 'undefined':\n      case key == 'total_host_count_per_org' &&\n        typeof legend[0].total_host_count_per_org == 'undefined':\n      case key == 'total_task_count_per_org' &&\n        typeof legend[0].total_task_count_per_org == 'undefined':\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  return (\n    <TableComposable aria-label=\"Report Table\" variant={TableVariant.compact}>\n      <Thead>\n        <Tr>\n          {expandedRowName && <Th />}\n          {headers.map(({ key, value }) =>\n            showKebab && key === 'anomaly' ? (\n              <Th\n                key={key}\n                style={{\n                  overflow: 'visible',\n                  zIndex: 1,\n                }}\n              >\n                Slow\n                <Dropdown\n                  onSelect={() => {\n                    setIsKebabOpen(true);\n                  }}\n                  toggle={\n                    <KebabToggle\n                      style={{ paddingBottom: '0px' }}\n                      id=\"table-kebab\"\n                      onToggle={() => setIsKebabOpen(!isKebabOpen)}\n                    />\n                  }\n                  isOpen={isKebabOpen}\n                  isPlain\n                  dropdownItems={kebabDropdownItems}\n                  position={'right'}\n                />\n              </Th>\n            ) : skipHeader(key) ? null : (\n              <Th key={key} {...getSortParams(key)} data-cy={key}>\n                {value}\n              </Th>\n            )\n          )}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {legend.map((entry) => (\n          <TableRow\n            key={entry.id}\n            legendEntry={entry}\n            headers={headers}\n            expandedRowName={expandedRowName}\n            clickableLinking={clickableLinking}\n          />\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\nexport default ReportTable;\n","export const actions = {\n  RESET_DATA: 'RESET_DATA',\n  SET_DOWNLOAD_TYPE: 'SET_DOWNLOAD_TYPE',\n  SET_SHOW_EXTRA_ROWS: 'SET_SHOW_EXTRA_ROWS',\n  SET_SELECTED_RBAC_GROUPS: 'SET_SELECTED_RBAC_GROUPS',\n  SET_USERS: 'SET_USERS',\n  SET_ADDITIONAL_RECIPIENTS: 'SET_ADDITIONAL_RECIPIENTS',\n  SET_EULA: 'SET_EULA',\n  SET_EMAIL_EXTRA_ROWS: 'SET_EMAIL_EXTRA_ROWS',\n  SET_SUBJECT: 'SET_SUBJECT',\n  SET_BODY: 'SET_BODY',\n  SET_SELECTED_EXPIRY: 'SET_SELECTED_EXPIRY',\n};\n","export enum ValidFeatureFlags {\n  moduleReports = 'moduleReports',\n  newAutomationCalculator = 'newAutomationCalculator',\n  onboardingReports = 'aa21Onboarding',\n  sendEmail = 'sendEmail',\n}\n\nexport interface FeatureFlagType {\n  name: ValidFeatureFlags;\n  enabled: boolean;\n}\n","import { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\n\nconst isBeta = () => window.location.pathname.split('/')[1] === 'beta';\n\n// Devel environment checks\nconst isLocalhost = () => window.location.hostname === 'localhost';\nconst isEphemeral = () => window.location.hostname.includes('ephemeral');\n\nconst useFeatureFlag = (flag: string): boolean => {\n  // On beta use the beta flag which has the 'beta_flagname' format.\n  const betaFlag = `beta_${flag}`;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n  const { flagsReady } = useFlagsStatus();\n\n  const flagToCheck = isBeta() ? betaFlag : flag;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n  const isFlagEnabled = useFlag(flagToCheck);\n\n  if (isLocalhost() || isEphemeral()) return true;\n\n  return flagsReady ? isFlagEnabled : false;\n};\n\nexport default useFeatureFlag;\n","import React from 'react';\nimport { actions } from '../../constants';\nimport { Grid, GridItem, Radio, Title } from '@patternfly/react-core';\nimport { EmailDetailsProps, TypeValue } from '../../../types';\nimport { useFeatureFlag, ValidFeatureFlags } from '../../../../../FeatureFlags';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst ExportOptions = ({\n  formData,\n  dispatchReducer,\n}: {\n  formData: EmailDetailsProps;\n  dispatchReducer: React.Dispatch<TypeValue>;\n}) => {\n  const { downloadType } = formData;\n\n  return (\n    <>\n      <Title size=\"md\" headingLevel=\"h4\">\n        {'Select export format:'}\n      </Title>\n      <Grid sm={2}>\n        <GridItem>\n          <Radio\n            onChange={() =>\n              dispatchReducer({\n                type: actions.SET_DOWNLOAD_TYPE,\n                value: 'pdf',\n              })\n            }\n            isChecked={downloadType === 'pdf'}\n            name=\"optionSelected\"\n            label=\"PDF\"\n            id=\"pdf-radio\"\n            aria-label=\"pdf-radio\"\n          />\n        </GridItem>\n        {useFeatureFlag(ValidFeatureFlags.sendEmail) && (\n          <GridItem>\n            <Radio\n              onChange={() =>\n                dispatchReducer({\n                  type: actions.SET_DOWNLOAD_TYPE,\n                  value: 'email',\n                })\n              }\n              isChecked={downloadType === 'email'}\n              name=\"optionSelected\"\n              label=\"E-mail\"\n              id=\"email-radio\"\n              aria-label=\"email-radio\"\n            />\n          </GridItem>\n        )}\n      </Grid>\n    </>\n  );\n};\n\nexport default ExportOptions;\n","import React from 'react';\nimport { actions } from '../../constants';\nimport { Grid, GridItem, Radio, Title } from '@patternfly/react-core';\nimport { EmailDetailsProps, PdfDetailsProps, TypeValue } from '../../../types';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst PdfDetails = ({\n  options,\n  formData,\n  dispatchReducer,\n}: {\n  options: PdfDetailsProps;\n  formData: EmailDetailsProps;\n  dispatchReducer: React.Dispatch<TypeValue>;\n}) => {\n  const { showExtraRows } = formData;\n  const { totalPages, pageLimit } = options;\n\n  const extraRowsLabel =\n    totalPages <= Math.ceil(100 / pageLimit)\n      ? `All ${totalPages.toString()} pages`\n      : `Top ${Math.ceil(100 / pageLimit)} of ${totalPages.toString()} pages`;\n\n  return (\n    <>\n      <Title size=\"md\" headingLevel=\"h4\">\n        {'Select details:'}\n      </Title>\n      <Grid md={4}>\n        <GridItem>\n          <Radio\n            onChange={() =>\n              dispatchReducer({\n                type: actions.SET_SHOW_EXTRA_ROWS,\n                value: false,\n              })\n            }\n            isChecked={!showExtraRows}\n            name=\"showExtraRows\"\n            label=\"Current page\"\n            id=\"current-radio\"\n            aria-label=\"current-radio\"\n          />\n        </GridItem>\n        <GridItem>\n          <Radio\n            onChange={() =>\n              dispatchReducer({\n                type: actions.SET_SHOW_EXTRA_ROWS,\n                value: true,\n              })\n            }\n            isChecked={showExtraRows}\n            name=\"showExtraRows\"\n            label={extraRowsLabel}\n            id=\"extra-radio\"\n            aria-label=\"extra-radio\"\n          />\n        </GridItem>\n      </Grid>\n    </>\n  );\n};\n\nexport default PdfDetails;\n","import React, { useEffect, useState } from 'react';\nimport { actions } from '../../constants';\nimport {\n  Form,\n  FormGroup,\n  FormHelperText,\n  Grid,\n  GridItem,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  TextArea,\n  TextInput,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nimport {\n  EmailDetailsProps,\n  RbacGroupFromApi,\n  RbacPrincipalFromApi,\n  TypeValue,\n  User,\n} from '../../../types';\nimport useRequest from '../../../../../Utilities/useRequest';\nimport { readRbacGroups, readRbacPrincipals } from '../../../../../Api';\nimport ToolbarInput from '../../../Groups/ToolbarInput';\nimport { today } from '../../../../../Utilities/helpers';\n\ninterface RbacGroupsDataType {\n  data: RbacGroupFromApi[];\n  meta: {\n    count: number;\n  };\n}\ninterface RbacPrincipalsDataType {\n  data: RbacPrincipalFromApi[];\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst EmailDetails = ({\n  options,\n  formData,\n  dispatchReducer,\n}: {\n  options: Record<string, number>;\n  formData: EmailDetailsProps;\n  dispatchReducer: React.Dispatch<TypeValue>;\n}) => {\n  const {\n    body,\n    selectedRbacGroups,\n    users,\n    subject,\n    additionalRecipients,\n    emailExtraRows,\n    expiry,\n  }: EmailDetailsProps = formData;\n  const {\n    result: { data: rbacGroupsFromApi },\n    request: fetchRbacGroups,\n  } = useRequest<RbacGroupsDataType>(\n    () => readRbacGroups() as unknown as Promise<RbacGroupsDataType>,\n    {\n      data: [],\n      meta: { count: 0 },\n    }\n  );\n  const reportUrl = window.location.href;\n  useEffect(() => {\n    fetchRbacGroups();\n  }, []);\n\n  const {\n    result: { data: principalsFromApi },\n    request: fetchRbacPrincipals,\n  } = useRequest<RbacPrincipalsDataType>(\n    () =>\n      readRbacPrincipals(\n        selectedRbacGroups.at(-1) as string\n      ) as unknown as Promise<RbacPrincipalsDataType>,\n    { data: [] }\n  );\n\n  useEffect(() => {\n    if (selectedRbacGroups.length > 0) fetchRbacPrincipals();\n  }, [selectedRbacGroups]);\n\n  const getGroupName = (key: string) => {\n    return rbacGroupsFromApi.find(\n      (group: RbacGroupFromApi) => group.uuid === key\n    )?.name;\n  };\n\n  const updateEmailInfo = () => {\n    const usersEmailsList = principalsFromApi.map((user) => user.email);\n    const usersNamesList = principalsFromApi.map((user) => user.username);\n    const lastSelectedRbacGroup = selectedRbacGroups.at(-1) as string;\n    const userHash = {\n      uuid: lastSelectedRbacGroup,\n      name: getGroupName(lastSelectedRbacGroup) as string,\n      usernames: usersNamesList,\n      emails: usersEmailsList,\n    };\n    const index = users.findIndex(\n      (object: { uuid: string }) => object.uuid === userHash.uuid\n    );\n    if (index === -1) {\n      users.push(userHash as User);\n    }\n\n    dispatchReducer({\n      type: actions.SET_USERS,\n      value: users,\n    });\n  };\n\n  useEffect(() => {\n    if (selectedRbacGroups.length > 0) updateEmailInfo();\n  }, [principalsFromApi]);\n\n  const { totalPages, pageLimit } = options;\n  const showExpiryDate = additionalRecipients.length > 0;\n  const extraRowsLabel =\n    totalPages <= Math.ceil(100 / pageLimit)\n      ? `All ${totalPages} pages`\n      : `Top ${Math.ceil(100 / pageLimit)} of ${totalPages} pages`;\n\n  const [showError, setShowError] = useState(false);\n\n  const checkEmailInput = (event: React.FocusEvent<HTMLInputElement>) => {\n    const emailList = event.target.value.split(',');\n    for (let i = 0; i < emailList.length; i++) {\n      const regEx = /^([\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/;\n      if (!regEx.test(emailList[i])) {\n        setShowError(true);\n        return;\n      }\n    }\n    setShowError(false);\n    return;\n  };\n\n  const clearGroupSelection = () => {\n    dispatchReducer({\n      type: actions.SET_SELECTED_RBAC_GROUPS,\n      value: [],\n    });\n    dispatchReducer({\n      type: actions.SET_USERS,\n      value: [],\n    });\n  };\n\n  const onSelectionChange = (field: string, groupToChange: string) => {\n    let revisedGroups = [groupToChange];\n    let revisedSelectedRbacGroups: string[];\n    // if checkbox unchecked, remove group from array & user info from users array\n    if (selectedRbacGroups.indexOf(groupToChange) > -1) {\n      revisedGroups = selectedRbacGroups.filter(\n        (group) => group !== groupToChange\n      );\n      const usersOfChangedGroup = users.findIndex(\n        ({ uuid }: { uuid: string }) => uuid === groupToChange\n      );\n      // if selected group has users\n      if (usersOfChangedGroup >= 0) users.splice(usersOfChangedGroup, 1);\n      revisedSelectedRbacGroups = revisedGroups;\n    } else {\n      // add if checkbox checked\n      revisedSelectedRbacGroups = selectedRbacGroups.concat(revisedGroups);\n    }\n    dispatchReducer({\n      type: actions.SET_SELECTED_RBAC_GROUPS,\n      value: revisedSelectedRbacGroups,\n    });\n  };\n\n  const onExpiryChange = (value: string) => {\n    dispatchReducer({\n      type: actions.SET_SELECTED_EXPIRY,\n      value: value,\n    });\n    updateEmailInfo();\n  };\n\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <Form>\n      {totalPages > 1 && (\n        <FormGroup label=\"Select details:\" fieldId=\"details-field\">\n          <Grid md={4}>\n            <GridItem>\n              <Radio\n                onChange={() =>\n                  dispatchReducer({\n                    type: actions.SET_EMAIL_EXTRA_ROWS,\n                    value: false,\n                  })\n                }\n                isChecked={!emailExtraRows}\n                name=\"emailExtraRows\"\n                label=\"Current page\"\n                id=\"email-current-radio\"\n                aria-label=\"email-current-radio\"\n              />\n            </GridItem>\n            <GridItem>\n              <Radio\n                onChange={() =>\n                  dispatchReducer({\n                    type: actions.SET_EMAIL_EXTRA_ROWS,\n                    value: true,\n                  })\n                }\n                isChecked={emailExtraRows}\n                name=\"emailExtraRows\"\n                label={extraRowsLabel}\n                id=\"email-extra-radio\"\n                aria-label=\"email-extra-radio\"\n              />\n            </GridItem>\n          </Grid>\n        </FormGroup>\n      )}\n      <FormGroup\n        label=\"Recipient(s)\"\n        isRequired\n        fieldId=\"selectedRbacGroups-field\"\n      >\n        <Select\n          variant={SelectVariant.checkbox}\n          aria-label={'Recipient'}\n          isOpen={isExpanded}\n          onClear={() => clearGroupSelection()}\n          onToggle={() => setIsExpanded(!isExpanded)}\n          onSelect={(e, selection) => {\n            onSelectionChange(\n              'selectedRbacGroups',\n              typeof selection !== 'string' ? selection.toString() : selection\n            );\n            setIsExpanded(false);\n          }}\n          hasInlineFilter\n          selections={selectedRbacGroups}\n          placeholderText={'Select Recipients'}\n        >\n          {rbacGroupsFromApi.map(({ uuid, name }, i) => (\n            <SelectOption key={i} value={uuid}>\n              {name}\n            </SelectOption>\n          ))}\n        </Select>\n      </FormGroup>\n\n      {users.length > 0 && (\n        <FormGroup label=\"User emails\" fieldId=\"emails-field\">\n          {users.map(({ name, emails }, i) => {\n            return (\n              <p key={i}>\n                <b>{name}</b>:{' '}\n                {emails.length > 0 ? (\n                  emails.join(', ')\n                ) : (\n                  <i>No emails associated with this group</i>\n                )}\n              </p>\n            );\n          })}\n        </FormGroup>\n      )}\n      <FormGroup\n        label=\"External recipient(s)\"\n        fieldId=\"additionalRecipients-field\"\n      >\n        <TextInput\n          placeholder=\"Comma separated emails\"\n          type=\"email\"\n          id=\"additionalRecipients\"\n          name=\"additionalRecipients\"\n          value={additionalRecipients}\n          onBlur={(e) => checkEmailInput(e)}\n          onFocus={(e) => checkEmailInput(e)}\n          onChange={(newValue) =>\n            dispatchReducer({\n              type: actions.SET_ADDITIONAL_RECIPIENTS,\n              value: newValue,\n            })\n          }\n        />\n        {additionalRecipients && showError && (\n          <FormHelperText\n            isError\n            icon={<ExclamationCircleIcon />}\n            isHidden={!showError}\n          >\n            The email format must be valid and comma separated.\n          </FormHelperText>\n        )}\n      </FormGroup>\n      {/*<FormGroup label=\"EULA Acknowledgement\" fieldId=\"eula-field\">*/}\n      {/*  <Checkbox*/}\n      {/*    isChecked={eula}*/}\n      {/*    aria-label=\"card checkbox\"*/}\n      {/*    id=\"eula\"*/}\n      {/*    name=\"eula\"*/}\n      {/*    onChange={(newValue) =>*/}\n      {/*      dispatchReducer({*/}\n      {/*        type: actions.SET_EULA,*/}\n      {/*        value: newValue,*/}\n      {/*      })*/}\n      {/*    }*/}\n      {/*  />*/}\n      {/*  {additionalRecipients && !eula && (*/}\n      {/*    <FormHelperText*/}\n      {/*      isError*/}\n      {/*      icon={<ExclamationCircleIcon />}*/}\n      {/*      isHidden={additionalRecipients === '' && !eula}*/}\n      {/*    >*/}\n      {/*      Please confirm the EULA acknowledgement if external e-mails are*/}\n      {/*      being used.*/}\n      {/*    </FormHelperText>*/}\n      {/*  )}*/}\n      {/*</FormGroup>*/}\n      <FormGroup label=\"Subject\" fieldId=\"subject-field\">\n        <TextInput\n          placeholder=\"Report is ready to be downloaded\"\n          type=\"text\"\n          id=\"subject\"\n          name=\"subject\"\n          value={subject}\n          onChange={(newValue) =>\n            dispatchReducer({\n              type: actions.SET_SUBJECT,\n              value: newValue,\n            })\n          }\n        />\n      </FormGroup>\n      <FormGroup label=\"Body\" fieldId=\"body-field\">\n        <TextArea\n          rows={10}\n          autoResize\n          placeholder=\"\"\n          type=\"text\"\n          id=\"body\"\n          name=\"body\"\n          value={body}\n          onChange={(newValue) =>\n            dispatchReducer({\n              type: actions.SET_BODY,\n              value: newValue,\n            })\n          }\n        />\n      </FormGroup>\n      {showExpiryDate && (\n        <>\n          <FormGroup label=\"Link expires on\" fieldId=\"expiry-field\">\n            <ToolbarInput\n              categoryKey=\"start_date\"\n              value={expiry}\n              setValue={(e) => onExpiryChange(e as string)}\n              validators={[\n                (date: Date) => {\n                  if (date < today()) return 'Must not be before today';\n                  return '';\n                },\n              ]}\n            />\n          </FormGroup>\n          <FormHelperText\n            isError\n            icon={<ExclamationCircleIcon />}\n            isHidden={!showExpiryDate}\n          >\n            Link expiry date only applies to external users\n          </FormHelperText>\n        </>\n      )}\n      <FormGroup label=\"Report link\" fieldId=\"link-field\">\n        {reportUrl}\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default EmailDetails;\n","import { downloadPdf as downloadPdfAction } from '../../../../../store/pdfDownloadButton';\nimport { Endpoint, OptionsReturnType, Params } from '../../../../../Api';\nimport { DispatchType } from '../../../../../store';\n\ninterface Props {\n  slug: string;\n  isMoney: boolean;\n  endpointUrl: Endpoint;\n  queryParams: Params;\n  selectOptions: OptionsReturnType;\n  y: string;\n  label: string;\n  xTickFormat: string;\n  chartType: string;\n  totalPages: number;\n  pageLimit: number;\n  sortOptions: string;\n  sortOrder: 'asc' | 'desc';\n  dateGranularity: string;\n  startDate: string;\n  endDate: string;\n  dateRange: string;\n  adoptionRateType: string;\n  dispatch: DispatchType;\n  chartSeriesHiddenProps: boolean[];\n  showExtraRows: boolean;\n  inputs?: { automationCost: number; manualCost: number };\n}\n\nconst PdfDownload: ({\n  slug,\n  isMoney,\n  endpointUrl,\n  queryParams,\n  selectOptions,\n  y,\n  label,\n  xTickFormat,\n  chartType,\n  totalPages,\n  pageLimit,\n  sortOptions,\n  sortOrder,\n  dateGranularity,\n  startDate,\n  endDate,\n  dateRange,\n  adoptionRateType,\n  dispatch,\n  chartSeriesHiddenProps,\n  showExtraRows,\n  inputs,\n}: Props) => void = ({\n  slug,\n  isMoney,\n  endpointUrl,\n  queryParams,\n  selectOptions,\n  y,\n  label,\n  xTickFormat,\n  chartType,\n  totalPages,\n  pageLimit,\n  sortOptions,\n  sortOrder,\n  dateGranularity,\n  startDate,\n  endDate,\n  dateRange,\n  adoptionRateType,\n  dispatch,\n  chartSeriesHiddenProps,\n  showExtraRows,\n  inputs,\n}) => {\n  const allParams = inputs ? { ...queryParams, inputs } : queryParams;\n  const token = '';\n  // set chartSeriesHiddenProps to a default value\n  if (!chartSeriesHiddenProps) {\n    chartSeriesHiddenProps = [];\n  }\n  // Dispatch the start of downloading the pdf\n  dispatch(\n    downloadPdfAction(\n      {\n        slug,\n        schemaParams: {\n          y,\n          label,\n          xTickFormat,\n          chartType,\n        },\n        dataFetchingParams: {\n          isMoney,\n          showExtraRows: showExtraRows,\n          endpointUrl,\n          queryParams: allParams,\n          selectOptions,\n          chartSeriesHiddenProps,\n          totalPages,\n          pageLimit,\n          sortOptions,\n          sortOrder,\n          dateGranularity,\n          startDate,\n          endDate,\n          dateRange,\n          adoptionRateType,\n        },\n      },\n      dispatch,\n      slug,\n      token\n    )\n  );\n};\nexport default PdfDownload;\n","import { useReducer } from 'react';\nimport { actions } from './constants';\nimport { formatDate } from '../../../Utilities/helpers';\nimport { EmailDetailsProps, TypeValue } from '../types';\n\nconst generateExpiryDate = () => {\n  const d = new Date();\n  d.setMonth(d.getMonth() + 3);\n  return formatDate(d);\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst useOptionsData = (\n  initial: EmailDetailsProps,\n  name: string,\n  description: string\n) => {\n  const initialData = {\n    downloadType: initial?.downloadType || 'pdf',\n    showExtraRows: initial?.showExtraRows || false,\n    additionalRecipients: initial?.additionalRecipients || '',\n    eula: initial?.eula || false,\n    emailExtraRows: initial?.emailExtraRows || false,\n    subject:\n      initial?.subject || `The Ansible report, ${name}, is available for view`,\n    body:\n      initial?.body ||\n      `<b>${name}</b>\\nThis report shows ${description[0].toLowerCase()}${description.substring(\n        1\n      )}`,\n    selectedRbacGroups: initial?.selectedRbacGroups || [],\n    users: initial?.users || [],\n    expiry: initial?.expiry || generateExpiryDate(),\n  };\n\n  const formReducer = (\n    state: EmailDetailsProps,\n    action: TypeValue\n  ): EmailDetailsProps => {\n    switch (action.type) {\n      /* v1 api reducers */\n      case actions.SET_DOWNLOAD_TYPE:\n        return {\n          ...state,\n          downloadType: action.value,\n        } as EmailDetailsProps;\n      case actions.SET_SHOW_EXTRA_ROWS:\n        return {\n          ...state,\n          showExtraRows: action.value,\n        } as EmailDetailsProps;\n      case actions.SET_SELECTED_RBAC_GROUPS:\n        return {\n          ...state,\n          selectedRbacGroups: action.value,\n        } as unknown as EmailDetailsProps;\n      case actions.SET_ADDITIONAL_RECIPIENTS:\n        return {\n          ...state,\n          additionalRecipients: action.value,\n        } as EmailDetailsProps;\n      case actions.SET_EULA:\n        return {\n          ...state,\n          eula: action.value,\n        } as EmailDetailsProps;\n      case actions.SET_EMAIL_EXTRA_ROWS:\n        return {\n          ...state,\n          emailExtraRows: action.value,\n        } as EmailDetailsProps;\n      case actions.SET_SUBJECT:\n        return {\n          ...state,\n          subject: action.value,\n        } as EmailDetailsProps;\n      case actions.SET_BODY:\n        return {\n          ...state,\n          body: action.value,\n        } as EmailDetailsProps;\n      case actions.SET_USERS:\n        return {\n          ...state,\n          users: action.value,\n        } as unknown as EmailDetailsProps;\n      case actions.SET_SELECTED_EXPIRY:\n        return {\n          ...state,\n          expiry: action.value,\n        } as EmailDetailsProps;\n      case actions.RESET_DATA:\n        return initialData;\n      default:\n        throw new Error(\n          `useOptionsData reducer action type ${action.type} was not found.`\n        );\n    }\n  };\n\n  const [formData, dispatchReducer] = useReducer(formReducer, initialData);\n  return {\n    formData,\n    dispatchReducer,\n  };\n};\n\nexport default useOptionsData;\n","import { email as emailAction } from '../../../../../store/pdfDownloadButton';\nimport { DispatchType } from '../../../../../store';\nimport { User } from '../../../types';\nimport { PDFEmailParams } from '../../../../../Api';\n\ninterface Props {\n  slug: string;\n  users: User[];\n  additionalRecipients: string;\n  subject: string;\n  body: string;\n  dispatch: DispatchType;\n  emailExtraRows: boolean;\n  expiry: string;\n  pdfPostBody: PDFEmailParams;\n}\n\nconst generateToken = () => Math.random().toString(36).substring(2, 16);\n\nconst parseUrl = (\n  emailExtraRows: boolean,\n  reportUrl: string,\n  token: string,\n  expiry: string,\n  slug: string\n) => {\n  const params = `slug=${slug}&token=${token}`;\n  const host = location.protocol + '//' + location.host;\n  const url =\n    new URL(reportUrl).search === ''\n      ? '?' + params\n      : location.search + '&' + params;\n  return host + '/api/tower-analytics/v1/generate_pdf/' + url;\n};\n\nconst SendEmail: ({\n  slug,\n  users,\n  additionalRecipients,\n  subject,\n  body,\n  dispatch,\n  emailExtraRows,\n  expiry,\n  pdfPostBody,\n}: Props) => void = ({\n  slug,\n  users,\n  additionalRecipients,\n  subject,\n  body,\n  dispatch,\n  emailExtraRows,\n  expiry,\n  pdfPostBody,\n}) => {\n  const all_recipients = users.map(({ usernames }) => usernames);\n  pdfPostBody.dataFetchingParams.showExtraRows = emailExtraRows;\n\n  if (additionalRecipients !== '')\n    all_recipients.push(additionalRecipients.split(','));\n  const token = generateToken();\n  const reportUrl = window.location.href;\n  // Dispatch the email,\n  dispatch(\n    emailAction(\n      {\n        recipient: all_recipients.flat(),\n        subject: subject === '' ? 'Report is ready to be viewed' : subject,\n        body: body.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '<br>'),\n        reportUrl: parseUrl(emailExtraRows, reportUrl, token, expiry, slug),\n        expiry: expiry,\n        slug: slug,\n        token: token,\n        payload: 'Download',\n        pdfPostBody: pdfPostBody,\n      },\n      dispatch,\n      slug,\n      token\n    )\n  );\n};\n\nexport default SendEmail;\n","import React, { FC, useState } from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  Spinner,\n  Tooltip,\n  TooltipPosition,\n  Wizard,\n  WizardContextConsumer,\n  WizardFooter,\n} from '@patternfly/react-core';\nimport { DownloadIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { DownloadState } from '../../../store/pdfDownloadButton/types';\nimport {\n  Endpoint,\n  OptionsReturnType,\n  Params,\n  PDFEmailParams,\n} from '../../../Api';\nimport { useAppDispatch, useAppSelector } from '../../../store';\nimport { useReadQueryParams } from '../../../QueryParams';\nimport ExportOptions from '../DownloadButton/Steps/ExportOptions';\nimport PdfDetails from '../DownloadButton/Steps/PdfDetails';\nimport EmailDetails from '../DownloadButton/Steps/EmailDetails';\nimport PdfDownload from '../DownloadButton/Steps/PdfDetails/PdfDownload';\nimport useOptionsData from '../DownloadButton/useOptionsData';\nimport SendEmail from '../DownloadButton/Steps/EmailDetails/SendEmail';\nimport { actions } from '../DownloadButton/constants';\nimport { EmailDetailsProps } from '../types';\nimport { getDateFormatByGranularity } from '../../../Utilities/helpers';\n\ninterface Props {\n  settingsNamespace: string;\n  slug: string;\n  isMoney: boolean;\n  name: string;\n  description: string;\n  endpointUrl: Endpoint;\n  queryParams: Params;\n  selectOptions: OptionsReturnType;\n  y: string;\n  label: string;\n  xTickFormat: string;\n  chartType: string;\n  totalPages: number;\n  pageLimit: number;\n  sortOptions: string;\n  sortOrder: 'asc' | 'desc';\n  dateGranularity: string;\n  startDate: string;\n  endDate: string;\n  dateRange: string;\n  adoptionRateType: string;\n  inputs?: { automationCost: number; manualCost: number };\n}\n\nconst DownloadButton: FC<Props> = ({\n  settingsNamespace = 'settings',\n  slug,\n  isMoney,\n  name,\n  description,\n  endpointUrl,\n  queryParams,\n  selectOptions,\n  y,\n  label,\n  xTickFormat,\n  chartType,\n  totalPages,\n  pageLimit,\n  sortOptions,\n  sortOrder,\n  dateGranularity,\n  startDate,\n  endDate,\n  dateRange,\n  adoptionRateType,\n  inputs,\n}) => {\n  const [isExportModalOpen, setIsExportModalOpen] = useState(false);\n  const dispatch = useAppDispatch();\n  const status = useAppSelector((state) => state?.pdfDownloadButton[slug]);\n  const isLoading = status === DownloadState.pending;\n  const isError = status === DownloadState.rejected;\n  const { chartSeriesHiddenProps } = useReadQueryParams(\n    {\n      chartSeriesHiddenProps: [],\n    },\n    settingsNamespace\n  );\n  const [stepIdSelected, setStepIdSelected] = useState(1);\n  const { formData, dispatchReducer } = useOptionsData(\n    {} as EmailDetailsProps,\n    name,\n    description\n  );\n\n  const {\n    users,\n    additionalRecipients,\n    subject,\n    body,\n    emailExtraRows,\n    showExtraRows,\n    downloadType,\n    expiry,\n  } = formData;\n\n  const onSave = () => {\n    if (downloadType === 'pdf')\n      PdfDownload({\n        slug,\n        isMoney,\n        endpointUrl,\n        queryParams,\n        selectOptions,\n        y,\n        label,\n        xTickFormat,\n        chartType,\n        totalPages,\n        pageLimit,\n        sortOptions,\n        sortOrder,\n        dateGranularity,\n        startDate,\n        endDate,\n        dateRange,\n        adoptionRateType,\n        dispatch,\n        chartSeriesHiddenProps,\n        showExtraRows,\n        inputs,\n      });\n    if (downloadType === 'email') {\n      const chartParams = {\n        y: queryParams.sort_options as string,\n        label: queryParams.sort_options,\n        xTickFormat: getDateFormatByGranularity(\n          queryParams.granularity as string\n        ),\n        chartType: chartType,\n      };\n      const allParams = inputs ? { ...queryParams, inputs } : queryParams;\n      const pdfPostBody: PDFEmailParams = {\n        slug,\n        schemaParams: {\n          y: chartParams.y,\n          label: chartParams.label as string,\n          xTickFormat: chartParams.xTickFormat,\n          chartType: chartParams.chartType,\n        },\n        dataFetchingParams: {\n          expiry: expiry,\n          showExtraRows: showExtraRows,\n          endpointUrl: endpointUrl,\n          queryParams: allParams,\n          chartSeriesHiddenProps: chartSeriesHiddenProps || [],\n          totalPages: totalPages,\n          isMoney: isMoney,\n          pageLimit: pageLimit,\n          sortOptions: queryParams.sort_options as string,\n          sortOrder: queryParams.sort_order === 'desc' ? 'desc' : 'asc',\n          dateGranularity: queryParams.granularity as string,\n          startDate: queryParams.start_date as string,\n          endDate: queryParams.end_date as string,\n          dateRange: queryParams.quick_date_range as string,\n          adoptionRateType: queryParams.adoption_rate_type as string,\n        },\n      };\n      SendEmail({\n        slug,\n        users,\n        additionalRecipients,\n        subject,\n        body,\n        dispatch,\n        emailExtraRows,\n        expiry,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        pdfPostBody,\n      });\n    }\n    dispatchReducer({ type: actions.RESET_DATA });\n    setIsExportModalOpen(false);\n  };\n\n  const sendEmailButtonDisabled = () => {\n    const {\n      additionalRecipients,\n      selectedRbacGroups,\n      users,\n    }: EmailDetailsProps = formData;\n    if (additionalRecipients !== '') {\n      const list = additionalRecipients.split(',');\n      for (let i = 0; i < list.length; i++) {\n        const regEx = /^([\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/;\n        if (!regEx.test(list[i])) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // no group selected and no additional email and eula not checked\n    if (selectedRbacGroups.length === 0 && additionalRecipients === '')\n      return true;\n\n    // (group not selected or group selected but has no users) or additional recipients provide but eula not checked\n    if (\n      (users.length === 0 ||\n        (users.length === 1 && users[0].emails.length <= 0)) &&\n      additionalRecipients === ''\n    )\n      return true;\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Export format',\n      component: (\n        <ExportOptions formData={formData} dispatchReducer={dispatchReducer} />\n      ),\n    },\n    {\n      id: 2,\n      name: 'Configure details',\n      nextButtonText: downloadType === 'pdf' ? 'Export' : 'Send e-mail',\n      component:\n        downloadType === 'pdf' ? (\n          <PdfDetails\n            options={{\n              settingsNamespace: 'settings',\n              slug,\n              isMoney,\n              name,\n              description,\n              endpointUrl,\n              queryParams,\n              selectOptions,\n              y,\n              label,\n              xTickFormat,\n              chartType,\n              totalPages,\n              pageLimit,\n              sortOptions,\n              sortOrder,\n              dateGranularity,\n              startDate,\n              endDate,\n              dateRange,\n              adoptionRateType,\n            }}\n            formData={formData}\n            dispatchReducer={dispatchReducer}\n          />\n        ) : (\n          <EmailDetails\n            options={{ totalPages, pageLimit }}\n            formData={formData}\n            dispatchReducer={dispatchReducer}\n          />\n        ),\n    },\n  ];\n\n  const onStepChange = (step: { id: React.SetStateAction<number> }) => {\n    setStepIdSelected(stepIdSelected < step?.id ? step.id : stepIdSelected);\n  };\n\n  const onClose = () => {\n    dispatchReducer({ type: actions.RESET_DATA });\n    setIsExportModalOpen(false);\n  };\n\n  const CustomFooter = (\n    <WizardFooter>\n      <WizardContextConsumer>\n        {({ activeStep, onNext, onBack }) => {\n          if (activeStep.id !== 2) {\n            return (\n              <>\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  onClick={\n                    downloadType === 'pdf' && totalPages <= 1 ? onSave : onNext\n                  }\n                  isDisabled={!downloadType}\n                >\n                  {downloadType === 'pdf' && totalPages <= 1\n                    ? 'Export'\n                    : 'Next'}\n                </Button>\n                {activeStep.id !== 1 && (\n                  <Button variant=\"secondary\" onClick={onBack}>\n                    Back\n                  </Button>\n                )}\n                <Button variant=\"link\" onClick={onClose}>\n                  Cancel\n                </Button>\n              </>\n            );\n          }\n          // Final step buttons\n          return (\n            <>\n              <Button\n                variant={ButtonVariant.primary}\n                type=\"submit\"\n                onClick={onSave}\n                isDisabled={\n                  downloadType === 'email' ? sendEmailButtonDisabled() : false\n                }\n              >\n                {downloadType === 'email' ? 'Send e-mail' : 'Export'}\n              </Button>\n              <Button variant=\"secondary\" onClick={onBack}>\n                Back\n              </Button>\n              <Button variant=\"link\" onClick={onClose}>\n                Cancel\n              </Button>\n            </>\n          );\n        }}\n      </WizardContextConsumer>\n    </WizardFooter>\n  );\n\n  const title = 'Export report';\n\n  return (\n    <>\n      <Tooltip position={TooltipPosition.top} content=\"Export report\">\n        <Button\n          variant={isError ? ButtonVariant.link : ButtonVariant.plain}\n          aria-label=\"Export report\"\n          onClick={() => setIsExportModalOpen(true)}\n          isDanger={isError}\n          data-cy={'download-button'}\n        >\n          {isLoading && (\n            <Spinner data-cy={'download-button-loading'} isSVG size=\"md\" />\n          )}\n          {!isLoading && isError && (\n            <ExclamationCircleIcon data-cy={'download-button-error'} />\n          )}\n          {!isLoading && !isError && (\n            <DownloadIcon data-cy={'download-button-icon'} />\n          )}\n        </Button>\n      </Tooltip>\n      {isExportModalOpen && (\n        <Wizard\n          title={title}\n          description={`${name} | ${downloadType === 'pdf' ? 'PDF' : 'E-mail'}`}\n          steps={steps}\n          hideClose={true}\n          onNext={() => onStepChange}\n          onBack={() => onStepChange}\n          onSave={onSave}\n          onClose={() => {\n            onClose();\n          }}\n          footer={CustomFooter}\n          isOpen={isExportModalOpen}\n        />\n      )}\n    </>\n  );\n};\n\nexport default DownloadButton;\n","import { ChartSchemaElement } from '@ansible/react-json-chart-builder';\nimport { SchemaFnc } from './types';\n\n/**\n * I have strong hunch that you can use one function to hydrate\n * the schema and return a plain function with the hydrated schema\n * which can be used. This would optimize the code much more, since\n * we would not neet to run JSON stringify and parse + replace\n * mthods all the time. However the slowdown is pretty small,\n * so I left it as is for now.\n *\n * @param schema The stringified version of the schema.\n * @returns The hidrated schema with passed variables.\n */\nconst hydrateSchema =\n  (schema: ChartSchemaElement[]): SchemaFnc =>\n  (props) => {\n    if (!props) {\n      return schema;\n    }\n    let hydratedSchema = JSON.stringify(schema);\n    Object.entries(props).forEach((arr) => {\n      const regVar = new RegExp(`VAR_${arr[0]}`, 'g');\n      hydratedSchema = hydratedSchema.replace(regVar, `${arr[1]}`);\n    });\n    return JSON.parse(hydratedSchema) as ChartSchemaElement[];\n  };\n\nexport default hydrateSchema;\n","/* eslint-disable @typescript-eslint/restrict-plus-operands */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport React, { FunctionComponent, useEffect } from 'react';\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  PaginationVariant,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\n\nimport Pagination from '../../../../Components/Pagination';\n\nimport { DEFAULT_NAMESPACE, useQueryParams } from '../../../../QueryParams';\n\nimport useRequest from '../../../../Utilities/useRequest';\n\nimport ApiStatusWrapper from '../../../../Components/ApiStatus/ApiStatusWrapper';\nimport FilterableToolbar from '../../../../Components/Toolbar/Toolbar';\n\nimport Chart from '../../../../Components/Chart';\nimport PlotlyChart from '../../../../Components/Chart/PlotlyChart';\nimport Table from './Table';\nimport DownloadButton from '../../../../Components/Toolbar/DownloadButton';\nimport { endpointFunctionMap, OptionsReturnType } from '../../../../Api';\nimport { capitalize } from '../../../../Utilities/helpers';\nimport { perPageOptions } from '../../Shared/constants';\nimport hydrateSchema from '../../Shared/hydrateSchema';\nimport { StandardProps } from '../types';\nimport percentageFormatter from '../../../../Utilities/percentageFormatter';\nimport { getDateFormatByGranularity } from '../../../../Utilities/helpers';\nimport {\n  reportDefaultParams,\n  specificReportDefaultParams,\n} from '../../../../Utilities/constants';\nimport { createUrl } from '../../../../QueryParams';\nimport { useNavigate } from 'react-router-dom';\n\nconst ReportCard: FunctionComponent<StandardProps> = ({\n  slug,\n  name,\n  description,\n  tableHeaders,\n  expandedTableRowName,\n  clickableLinking,\n  showPagination,\n  showKebab,\n  defaultSelectedToolbarCategory = '',\n  availableChartTypes,\n  dataEndpoint,\n  optionsEndpoint,\n  schema,\n  fullCard = true,\n}) => {\n  const readData = endpointFunctionMap(dataEndpoint);\n  const readOptions = endpointFunctionMap(optionsEndpoint);\n  const defaultParams = reportDefaultParams(slug);\n  const { queryParams, setFromPagination, setFromToolbar } =\n    useQueryParams(defaultParams);\n  const { queryParams: settingsQueryParams, dispatch } = useQueryParams(\n    {\n      chartType: availableChartTypes[0],\n    },\n    'settings'\n  );\n\n  const { result: options, request: fetchOptions } =\n    useRequest<OptionsReturnType>(readOptions, {});\n\n  const { request: fetchData, ...dataApi } = useRequest(readData, {\n    meta: { count: 0, legend: [] },\n  });\n\n  const navigate = useNavigate();\n\n  const navigateToHostScatter = (\n    slug: string,\n    templateId: any,\n    clusterId: any,\n    orgId: any,\n    inventoryId: any,\n    status: any,\n    hostStatus: any,\n    quickDateRange: any\n  ) => {\n    const initialQueryParams = {\n      [DEFAULT_NAMESPACE]: {\n        ...specificReportDefaultParams(slug),\n        template_id: templateId,\n        cluster_id: clusterId,\n        org_id: orgId,\n        inventory_id: inventoryId,\n        status: status,\n        host_status: hostStatus,\n        quick_date_range: quickDateRange,\n      },\n    };\n    navigate(createUrl(`reports\\\\${slug}`, true, initialQueryParams));\n  };\n\n  useEffect(() => {\n    fetchData(queryParams);\n    fetchOptions(queryParams);\n  }, [queryParams]);\n\n  const chartParams = {\n    y: queryParams.sort_options as string,\n    label:\n      options.sort_options?.find(({ key }) => key === queryParams.sort_options)\n        ?.value || 'Label Y',\n    xTickFormat: getDateFormatByGranularity(queryParams.granularity),\n    chartType: settingsQueryParams.chartType || availableChartTypes[0],\n  };\n\n  const formattedValue = (key: string, value: number) => {\n    let val;\n    switch (key) {\n      case 'average_duration_per_task':\n        val = value.toFixed(2) + ' seconds';\n        break;\n      case 'slow_hosts_percentage':\n        val = percentageFormatter(value) + '%';\n        break;\n      case 'template_success_rate':\n        val = percentageFormatter(value) + '%';\n        break;\n      default:\n        val = value.toFixed(2);\n    }\n    return val;\n  };\n\n  const handleClick = (event, props) => {\n    navigateToHostScatter(\n      'host_anomalies_scatter',\n      props.datum.id,\n      queryParams.cluster_id,\n      queryParams.org_id,\n      queryParams.inventory_id,\n      queryParams.status,\n      queryParams.host_status,\n      queryParams.quick_date_range\n    );\n    window.location.reload();\n  };\n\n  const customTooltipFormatting = ({ datum }) => {\n    let tooltip;\n    if (datum.host_status) {\n      tooltip =\n        'Host: ' +\n        datum.host_name +\n        '\\nAverage duration per task: ' +\n        formattedValue(queryParams.sortOptions, datum.y) +\n        '\\nHost status: ' +\n        datum.host_status +\n        '\\nTotal tasks executed: ' +\n        datum.total_tasks_executed +\n        '\\nLast Referenced: ' +\n        datum.last_referenced +\n        '\\nSlow: ' +\n        (datum.failed_duration ? 'True' : 'False');\n    } else {\n      tooltip =\n        chartParams.label +\n        ' for ' +\n        datum.name +\n        ': ' +\n        formattedValue(queryParams.sort_options, datum.y);\n    }\n    return tooltip;\n  };\n\n  const getSortParams = (currKey: string) => {\n    const onSort = (\n      _event: unknown,\n      index: number,\n      direction: 'asc' | 'desc'\n    ) => {\n      setFromToolbar('sort_order', direction);\n      setFromToolbar('sort_options', tableHeaders[index]?.key);\n    };\n\n    const whitelistKeys = options?.sort_options?.map(\n      ({ key }: { key: string }) => key\n    );\n    if (!whitelistKeys?.includes(currKey)) return {};\n\n    return {\n      sort: {\n        sortBy: {\n          index:\n            tableHeaders.findIndex(\n              ({ key }) => key === queryParams.sort_options\n            ) || 0,\n          direction: queryParams.sort_order || 'none',\n        },\n        onSort,\n        columnIndex: tableHeaders.findIndex(({ key }) => key === currKey),\n      },\n    };\n  };\n\n  const additionalControls = [\n    availableChartTypes.length > 1 && (\n      <ToggleGroup aria-label=\"Chart type toggle\" key=\"chart-toggle\">\n        {availableChartTypes.map((chartType) => (\n          <ToggleGroupItem\n            key={chartType}\n            data-cy={'chart_type'}\n            text={`${capitalize(chartType)} Chart`}\n            buttonId={chartType}\n            isSelected={chartType === chartParams.chartType}\n            onChange={() => {\n              dispatch({ type: 'SET_CHART_TYPE', value: chartType });\n            }}\n          />\n        ))}\n      </ToggleGroup>\n    ),\n    <DownloadButton\n      key=\"download-button\"\n      slug={slug}\n      name={name}\n      description={description}\n      endpointUrl={dataEndpoint}\n      queryParams={queryParams}\n      selectOptions={options}\n      y={chartParams.y}\n      label={chartParams.label}\n      xTickFormat={chartParams.xTickFormat}\n      totalPages={Math.ceil(dataApi.result.meta.count / queryParams.limit)}\n      pageLimit={queryParams.limit}\n      chartType={chartParams.chartType}\n      sortOptions={chartParams.y}\n      sortOrder={queryParams.sort_order}\n      dateGranularity={queryParams.granularity}\n      startDate={queryParams.start_date}\n      endDate={queryParams.end_date}\n      dateRange={queryParams.quick_date_range}\n      adoptionRateType={queryParams.adoption_rate_type}\n    />,\n  ];\n\n  return fullCard ? (\n    <Card data-cy={dataApi.isLoading ? 'toolbar_loading' : 'toolbar_loaded'}>\n      <CardBody>\n        <FilterableToolbar\n          categories={options}\n          defaultSelected={defaultSelectedToolbarCategory}\n          filters={queryParams}\n          setFilters={setFromToolbar}\n          pagination={\n            showPagination && (\n              <Pagination\n                count={dataApi.result.meta.count}\n                perPageOptions={perPageOptions}\n                params={{\n                  limit: +queryParams.limit,\n                  offset: +queryParams.offset,\n                }}\n                setPagination={setFromPagination}\n                isCompact\n              />\n            )\n          }\n          additionalControls={additionalControls}\n        />\n        {tableHeaders && !showKebab && slug !== 'templates_by_organization' ? (\n          <ApiStatusWrapper api={dataApi}>\n            <Chart\n              schema={hydrateSchema(schema)({\n                label: chartParams.label,\n                y: chartParams.y,\n                xTickFormat: chartParams.xTickFormat,\n                chartType: chartParams.chartType,\n              })}\n              dataComponent={'foobar'}\n              data={dataApi.result}\n              specificFunctions={{\n                labelFormat: {\n                  customTooltipFormatting,\n                },\n                onClick: {\n                  handleClick,\n                },\n              }}\n            />\n            <Table\n              legend={\n                dataApi.result.meta.tableData\n                  ? dataApi.result.meta.tableData\n                  : dataApi.result.meta.legend\n              }\n              headers={tableHeaders}\n              getSortParams={getSortParams}\n              expandedRowName={expandedTableRowName}\n              clickableLinking={clickableLinking}\n              showKebab={showKebab}\n            />\n          </ApiStatusWrapper>\n        ) : tableHeaders &&\n          !showKebab &&\n          slug === 'templates_by_organization' ? (\n          <ApiStatusWrapper api={dataApi}>\n            <PlotlyChart data={dataApi.result.items} />\n            <Table\n              legend={\n                dataApi.result.meta.tableData\n                  ? dataApi.result.meta.tableData\n                  : dataApi.result.meta.legend\n              }\n              headers={tableHeaders}\n              getSortParams={getSortParams}\n              expandedRowName={expandedTableRowName}\n              clickableLinking={clickableLinking}\n              showKebab={showKebab}\n            />\n          </ApiStatusWrapper>\n        ) : (\n          <>\n            <ApiStatusWrapper api={dataApi}>\n              <Chart\n                schema={hydrateSchema(schema)({\n                  label: chartParams.label,\n                  y: chartParams.y,\n                  xTickFormat: chartParams.xTickFormat,\n                  chartType: chartParams.chartType,\n                })}\n                dataComponent={'foobar'}\n                data={dataApi.result}\n                specificFunctions={{\n                  labelFormat: {\n                    customTooltipFormatting,\n                  },\n                  onClick: {\n                    handleClick,\n                  },\n                }}\n              />\n            </ApiStatusWrapper>\n            <Table\n              legend={\n                dataApi.result.meta.tableData\n                  ? dataApi.result.meta.tableData\n                  : dataApi.result.meta.legend\n              }\n              headers={tableHeaders}\n              getSortParams={getSortParams}\n              expandedRowName={expandedTableRowName}\n              clickableLinking={clickableLinking}\n              showKebab={showKebab}\n            />\n          </>\n        )}\n      </CardBody>\n      <CardFooter>\n        {showPagination && (\n          <Pagination\n            count={dataApi.result.meta.count}\n            perPageOptions={perPageOptions}\n            params={{\n              limit: +queryParams.limit,\n              offset: +queryParams.offset,\n            }}\n            setPagination={setFromPagination}\n            variant={PaginationVariant.bottom}\n          />\n        )}\n      </CardFooter>\n    </Card>\n  ) : (\n    <div data-cy={dataApi.isLoading ? 'toolbar_loading' : 'toolbar_loaded'}>\n      <FilterableToolbar\n        categories={options}\n        defaultSelected={defaultSelectedToolbarCategory}\n        filters={queryParams}\n        setFilters={setFromToolbar}\n      />\n      {tableHeaders && slug === 'templates_by_organization' ? (\n        <ApiStatusWrapper api={dataApi}>\n          <PlotlyChart data={dataApi.result.items} />\n        </ApiStatusWrapper>\n      ) : (\n        <ApiStatusWrapper api={dataApi}>\n          <Chart\n            schema={hydrateSchema(schema)({\n              label: chartParams.label,\n              y: chartParams.y,\n              xTickFormat: chartParams.xTickFormat,\n              chartType: chartParams.chartType,\n            })}\n            data={dataApi.result}\n            specificFunctions={{\n              labelFormat: {\n                customTooltipFormatting,\n              },\n            }}\n          />\n        </ApiStatusWrapper>\n      )}\n    </div>\n  );\n};\n\nexport default ReportCard;\n","import React, { FunctionComponent } from 'react';\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport currencyFormatter from '../../../../Utilities/currencyFormatter';\nimport styled from 'styled-components';\nimport hoursFormatter from '../../../../Utilities/hoursFormatter';\n\ninterface Props {\n  totalSavings: number;\n  currentPageSavings: number;\n  isLoading: boolean;\n  isMoney: boolean;\n}\nconst SpinnerDiv = styled.div`\n  height: 46.8px;\n  padding-left: 100px;\n`;\n\nconst TotalSavings: FunctionComponent<Props> = ({\n  totalSavings = 0,\n  currentPageSavings = 0,\n  isLoading = false,\n  isMoney = true,\n}) => {\n  return (\n    <>\n      {['Total savings', 'Current page savings'].map((title, index) => (\n        <Card\n          data-cy={title.toLowerCase().replace(' ', '_').replace(' ', '_')}\n          isPlain\n          isCompact\n          key={title}\n        >\n          <CardTitle>{title}</CardTitle>\n          <CardBody>\n            <Title\n              headingLevel=\"h3\"\n              size={index === 0 ? '4xl' : 'xl'}\n              style={{ color: 'var(--pf-global--success-color--200)' }}\n            >\n              {isLoading ? (\n                <SpinnerDiv>\n                  <Spinner data-cy={'spinner'} isSVG size=\"lg\" />\n                </SpinnerDiv>\n              ) : isMoney ? (\n                currencyFormatter(\n                  index === 0 ? totalSavings : currentPageSavings\n                )\n              ) : (\n                hoursFormatter(index === 0 ? totalSavings : currentPageSavings)\n              )}\n            </Title>\n          </CardBody>\n        </Card>\n      ))}\n    </>\n  );\n};\n\nexport default TotalSavings;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  Card,\n  CardBody,\n  InputGroup as PFInputGroup,\n  InputGroupText,\n  TextInput,\n} from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport styled from 'styled-components';\n\nconst InputGroup = styled(PFInputGroup)`\n  width: 170px;\n`;\n\nconst validFloat = (value: number): number =>\n  +value && +value < 0 ? NaN : value;\n\ninterface Props {\n  costManual: number;\n  setFromCalculation: (varName: string, value: number) => void;\n  costAutomation: number;\n  readOnly: boolean;\n}\n\nconst CalculationCost: FunctionComponent<Props> = ({\n  costManual = 0,\n  setFromCalculation = () => ({}),\n  costAutomation = 0,\n  readOnly = true,\n}) => (\n  <Card isPlain isCompact>\n    <CardBody>\n      <p>\n        Manual cost of automation\n        <span\n          style={{\n            color: 'var(--pf-global--Color--dark-200)',\n            fontSize: '0.8em',\n            display: 'block',\n          }}\n        >\n          (e.g. average salary of mid-level Software Engineer)\n        </span>\n      </p>\n      <InputGroup>\n        <InputGroupText>\n          <DollarSignIcon />\n        </InputGroupText>\n        <TextInput\n          id=\"manual-cost\"\n          key=\"manual-cost\"\n          type=\"number\"\n          aria-label=\"manual-cost\"\n          value={isNaN(costManual) ? '' : costManual.toString()}\n          onChange={(e) => setFromCalculation('manual_cost', validFloat(+e))}\n          isDisabled={readOnly}\n        />\n        <InputGroupText>/hr</InputGroupText>\n      </InputGroup>\n      <p style={{ paddingTop: '10px' }}>Automated process cost</p>\n      <InputGroup>\n        <InputGroupText>\n          <DollarSignIcon />\n        </InputGroupText>\n        <TextInput\n          id=\"automation-cost\"\n          key=\"automation-cost\"\n          type=\"number\"\n          aria-label=\"automation-cost\"\n          value={isNaN(costAutomation) ? '' : costAutomation.toString()}\n          onChange={(e) =>\n            setFromCalculation('automation_cost', validFloat(+e))\n          }\n          isDisabled={readOnly}\n        />\n        <InputGroupText>/hr</InputGroupText>\n      </InputGroup>\n    </CardBody>\n  </Card>\n);\n\nexport default CalculationCost;\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  CodeBlock,\n  CodeBlockCode,\n  Modal,\n  ModalVariant,\n} from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\n\nconst SavingsPerTemplateText: FunctionComponent<Record<string, never>> = () => (\n  <>\n    <p>\n      <strong>Savings per template</strong>\n    </p>\n    <p>\n      Savings per template is the difference between the manual cost and\n      automation cost of successfully running templates across hosts. Manual\n      cost is calculated by multiplying the number of hours spent manually\n      running templates across hosts by the average hourly wages per engineer.\n      Automation cost is the total amount of time, in seconds, spent running\n      templates automatically multiplied by the average monthly cost for\n      automated processes.\n    </p>\n    <br />\n    <p>The formula used to calculate manual cost:</p>\n    <CodeBlock>\n      <CodeBlockCode>\n        {`manual time  = configurable time (in minutes) to manually complete the task on one host * number of host runs \nmanual cost = manual time * configurable manual cost of automation (e.g. average salary of mid-level Software Engineer)`}\n      </CodeBlockCode>\n    </CodeBlock>\n    <br />\n\n    <p>The formula used to calculate automation cost:</p>\n    <CodeBlock>\n      <CodeBlockCode>\n        {`automation time = successful elapsed total / 3600\nautomation cost = automation time * configurable automated process cost`}\n      </CodeBlockCode>\n    </CodeBlock>\n    <br />\n\n    <p>The formula used to calculate automation cost:</p>\n    <CodeBlock>\n      <CodeBlockCode>\n        {`savings per template = manual cost - automation cost`}\n      </CodeBlockCode>\n    </CodeBlock>\n    <br />\n  </>\n);\n\nconst FailedHostPerTemplateText: FunctionComponent<\n  Record<string, never>\n> = () => (\n  <>\n    <p>\n      <strong>Failed hosts cost per template</strong>\n    </p>\n    <p>\n      Failed hosts cost per template is the total amount of time spent on failed\n      automated job runs multiplied by the configured automated process cost.\n    </p>\n    <br />\n    <p>The formula used to calculate failed host cost per template:</p>\n    <CodeBlock>\n      <CodeBlockCode>\n        {`failed cost per template = (failed elapsed total / 3600) * configurable automated process cost`}\n      </CodeBlockCode>\n    </CodeBlock>\n    <br />\n  </>\n);\n\nconst MonetaryGainPerTemplateText: FunctionComponent<\n  Record<string, never>\n> = () => (\n  <>\n    <p>\n      <strong>Monetary gain per template</strong>\n    </p>\n    <p>\n      Monetary gain per template is the difference between total savings per\n      template and failed hosts cost per template.\n    </p>\n    <br />\n    <p>The formula for monetary gain per template:</p>\n    <CodeBlock>\n      <CodeBlockCode>\n        {`monetary gain per template = savings per template - failed host cost per template`}\n      </CodeBlockCode>\n    </CodeBlock>\n    <br />\n  </>\n);\n\nconst AutomationFormula: FunctionComponent<Record<string, never>> = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <Button\n        variant={ButtonVariant.link}\n        onClick={() => setIsOpen(true)}\n        icon={<InfoCircleIcon />}\n        data-cy={'automation_formula_button'}\n      >\n        Automation formula\n      </Button>\n      <Modal\n        title=\"Automation formula\"\n        data-cy={'automation_formula_modal'}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        variant={ModalVariant.medium}\n        actions={[\n          <Button\n            key=\"cancel\"\n            variant={ButtonVariant.primary}\n            onClick={() => setIsOpen(false)}\n            data-cy={'automation_formula_cancel_button'}\n          >\n            Close\n          </Button>,\n        ]}\n      >\n        <p>\n          We use manual effort versus time spent on automation as factors to\n          create formulas for cost and savings related to automation. While we\n          aim to provide as accurate an account of the cost and savings as\n          possible, actual values may differ in practice. The following\n          information breaks down where we get the data, the factors we use, the\n          assumptions we make, and the formula used to compute the values as\n          displayed in the chart.\n        </p>\n        <br />\n\n        <SavingsPerTemplateText />\n        <br />\n\n        <FailedHostPerTemplateText />\n        <br />\n\n        <MonetaryGainPerTemplateText />\n      </Modal>\n    </>\n  );\n};\n\nexport default AutomationFormula;\n","const timeFormatter = (n: number): string => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    maximumSignificantDigits: 2,\n  });\n  return formatter.format(n);\n};\nexport default timeFormatter;\n","import React, { FunctionComponent } from 'react';\nimport { ExpandableRowContent, Td } from '@patternfly/react-table';\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from '@patternfly/react-core';\nimport { Template } from './types';\nimport currencyFormatter from '../../../../../Utilities/currencyFormatter';\n\ninterface Props {\n  template: Template;\n  isMoney: boolean;\n}\n\nconst ExpandedRowContents: FunctionComponent<Props> = ({ template }) => (\n  <Td colSpan={5}>\n    <ExpandableRowContent>\n      <DescriptionList columnModifier={{ default: '3Col' }}>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Elapsed</DescriptionListTerm>\n          <DescriptionListDescription>\n            {template.elapsed} seconds\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Host count</DescriptionListTerm>\n          <DescriptionListDescription>\n            {template.host_count}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Total count</DescriptionListTerm>\n          <DescriptionListDescription>\n            {template.total_count}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Total org count</DescriptionListTerm>\n          <DescriptionListDescription>\n            {template.total_org_count}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Total cluster count</DescriptionListTerm>\n          <DescriptionListDescription>\n            {template.total_cluster_count}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Total inventory count</DescriptionListTerm>\n          <DescriptionListDescription>\n            {template.total_inventory_count}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Template success rate</DescriptionListTerm>\n          <DescriptionListDescription>\n            {template.template_success_rate.toFixed(2)}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Costs from failed hosts</DescriptionListTerm>\n          <DescriptionListDescription>\n            {currencyFormatter(template.failed_hosts_costs)}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n        <DescriptionListGroup>\n          <DescriptionListTerm>Monetary gain</DescriptionListTerm>\n          <DescriptionListDescription>\n            {currencyFormatter(template.monetary_gain)}\n          </DescriptionListDescription>\n        </DescriptionListGroup>\n      </DescriptionList>\n    </ExpandableRowContent>\n  </Td>\n);\n\nexport default ExpandedRowContents;\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  Button,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  Tooltip,\n  InputGroupTextVariant,\n  Switch,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { Tr, Td } from '@patternfly/react-table';\nimport { global_success_color_200 as globalSuccessColor200 } from '@patternfly/react-tokens';\nimport { global_disabled_color_200 as globalDisabledColor200 } from '@patternfly/react-tokens';\nimport { global_palette_red_200 } from '@patternfly/react-tokens';\n\nimport currencyFormatter from '../../../../../Utilities/currencyFormatter';\nimport timeFormatter from '../../../../../Utilities/timeFormatter';\nimport percentageFormatter from '../../../../../Utilities/percentageFormatter';\nimport { Template } from './types';\nimport ExpandedRowContents from './ExplandedRowContents';\nimport hoursFormatter from '../../../../../Utilities/hoursFormatter';\n\ninterface Props {\n  template: Template;\n  variableRow: { key: string; value: string };\n  setDataRunTime: (delta: number, id: number) => void;\n  setEnabled: (enabled: boolean) => void;\n  navigateToJobExplorer: (id: number) => void;\n  readOnly: boolean;\n  isMoney: boolean;\n}\n\nconst setLabeledValue = (key: string, value: number) => {\n  let label;\n  switch (key) {\n    case 'elapsed':\n      label = timeFormatter(value) + ' seconds';\n      break;\n    case 'successful_hosts_saved_hours':\n      label = hoursFormatter(value);\n      break;\n    case 'template_automation_percentage':\n      label = percentageFormatter(value) + '%';\n      break;\n    case 'successful_hosts_savings':\n    case 'failed_hosts_costs':\n    case 'monetary_gain':\n      label = currencyFormatter(value);\n      break;\n    default:\n      label = (+value).toFixed(2);\n  }\n  return label;\n};\n\nconst setColumnColor = (key: string, template: Template) => {\n  if (\n    key === 'successful_hosts_savings' ||\n    key === 'successful_hosts_saved_hours'\n  ) {\n    if (\n      template.successful_hosts_savings > 0 &&\n      template.successful_hosts_saved_hours > 0\n    )\n      return globalSuccessColor200.value;\n    else return global_palette_red_200.value;\n  }\n};\n\nconst Row: FunctionComponent<Props> = ({\n  template,\n  variableRow,\n  setDataRunTime,\n  setEnabled,\n  navigateToJobExplorer,\n  readOnly = true,\n  isMoney,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(\n    window.localStorage.getItem(template.id.toString()) === 'true' || false\n  );\n  const expandedRow = (value: boolean, id: number) => {\n    window.localStorage.setItem(id.toString(), value ? 'true' : 'false');\n    setIsExpanded(value);\n  };\n  return (\n    <>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex: template.id,\n            isExpanded: isExpanded,\n            onToggle: () => expandedRow(!isExpanded, template.id),\n          }}\n        />\n        <Td>\n          <Tooltip content={'List of jobs for this template for past 30 days'}>\n            <Button\n              onClick={() => navigateToJobExplorer(template.id)}\n              variant={ButtonVariant.link}\n              style={{ padding: '0px' }}\n            >\n              {template.name}\n            </Button>\n          </Tooltip>\n        </Td>\n        {variableRow && (\n          <Td\n            style={{\n              color: setColumnColor(variableRow.key, template),\n            }}\n          >\n            {setLabeledValue(variableRow.key, +template[variableRow.key])}\n          </Td>\n        )}\n        <Td>\n          <InputGroup>\n            <TextInput\n              autoFocus={\n                window.localStorage.getItem('focused') ===\n                'manual-time-' + template.id.toString()\n              }\n              id={'manual-time-' + template.id.toString()}\n              data-cy={'manual-time'}\n              style={{ maxWidth: '150px' }}\n              type=\"number\"\n              aria-label=\"time run manually\"\n              defaultValue={template.avgRunTime / 60}\n              onBlur={(event: React.ChangeEvent<HTMLInputElement>) => {\n                const minutes = +event.target.value;\n                if (minutes <= 0 || isNaN(minutes)) {\n                  event.target.value = '60';\n                  setDataRunTime(+event.target.value * 60, template.id);\n                } else {\n                  setDataRunTime(minutes * 60, template.id);\n                }\n                window.localStorage.setItem('focused', '');\n              }}\n              onChange={() => {\n                window.localStorage.setItem(\n                  'focused',\n                  'manual-time-' + template.id.toString()\n                );\n              }}\n              isDisabled={readOnly}\n            />\n            <InputGroupText>min</InputGroupText>\n            <InputGroupText variant={InputGroupTextVariant.plain}>\n              x {template.successful_hosts_total} host runs\n            </InputGroupText>\n          </InputGroup>\n        </Td>\n        <Td\n          data-cy={'savings'}\n          style={{\n            color: template.enabled\n              ? template.successful_hosts_savings > 0 ||\n                template.successful_hosts_saved_hours > 0\n                ? globalSuccessColor200.value\n                : global_palette_red_200.value\n              : globalDisabledColor200.value,\n          }}\n        >\n          {isMoney\n            ? currencyFormatter(+template.successful_hosts_savings)\n            : hoursFormatter(+template.successful_hosts_saved_hours)}\n        </Td>\n        <Td>\n          <Switch\n            label=\"Show\"\n            labelOff=\"Hide\"\n            isChecked={template.enabled}\n            onChange={(checked) => setEnabled(checked)}\n            isDisabled={readOnly}\n          />\n        </Td>\n      </Tr>\n      <Tr isExpanded={isExpanded}>\n        <ExpandedRowContents template={template} isMoney={isMoney} />\n      </Tr>\n    </>\n  );\n};\nexport default Row;\n","import React, { FunctionComponent, useState } from 'react';\n\nimport { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport {\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { Template } from './types';\nimport Row from './Row';\nimport { TableSortParams } from '../../Standard/types';\nimport { useQueryParams } from '../../../../../QueryParams';\nimport { reportDefaultParams } from '../../../../../Utilities/constants';\n\ninterface Props {\n  data: Template[];\n  variableRow: { key: string; value: string };\n  setDataRunTime: (delta: number, id: number) => void;\n  setEnabled: (id: number | undefined) => (enabled: boolean) => void;\n  navigateToJobExplorer: (id: number) => void;\n  getSortParams?: () => TableSortParams;\n  readOnly: boolean;\n  isMoney: boolean;\n}\n\nconst TopTemplates: FunctionComponent<Props> = ({\n  data = [],\n  variableRow,\n  setDataRunTime = () => ({}),\n  setEnabled = () => () => ({}),\n  navigateToJobExplorer = () => ({}),\n  getSortParams = () => ({}),\n  readOnly = true,\n  isMoney,\n}) => {\n  const [isKebabOpen, setIsKebabOpen] = useState(false);\n  const defaultParams = reportDefaultParams('automation_calculator');\n  const { setFromToolbar } = useQueryParams(defaultParams);\n\n  const kebabDropdownItems = [\n    <DropdownItem\n      key=\"showAll\"\n      component=\"button\"\n      onClick={() => setEnabled(undefined)(true)}\n    >\n      Show all\n    </DropdownItem>,\n    <DropdownItem\n      key=\"hideAll\"\n      component=\"button\"\n      onClick={() => setEnabled(undefined)(false)}\n    >\n      Hide all\n    </DropdownItem>,\n    <DropdownItem\n      key=\"showAll\"\n      component=\"button\"\n      onClick={() => setFromToolbar('template_weigh_in', undefined)}\n    >\n      Display all template rows\n    </DropdownItem>,\n    <DropdownItem\n      key=\"hideHiddenTemplates\"\n      component=\"button\"\n      onClick={() => setFromToolbar('template_weigh_in', true)}\n    >\n      Display only shown template rows\n    </DropdownItem>,\n    <DropdownItem\n      key=\"showHiddenTemplates\"\n      component=\"button\"\n      onClick={() => setFromToolbar('template_weigh_in', false)}\n    >\n      Display only hidden template rows\n    </DropdownItem>,\n  ];\n  return (\n    <TableComposable\n      data-cy={'table'}\n      aria-label=\"ROI Table\"\n      variant={TableVariant.compact}\n    >\n      <Thead>\n        <Tr>\n          <Th />\n          <Th>Name</Th>\n          {variableRow && (\n            <Th {...getSortParams()} tooltip={null}>\n              {variableRow.value}\n            </Th>\n          )}\n          <Th>Manual time</Th>\n          <Th>Savings</Th>\n          <Th\n            style={{\n              float: 'right',\n              overflow: 'visible',\n              zIndex: 1,\n            }}\n          >\n            <Dropdown\n              onSelect={() => {\n                setIsKebabOpen(true);\n              }}\n              toggle={\n                <KebabToggle\n                  style={{ paddingBottom: '0px' }}\n                  id=\"table-kebab\"\n                  onToggle={() => setIsKebabOpen(!isKebabOpen)}\n                />\n              }\n              isOpen={isKebabOpen}\n              isPlain\n              dropdownItems={kebabDropdownItems}\n              position={'right'}\n            />\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {data.map((template) => (\n          <Row\n            key={template.id}\n            template={template}\n            variableRow={variableRow}\n            setDataRunTime={setDataRunTime}\n            navigateToJobExplorer={navigateToJobExplorer}\n            setEnabled={setEnabled(template.id)}\n            readOnly={readOnly}\n            isMoney={isMoney}\n          />\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nexport default TopTemplates;\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport React, { useState, useEffect, FC } from 'react';\nimport {\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  CardHeader,\n  CardActions,\n  CardTitle,\n  CardFooter,\n  ToggleGroup,\n  ToggleGroupItem,\n  PaginationVariant,\n  Spinner,\n} from '@patternfly/react-core';\n// Imports from custom components\nimport FilterableToolbar from '../../../../Components/Toolbar';\nimport Pagination from '../../../../Components/Pagination';\n// Imports from utilities\nimport {\n  useQueryParams,\n  DEFAULT_NAMESPACE,\n  createUrl,\n} from '../../../../QueryParams';\nimport {\n  jobExplorer,\n  reportDefaultParams,\n} from '../../../../Utilities/constants';\nimport {\n  calculateDelta,\n  convertSecondsToHours,\n} from '../../../../Utilities/helpers';\nimport useRequest from '../../../../Utilities/useRequest';\nimport { getDateFormatByGranularity } from '../../../../Utilities/helpers';\n\n// Chart\nimport Chart from '../../../../Components/Chart';\n\n// Local imports\nimport TotalSavings from './TotalSavings';\nimport CalculationCost from './CalculationCost';\nimport AutomationFormula from './AutomationFormula';\nimport TemplatesTable from './TemplatesTable';\nimport { Paths } from '../../../../paths';\nimport ApiStatusWrapper from '../../../../Components/ApiStatus/ApiStatusWrapper';\nimport { perPageOptions as defaultPerPageOptions } from '../../Shared/constants';\nimport DownloadButton from '../../../../Components/Toolbar/DownloadButton';\nimport { endpointFunctionMap, saveROI } from '../../../../Api';\nimport { AutmationCalculatorProps } from '../types';\nimport hydrateSchema from '../../Shared/hydrateSchema';\nimport currencyFormatter from '../../../../Utilities/currencyFormatter';\nimport hoursFormatter from '../../../../Utilities/hoursFormatter';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { NotificationType } from '../../../../globalTypes';\nimport EmptyList from '../../../../Components/EmptyList';\n\nimport { useNavigate } from 'react-router-dom';\n\nconst SpinnerDiv = styled.div`\n  height: 400px;\n  padding-top: 200px;\n  padding-left: 400px;\n`;\nconst perPageOptions = [\n  ...defaultPerPageOptions,\n  { title: '15', value: 15 },\n  { title: '20', value: 20 },\n  { title: '25', value: 25 },\n];\n\nconst filterDisabled = (data) => data.filter(({ enabled }) => enabled);\n\nconst updateDeltaCost = (data, costAutomation, costManual) =>\n  data.map((el) => {\n    const manualCost =\n      convertSecondsToHours(el.avgRunTime) *\n      el.successful_hosts_total *\n      parseFloat(costManual);\n    const automatedCost =\n      convertSecondsToHours(el.successful_elapsed_total) *\n      parseFloat(costAutomation);\n    const delta = calculateDelta(automatedCost, manualCost);\n\n    return { ...el, delta, manualCost, automatedCost };\n  });\n\nconst AutomationCalculator: FC<AutmationCalculatorProps> = ({\n  slug,\n  name,\n  description,\n  dataEndpoint,\n  optionsEndpoint,\n  schema,\n  fullCard = true,\n}) => {\n  const readData = endpointFunctionMap(dataEndpoint);\n  const readOptions = endpointFunctionMap(optionsEndpoint);\n  const defaultParams = reportDefaultParams(slug);\n  const navigate = useNavigate();\n\n  const [costManual, setCostManual] = useState('');\n  const [costAutomation, setCostAutomation] = useState('');\n  const [isMoney, setIsMoney] = useState(true);\n  const { queryParams, setFromToolbar, setFromPagination } =\n    useQueryParams(defaultParams);\n\n  const mapApi = ({ legend = [] }) => {\n    return legend.map((el) => ({\n      ...el,\n      delta: 0,\n      avgRunTime: el.manual_effort_minutes * 60 || 3600,\n      manualCost: 0,\n      automatedCost: 0,\n      enabled: el.template_weigh_in,\n    }));\n  };\n  const { result: options, request: fetchOptions } = useRequest(readOptions, {\n    sort_options: isMoney\n      ? [\n          {\n            key: defaultParams.sort_options,\n            value: defaultParams.sort_options,\n          },\n        ]\n      : [\n          {\n            key: 'successful_saved_hours',\n            value: 'successful_saved_hours',\n          },\n        ],\n  });\n\n  const {\n    request: fetchData,\n    setValue: setApiData,\n    ...api\n  } = useRequest(\n    async (params) => {\n      const response = await readData(params);\n      return {\n        ...response,\n        items: updateDeltaCost(\n          mapApi(response.meta),\n          response.cost.hourly_manual_labor_cost,\n          response.cost.hourly_automation_cost\n        ),\n      };\n    },\n    {\n      items: [],\n      meta: {\n        count: 0,\n      },\n    }\n  );\n\n  const setValue = (items) => {\n    setApiData({\n      ...api.result,\n      items,\n    });\n  };\n  const getROISaveData = (\n    items: any[],\n    manualCost?: number = costManual,\n    automationCost?: number = costAutomation\n  ) => {\n    const updatedDataApi = items.map((el) => ({\n      template_id: el.id,\n      effort_minutes: el.avgRunTime / 60,\n      template_weigh_in: el.enabled,\n    }));\n    return {\n      currency: 'USD',\n      hourly_manual_labor_cost: manualCost,\n      hourly_automation_cost: automationCost,\n      templates_manual_equivalent: updatedDataApi,\n    };\n  };\n  const dispatch = useDispatch();\n\n  const update = async () => {\n    const res = await readData(queryParams);\n    api.result.monetary_gain_current_page = res.monetary_gain_current_page;\n    api.result.monetary_gain_other_pages = res.monetary_gain_other_pages;\n    api.result.successful_hosts_saved_hours_current_page =\n      res.successful_hosts_saved_hours_current_page;\n    api.result.successful_hosts_saved_hours_other_pages =\n      res.successful_hosts_saved_hours_other_pages;\n    setValue(mapApi(res.meta));\n    return res;\n  };\n\n  const updateCalculationValues = async (varName: string, value: number) => {\n    const hourly_automation_cost =\n      varName === 'automation_cost' ? value : costAutomation;\n    const hourly_manual_labor_cost =\n      varName === 'manual_cost' ? value : costManual;\n    const humanVarName =\n      varName === 'automation_cost' ? 'Automation cost' : 'Manual cost';\n    try {\n      await saveROI(\n        getROISaveData(\n          api.result.items,\n          hourly_manual_labor_cost,\n          hourly_automation_cost\n        )\n      );\n    } catch {\n      dispatch(\n        addNotification({\n          title: `Unable to save changes to ${humanVarName}.`,\n          description: `Unable to save changes ${humanVarName}. Please try again.`,\n          variant: NotificationType.danger,\n          autoDismiss: false,\n        })\n      );\n      // don't update inputs\n      return;\n    }\n    await update();\n    varName === 'manual_cost' ? setCostManual(value) : setCostAutomation(value);\n  };\n\n  /**\n   * Modifies one elements avgRunTime in the unfilteredData\n   * and updates all calculated fields.\n   * Used in top templates.\n   */\n  const setDataRunTime = async (seconds, id) => {\n    const updatedData = api.result.items.map((el) => {\n      if (el.id === id) {\n        el.avgRunTime = seconds;\n        const updatedDelta = updateDeltaCost(\n          [el],\n          costAutomation,\n          costManual\n        )[0];\n        return updatedDelta;\n      } else {\n        return el;\n      }\n    });\n    try {\n      await saveROI(getROISaveData(updatedData), dispatch);\n    } catch {\n      dispatch(\n        addNotification({\n          title: 'Unable to save changes to Manual time',\n          description:\n            'Unable to save changes to Manual time. Please try again.',\n          variant: NotificationType.danger,\n          autoDismiss: false,\n        })\n      );\n      // don't update inputs\n      return;\n    }\n    await update();\n  };\n\n  const setEnabled = (id) => async (value) => {\n    const updatedData = !id\n      ? api.result.items.map((el) => ({ ...el, enabled: value }))\n      : api.result.items.map((el) =>\n          el.id === id ? { ...el, enabled: value } : el\n        );\n    try {\n      await saveROI(getROISaveData(updatedData));\n    } catch {\n      dispatch(\n        addNotification({\n          title: 'Unable to save changes to visibility',\n          description:\n            'Unable to save changes to visibility. Please try again.',\n          variant: NotificationType.danger,\n          autoDismiss: false,\n        })\n      );\n      // don't update inputs\n      return;\n    }\n    await update();\n    setValue(updatedData);\n  };\n  const getSortParams = () => {\n    const onSort = (_event, index, direction) => {\n      setFromToolbar('sort_order', direction);\n    };\n    return {\n      sort: {\n        sortBy: {\n          index: 2,\n          direction: queryParams.sort_order || 'none',\n        },\n        onSort,\n        columnIndex: 2,\n      },\n    };\n  };\n\n  const computeTotalSavings = () =>\n    isMoney\n      ? api.result?.monetary_gain_other_pages +\n        api.result?.monetary_gain_current_page\n      : api.result?.successful_hosts_saved_hours_current_page +\n        api.result?.successful_hosts_saved_hours_other_pages;\n\n  const computeCurrentPageSavings = () =>\n    isMoney\n      ? api.result?.monetary_gain_current_page\n      : api.result?.successful_hosts_saved_hours_current_page;\n\n  /**\n   * Set cost from API on load. Don't reload it.\n   */\n  useEffect(() => {\n    if (api.result?.cost && !costAutomation && !costManual) {\n      setCostManual(api.result.cost.hourly_manual_labor_cost);\n      setCostAutomation(api.result.cost.hourly_automation_cost);\n    }\n  }, [api]);\n\n  /**\n   * Recalculates the delta and costs in the data after the cost is changed.\n   */\n  useEffect(() => {\n    setValue(updateDeltaCost(api.result.items, costAutomation, costManual));\n  }, [costAutomation, costManual]);\n\n  /**\n   * Get data from API depending on the queryParam.\n   */\n  useEffect(() => {\n    fetchOptions(queryParams);\n    fetchData(queryParams);\n  }, [queryParams]);\n  /**\n   * Function to navigate to the job explorer page\n   * with the same filters as is used here.\n   */\n  const navigateToJobExplorer = (templateId) => {\n    const initialQueryParams = {\n      [DEFAULT_NAMESPACE]: {\n        ...jobExplorer.defaultParams,\n        quick_date_range: 'last_30_days',\n        template_id: [templateId],\n      },\n      isMoney: true,\n    };\n    navigate(\n      createUrl(Paths.jobExplorer.replace('/', ''), true, initialQueryParams)\n    );\n  };\n\n  const chartParams = {\n    y: queryParams.sort_options,\n    tooltip: 'Savings for',\n    field: queryParams.sort_options,\n    label:\n      options.sort_options?.find(({ key }) => key === queryParams.sort_options)\n        ?.value || 'Label Y',\n    themeColor: isMoney ? 'green' : 'blue',\n    xTickFormat: getDateFormatByGranularity(queryParams.granularity),\n  };\n\n  const formattedValue = (key: string, value: number) => {\n    let val;\n    switch (key) {\n      case 'elapsed':\n        val = value.toFixed(2) + ' seconds';\n        break;\n      case 'template_automation_percentage':\n        val = value.toFixed(2) + '%';\n        break;\n      case 'successful_hosts_savings':\n      case 'failed_hosts_costs':\n      case 'monetary_gain':\n        val = currencyFormatter(value);\n        break;\n      case 'successful_hosts_saved_hours':\n      case 'successful_hosts_saved_hours_current_page':\n      case 'successful_hosts_saved_hours_other_pages':\n        val = hoursFormatter(value);\n        break;\n      default:\n        val = value.toFixed(2);\n    }\n    return val;\n  };\n  const customTooltipFormatting = ({ datum }) => {\n    const tooltip =\n      chartParams.label +\n      ' for ' +\n      datum.name +\n      ': ' +\n      formattedValue(queryParams.sort_options, datum.y);\n    return tooltip;\n  };\n\n  const isReadOnly = (api) => {\n    return !api.result.rbac?.perms?.all && !api.result.rbac?.perms?.write;\n  };\n\n  const renderLeft = () => (\n    <Card isPlain>\n      {fullCard && (\n        <CardHeader>\n          <CardTitle>Automation savings</CardTitle>\n          <CardActions>\n            <ToggleGroup aria-label=\"toggleButton\">\n              <ToggleGroupItem\n                id=\"toggleIsMoneyTrue\"\n                text=\"Money\"\n                buttonId=\"money\"\n                isSelected={isMoney}\n                onChange={() => {\n                  setIsMoney(true);\n                  setFromToolbar('sort_options', 'successful_hosts_savings');\n                }}\n              />\n              <ToggleGroupItem\n                id=\"toggleIsMoneyFalse\"\n                text=\"Time\"\n                buttonId=\"time\"\n                isSelected={!isMoney}\n                onChange={() => {\n                  setIsMoney(false);\n                  setFromToolbar(\n                    'sort_options',\n                    'successful_hosts_saved_hours'\n                  );\n                }}\n              />\n            </ToggleGroup>\n          </CardActions>\n        </CardHeader>\n      )}\n      {api.isLoading ? (\n        <SpinnerDiv>\n          <Spinner data-cy={'spinner'} isSVG />\n        </SpinnerDiv>\n      ) : filterDisabled(api?.result?.items).length > 0 ? (\n        <Chart\n          schema={hydrateSchema(schema)({\n            themeColor: chartParams.themeColor,\n            label: chartParams.label,\n            tooltip: chartParams.tooltip,\n            field: chartParams.field,\n            yAxis: chartParams.yAxis,\n          })}\n          data={{\n            items: filterDisabled(api.result.items),\n          }}\n          specificFunctions={{\n            labelFormat: {\n              customTooltipFormatting,\n            },\n          }}\n        />\n      ) : (\n        <EmptyList\n          title={'No results found'}\n          message={\n            'No results match the filter criteria. Clear all filters and try again.'\n          }\n          showButton={true}\n          label={'Clear all filters'}\n          onButtonClick={() => setFromToolbar(undefined, undefined)}\n        />\n      )}\n    </Card>\n  );\n\n  const renderRight = () => (\n    <Stack>\n      <StackItem>\n        <TotalSavings\n          isMoney={isMoney}\n          totalSavings={computeTotalSavings()}\n          currentPageSavings={computeCurrentPageSavings()}\n          isLoading={api.isLoading}\n        />\n      </StackItem>\n      <StackItem>\n        <Stack>\n          <StackItem>\n            <CalculationCost\n              costManual={costManual}\n              setFromCalculation={updateCalculationValues}\n              costAutomation={costAutomation}\n              readOnly={isReadOnly(api)}\n            />\n          </StackItem>\n          <StackItem>\n            <AutomationFormula />\n          </StackItem>\n        </Stack>\n      </StackItem>\n    </Stack>\n  );\n\n  const renderContents = () =>\n    fullCard ? (\n      <Card>\n        <CardBody>\n          <FilterableToolbar\n            categories={options}\n            filters={queryParams}\n            setFilters={setFromToolbar}\n            pagination={\n              <Pagination\n                count={api.result.meta.count}\n                perPageOptions={perPageOptions}\n                params={{\n                  limit: +queryParams.limit,\n                  offset: +queryParams.offset,\n                }}\n                setPagination={setFromPagination}\n                isCompact\n              />\n            }\n            additionalControls={[\n              <DownloadButton\n                key=\"download-button\"\n                slug={slug}\n                isMoney={isMoney}\n                name={name}\n                description={description}\n                endpointUrl={dataEndpoint}\n                queryParams={queryParams}\n                selectOptions={options}\n                y={chartParams.y}\n                label={chartParams.label}\n                xTickFormat={chartParams.xTickFormat}\n                totalPages={Math.ceil(\n                  api.result.meta.count / queryParams.limit\n                )}\n                pageLimit={queryParams.limit}\n                sortOptions={chartParams.y}\n                sortOrder={queryParams.sort_order}\n                startDate={queryParams.start_date}\n                endDate={queryParams.end_date}\n                dateRange={queryParams.quick_date_range}\n                inputs={{\n                  costManual,\n                  costAutomation,\n                  totalSavings: computeTotalSavings(),\n                  currentPageSavings: computeCurrentPageSavings(),\n                }}\n              />,\n            ]}\n          />\n          <Grid hasGutter>\n            <GridItem span={9}>{renderLeft()}</GridItem>\n            <GridItem span={3}>{renderRight()}</GridItem>\n            <GridItem span={12}>\n              <p>\n                Enter the time it takes to run the following templates manually.\n              </p>\n              {api.isLoading ? (\n                <Spinner data-cy={'spinner'} isSVG />\n              ) : (\n                <TemplatesTable\n                  navigateToJobExplorer={navigateToJobExplorer}\n                  data={api.result.items}\n                  variableRow={options.sort_options.find(\n                    ({ key }) => key === queryParams.sort_options\n                  )}\n                  setDataRunTime={setDataRunTime}\n                  setEnabled={setEnabled}\n                  getSortParams={getSortParams}\n                  readOnly={isReadOnly(api)}\n                  isMoney={isMoney}\n                />\n              )}\n            </GridItem>\n          </Grid>\n        </CardBody>\n        <CardFooter>\n          <Pagination\n            count={api.result.meta.count}\n            perPageOptions={perPageOptions}\n            params={{\n              limit: +queryParams.limit,\n              offset: +queryParams.offset,\n            }}\n            setPagination={setFromPagination}\n            variant={PaginationVariant.bottom}\n          />\n        </CardFooter>\n      </Card>\n    ) : (\n      <>\n        <FilterableToolbar\n          categories={options}\n          filters={queryParams}\n          setFilters={setFromToolbar}\n        />\n        <Grid hasGutter>\n          <GridItem span={9}>{renderLeft()}</GridItem>\n          <GridItem span={3}>{renderRight()}</GridItem>\n        </Grid>\n      </>\n    );\n  return (\n    <ApiStatusWrapper api={api} customLoading={true} customEmptyState={true}>\n      {renderContents()}\n    </ApiStatusWrapper>\n  );\n};\n\nexport default AutomationCalculator;\n","import React from 'react';\nimport StandardReport from './Standard';\nimport AutomationCalculator from './AutomationCalculator';\nimport { ReportSchema } from './types';\n\nconst getLayoutComponent = (\n  report: ReportSchema,\n  fullCard: boolean\n): React.ReactElement => {\n  switch (report.layoutComponent) {\n    case 'standard':\n      if (fullCard === true) return <StandardReport {...report.layoutProps} />;\n      else return <StandardReport {...report.layoutProps} fullCard={false} />;\n    case 'automationCalculator':\n      if (fullCard === true)\n        return <AutomationCalculator {...report.layoutProps} />;\n      else\n        return (\n          <AutomationCalculator {...report.layoutProps} fullCard={false} />\n        );\n    default:\n      return <></>;\n  }\n};\n\nexport default getLayoutComponent;\n","import { Tag } from './types';\n\nexport enum TagName {\n  operations = 'Operations',\n  executive = 'Executive',\n  subscription = 'Subscription',\n  migration = 'Migration',\n  controller = 'Controller',\n  catalog = 'Catalog',\n  automationHub = 'Automation Hub',\n  modules = 'Modules',\n  hosts = 'Hosts',\n  tasks = 'Tasks',\n  organization = 'Organization',\n  jobTemplate = 'Job template',\n  jobRuns = 'Job runs',\n  timeSeries = 'Time series',\n  performanceAnomalyDetection = 'Performance anomaly detection',\n  savings = 'Savings',\n}\n\nexport const TAGS: Tag[] = [\n  {\n    key: TagName.operations,\n    name: 'Operations',\n    description:\n      'This report is useful to the engineers who manage day-to-day Ansible operations.  In other words, team members who write playbooks, do administration tasks within Controller, etc.',\n  },\n  {\n    key: TagName.executive,\n    name: 'Executive',\n    description:\n      'This report is useful to executives who want to monitor and learn about the Ansible operations happening across the company.',\n  },\n  {\n    key: TagName.subscription,\n    name: 'Subscription',\n    description:\n      'This report provides useful information around subscription data, helping you make decisions around compliance.',\n  },\n  {\n    key: TagName.migration,\n    name: 'Migration',\n    description:\n      'This report provides useful information around migrations, such as helping to identify what could be necessary to move to newer versions of the Ansible Automation Platform.',\n  },\n  {\n    key: TagName.controller,\n    name: 'Controller',\n    description: 'This report provides information gathered from Controller.',\n  },\n  {\n    key: TagName.catalog,\n    name: 'Catalog',\n    description:\n      'This report provides information gathered from Automation Services Catalog.',\n  },\n  {\n    key: TagName.automationHub,\n    name: 'Automation Hub',\n    description:\n      'This report provides information gathered from Automation Hub.',\n  },\n  {\n    key: TagName.modules,\n    name: 'Modules',\n    description:\n      'This report groups information by Ansible modules, the specific executable code ran in individual playbook or job template tasks.',\n  },\n  {\n    key: TagName.hosts,\n    name: 'Hosts',\n    description:\n      'This report groups information by the hosts within the Ansible inventories that are executed by playbooks or job templates.',\n  },\n  {\n    key: TagName.tasks,\n    name: 'Tasks',\n    description:\n      'This report groups information by the individual tasks that make up a playbook or job template.',\n  },\n  {\n    key: TagName.organization,\n    name: 'Organization',\n    description:\n      'This report groups information by the organizations set up within the company’s Ansible Controller instances.',\n  },\n  {\n    key: TagName.jobTemplate,\n    name: 'Job template',\n    description:\n      'This report groups information by the job templates set up within the company’s Ansible Controller instances.',\n  },\n  {\n    key: TagName.jobRuns,\n    name: 'Job runs',\n    description:\n      'This report groups information by the individual runs of playbooks or job templates.',\n  },\n  {\n    key: TagName.timeSeries,\n    name: 'Time series',\n    description:\n      'This report groups information for a specified time range and granularity, such as weekly (e.g., from the past 12 weeks) or monthly (e.g., between August and November).',\n  },\n  {\n    key: TagName.performanceAnomalyDetection,\n    name: 'Performance anomaly detection',\n    description:\n      'This report provides the ability to detect anomalies in Ansible performance, such as identifying slow tasks or hosts, or tasks with high error rates.',\n  },\n  {\n    key: TagName.savings,\n    name: 'Savings',\n    description:\n      'This report is useful for showing potential or actual savings based on Ansible usage.',\n  },\n];\n\nexport const perPageOptions = [\n  { title: '4', value: 4 },\n  { title: '6', value: 6 },\n  { title: '8', value: 8 },\n  { title: '10', value: 10 },\n];\n","const paths = {\n  getDetails: (slug: string): string => `${slug}`,\n};\n\nexport default paths;\n","const currencyFormatter = (n: number): string => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n\n  return formatter.format(n); /* $2,500.00 */\n};\nexport default currencyFormatter;\n","const hoursFormatter = (n: number): string =>\n  n ? `${(+n.toFixed(0)).toLocaleString()} hours` /* 2,500 hours */ : '0 hours';\n\nexport default hoursFormatter;\n"],"names":["BarContainer","styled","div","_templateObject","_taggedTemplateLiteral","Bar","_templateObject2","LabelsContainer","_templateObject3","Label","_templateObject4","Square","_templateObject5","title","str","toUpperCase","slice","toLowerCase","Breakdown","_ref","categoryCount","categoryColor","_ref$showPercent","showPercent","totalCount","Object","values","reduce","accumulated","currentVal","sortedCategories","keys","filter","category","sort","a","b","map","name","barSpacing","color","remainingSpace","length","React","_ref2","idx","key","style","backgroundColor","width","concat","_ref3","Math","round","propTypes","PropTypes","isRequired","variant","full","minHeight","icon","headingLevel","size","subtext","ApiType","CustomPoint","x","y","disableInlineStyles","props","undefined","events","customFunctions","specificFunctions","axisFormat","formatAsYear","tick","Intl","DateTimeFormat","year","format","Date","formatAsMonth","month","labelFormat","onClick","dataComponent","scatterPlot","schema","data","namespace","queryParams","chartSeriesHiddenProps","dispatch","chartData","setChartData","useState","series","legend","useEffect","chartSeriesHidden","hidden","serie","id","host_id","includes","hasOwnProperty","toString","applyHiddenFilter","result","type","grouped","nonGrouped","dates","items","forEach","el","item","push","created_date","date","convertGroupedByData","meta","s","find","serieId","childName","convertApiToData","functions","dataState","newChartData","value","line","label","message","canAdd","showButton","path","onButtonClick","navigate","useNavigate","primary","defaultPerPageOptions","count","perPageOptions","params","setPagination","offset","limit","currentPage","floor","returnOffsetVal","page","isCompact","itemCount","widgetId","perPage","onPerPageSelect","_e","onSetPage","api","children","customLoading","customEmptyState","isLoading","LoadingState","error","ApiErrorState","isSuccess","tableData","NoData","PlotlyChart","defaultParams","reportDefaultParams","useQueryParams","xLabel","findZLabel","adoption_rate_type","orgArray","org_name","templateCountArray","template_count","ZArray","elapsed","total_count","host_task_count","host_count","state","config","modeBarButtonsToRemove","displaylogo","responsive","customdata","hovertemplate","findZLabelValue","marker","coloraxis","layout","template","bar","error_x","error_y","pattern","fillmode","solidity","hoverlabel","align","hovermode","paper_bgcolor","plot_bgcolor","xaxis","automargin","gridcolor","linecolor","standoff","zerolinecolor","zerolinewidth","yaxis","tickangle","text","font","family","anchor","domain","colorbar","tickfont","colorscale","margin","t","bgcolor","cursor","height","Plot","n","NumberFormat","maximumSignificantDigits","isExpanded","Tr","Td","colSpan","ExpandableRowContent","DescriptionList","isHorizontal","columnModifier","lg","slow_hosts_count","slow_hosts_percentage","template_success_rate","expandedInfo","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","FailedTaskDescriptionList","ok","successful_count","skipped","skipped_count","failed","failed_count","error_count","totalTaskCount","average_host_task_ok_count_per_host","average_host_task_skipped_count_per_host","changed","average_host_task_changed_count_per_host","average_host_task_failed_count_per_host","unreachable","average_host_task_unreachable_count_per_host","totalHostCount","ok_host_count","skipped_host_count","changed_host_count","failed_host_count","unreachable_host_count","Flex","FlexItem","default","Divider","component","marginTop","marginBottom","failed_tasks","most_failed_tasks","Grid","hasGutter","task","hostCount","passed","passed_host_count","taskCount","unfinished","unfinished_count","GridItem","task_name","module_name","taskInfo","md","parseInt","totalHostStatusCount","totalTaskStatusCount","renderFailedTaskBar","total_cluster_count","total_org_count","host_task_ok_count","host_task_changed_count","host_task_failed_count","host_task_skipped_count","host_task_unreachable_count","ExpandedTableRowName","timeFields","costFields","isOther","isNoName","legendEntry","headers","expandedRowName","clickableLinking","setIsExpanded","global_disabled_color_300","expand","rowIndex","onToggle","total_elapsed_per_org","total_job_count_per_org","total_host_count_per_org","total_task_count_per_org","skipRow","countMapper","total_template_count","total_templates_per_org","currencyFormatter","Tooltip","content","slug","moduleId","initialQueryParams","task_action_id","paths","getDetails","replace","navigateToModuleBy","org_id","template_id","cluster_id","inventory_id","status","granularity","quick_date_range","navigateToTemplatesExplorer","getClickableText","isAvgDuration","getText","Component","TemplatesExplorer","HostAnomalies","MostUsedModules","getExpandedRowComponent","renderExpandedRow","getSortParams","showKebab","isKebabOpen","setIsKebabOpen","setFromToolbar","kebabDropdownItems","DropdownItem","TableComposable","TableVariant","compact","Thead","Th","overflow","zIndex","Dropdown","onSelect","toggle","KebabToggle","paddingBottom","isOpen","isPlain","dropdownItems","position","skipHeader","Tbody","entry","actions","ValidFeatureFlags","formData","dispatchReducer","downloadType","Title","sm","Radio","onChange","isChecked","flag","betaFlag","flagsReady","useFlagsStatus","flagToCheck","window","location","pathname","split","isFlagEnabled","useFlag","hostname","sendEmail","options","showExtraRows","totalPages","pageLimit","extraRowsLabel","ceil","body","selectedRbacGroups","users","subject","additionalRecipients","emailExtraRows","expiry","rbacGroupsFromApi","request","fetchRbacGroups","useRequest","reportUrl","href","principalsFromApi","fetchRbacPrincipals","at","updateEmailInfo","usersEmailsList","user","email","usersNamesList","username","lastSelectedRbacGroup","userHash","uuid","group","usernames","emails","findIndex","object","showExpiryDate","showError","setShowError","checkEmailInput","event","emailList","target","i","test","Form","FormGroup","fieldId","Select","checkbox","onClear","e","selection","field","groupToChange","revisedSelectedRbacGroups","revisedGroups","indexOf","usersOfChangedGroup","splice","onSelectionChange","hasInlineFilter","selections","placeholderText","SelectOption","join","TextInput","placeholder","onBlur","onFocus","newValue","FormHelperText","isError","isHidden","TextArea","rows","autoResize","ToolbarInput","categoryKey","setValue","validators","generateExpiryDate","d","setMonth","getMonth","parseUrl","token","protocol","host","URL","search","settingsNamespace","isMoney","description","endpointUrl","selectOptions","xTickFormat","chartType","sortOptions","sortOrder","dateGranularity","startDate","endDate","dateRange","adoptionRateType","inputs","isExportModalOpen","setIsExportModalOpen","pdfDownloadButton","pending","rejected","stepIdSelected","setStepIdSelected","initial","initialData","eula","substring","useReducer","action","Error","onSave","allParams","schemaParams","dataFetchingParams","chartParams","sort_options","pdfPostBody","sort_order","start_date","end_date","all_recipients","random","recipient","flat","payload","sendEmailButtonDisabled","list","steps","nextButtonText","onStepChange","step","onClose","CustomFooter","WizardFooter","WizardContext","activeStep","onNext","onBack","Button","isDisabled","top","link","plain","isDanger","Spinner","isSVG","Wizard","hideClose","footer","hydratedSchema","JSON","stringify","entries","arr","regVar","RegExp","parse","tableHeaders","expandedTableRowName","showPagination","defaultSelectedToolbarCategory","availableChartTypes","dataEndpoint","optionsEndpoint","fullCard","readData","readOptions","setFromPagination","settingsQueryParams","fetchOptions","fetchData","dataApi","formattedValue","val","toFixed","handleClick","templateId","clusterId","orgId","inventoryId","hostStatus","quickDateRange","host_status","navigateToHostScatter","datum","reload","customTooltipFormatting","tooltip","host_name","total_tasks_executed","last_referenced","failed_duration","currKey","whitelistKeys","sortBy","index","direction","onSort","_event","columnIndex","additionalControls","ToggleGroup","ToggleGroupItem","buttonId","isSelected","Card","CardBody","categories","defaultSelected","filters","setFilters","pagination","Chart","Table","CardFooter","Pagination","bottom","SpinnerDiv","totalSavings","currentPageSavings","CardTitle","hoursFormatter","validFloat","NaN","costManual","setFromCalculation","costAutomation","readOnly","fontSize","display","InputGroupText","isNaN","paddingTop","SavingsPerTemplateText","CodeBlock","CodeBlockCode","FailedHostPerTemplateText","MonetaryGainPerTemplateText","setIsOpen","Modal","medium","total_inventory_count","failed_hosts_costs","monetary_gain","setColumnColor","successful_hosts_savings","successful_hosts_saved_hours","global_palette_red_200","variableRow","setDataRunTime","setEnabled","navigateToJobExplorer","localStorage","getItem","expandedRow","setItem","padding","setLabeledValue","InputGroup","autoFocus","maxWidth","defaultValue","avgRunTime","minutes","successful_hosts_total","enabled","Switch","labelOff","checked","float","filterDisabled","updateDeltaCost","manualCost","parseFloat","automatedCost","successful_elapsed_total","delta","setCostManual","setCostAutomation","setIsMoney","mapApi","manual_effort_minutes","template_weigh_in","setApiData","async","response","cost","hourly_manual_labor_cost","hourly_automation_cost","getROISaveData","automationCost","currency","templates_manual_equivalent","effort_minutes","update","res","monetary_gain_current_page","monetary_gain_other_pages","successful_hosts_saved_hours_current_page","successful_hosts_saved_hours_other_pages","updateCalculationValues","varName","humanVarName","danger","autoDismiss","computeTotalSavings","computeCurrentPageSavings","themeColor","isReadOnly","rbac","perms","all","write","renderLeft","CardHeader","CardActions","yAxis","EmptyList","renderRight","Stack","StackItem","span","TemplatesTable","jobExplorer","seconds","updatedData","report","layoutComponent","layoutProps","TagName","TAGS","operations","executive","subscription","migration","controller","catalog","automationHub","modules","hosts","tasks","organization","jobTemplate","jobRuns","timeSeries","performanceAnomalyDetection","savings","toLocaleString"],"sourceRoot":""}