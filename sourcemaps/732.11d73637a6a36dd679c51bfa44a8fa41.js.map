{"version":3,"file":"js/732.6ae65c0bd29104eecc63.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/external-link-alt-icon.js","webpack:///./src/Components/ApiStatus/LoadingState.tsx","webpack:///./src/Components/ApiStatus/NoData.tsx","webpack:///./src/Components/Pagination/Pagination.tsx","webpack:///./src/Components/Pagination/index.ts","webpack:///./src/Containers/Notifications/NotificationsList.js","webpack:///./src/Containers/Notifications/Notifications.tsx"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.ExternalLinkAltIconConfig = {\n  name: 'ExternalLinkAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExternalLinkAltIcon = require('../createIcon').createIcon(exports.ExternalLinkAltIconConfig);\nexports[\"default\"] = exports.ExternalLinkAltIcon;","import React, { FunctionComponent } from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\n\nconst LoadingState: FunctionComponent<Record<string, never>> = () => (\n  <EmptyState variant={EmptyStateVariant.full} style={{ minHeight: '400px' }}>\n    <EmptyStateIcon icon={CubesIcon} />\n    <Title headingLevel=\"h5\" size=\"lg\">\n      Loading...\n    </Title>\n    <EmptyStateBody>Please wait.</EmptyStateBody>\n  </EmptyState>\n);\n\nexport default LoadingState;\n","import React, { FunctionComponent } from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\n\ninterface Props {\n  title?: string | Record<string, any>;\n  subtext?: string | Record<string, any>;\n}\n\nconst NoData: FunctionComponent<Props> = ({ title, subtext }) => (\n  <EmptyState variant={EmptyStateVariant.full} style={{ minHeight: '400px' }}>\n    <EmptyStateIcon icon={CubesIcon} />\n    <Title headingLevel=\"h5\" size=\"lg\">\n      {title ? title : 'No Data'}\n    </Title>\n    {subtext && <EmptyStateBody>{subtext}</EmptyStateBody>}\n  </EmptyState>\n);\n\nexport default NoData;\n","import React, { FunctionComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pagination as PFPagination } from '@patternfly/react-core';\n\nconst defaultPerPageOptions = [\n  { title: '5', value: 5 },\n  { title: '10', value: 10 },\n  { title: '15', value: 15 },\n  { title: '20', value: 20 },\n  { title: '25', value: 25 },\n];\n\ntype SetPagination = (offset: number, limit?: number) => void;\n\ninterface Props {\n  count?: number;\n  perPageOptions?: { title: string; value: number }[];\n  params: {\n    offset: number;\n    limit: number;\n  };\n  setPagination: SetPagination;\n  [x: string]: unknown;\n}\n\nconst Pagination: FunctionComponent<Props> = ({\n  count = 0,\n  perPageOptions = null,\n  params,\n  setPagination,\n  ...props\n}) => {\n  const { offset, limit } = params;\n  const currentPage = Math.floor(offset / limit + 1);\n  const returnOffsetVal = (page: number) => (page - 1) * limit;\n\n  return (\n    <PFPagination\n      data-cy={props.isCompact ? 'pagination_top' : 'pagination_bottom'}\n      itemCount={count}\n      widgetId=\"aa-pagination\"\n      perPageOptions={perPageOptions ?? defaultPerPageOptions}\n      perPage={limit}\n      page={currentPage}\n      onPerPageSelect={(_e, perPage: number, page: number) => {\n        setPagination(returnOffsetVal(page), perPage);\n      }}\n      onSetPage={(_e, page: number) => {\n        setPagination(returnOffsetVal(page));\n      }}\n      {...props}\n    />\n  );\n};\n\nPagination.propTypes = {\n  count: PropTypes.number,\n  params: PropTypes.exact({\n    offset: PropTypes.number.isRequired,\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  setPagination: PropTypes.func.isRequired,\n  perPageOptions: PropTypes.arrayOf(\n    PropTypes.exact({\n      title: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default Pagination;\n","import Pagination from './Pagination';\n\nexport default Pagination;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport {\n  NotificationDrawerList as PFNotificationDrawerList,\n  NotificationDrawerListItem as PFNotificationDrawerListItem,\n  NotificationDrawerListItemBody,\n  NotificationDrawerListItemHeader,\n} from '@patternfly/react-core';\n\nimport { ExternalLinkAltIcon as PFExternalLinkAltIcon } from '@patternfly/react-icons';\nimport LoadingState from '../../Components/ApiStatus/LoadingState';\nimport { capitalize } from '../../Utilities/helpers';\n\nconst ExternalLinkAltIcon = styled(PFExternalLinkAltIcon)`\n  margin-left: 7px;\n  color: var(--pf-global--Color--400);\n  font-size: 14px;\n`;\n\nconst NotificationDrawerListItem = styled(PFNotificationDrawerListItem)`\n  border-top: 1px solid var(--pf-global--BorderColor--light-100);\n  border-bottom::nth-child(odd): 1px solid var(--pf-global--BorderColor--light-100);\n  box-shadow: none;\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst NotificationDrawerList = styled(PFNotificationDrawerList)`\n  &:last-child {\n    border-bottom: 1px solid var(--pf-global--BorderColor--light-100);\n  }\n`;\n\nconst stringifyDate = (date) => {\n  const day = moment(date);\n  const oneHour = 60 * 60 * 1000;\n  const now = moment().utc();\n\n  if (now.isAfter(day)) {\n    return `${now.diff(day, 'days')} day(s) ago.`;\n  }\n\n  if (day.isSame(now, 'day')) {\n    if (day.valueOf() > oneHour) {\n      return `${day.diff(now, 'hours')} hour(s) ago.`;\n    }\n\n    return `${now.diff(day, 'minutes')} minute(s) ago.`;\n  }\n};\n\nconst AllNotificationTemplate = ({ notifications }) =>\n  notifications.map(\n    ({ date, message, label, notification_id: id, tower_url: url }) => {\n      if (label === '' || label === 'notice') {\n        return (\n          <NotificationDrawerListItem variant=\"info\" key={date + '-' + id}>\n            <NotificationDrawerListItemHeader\n              variant=\"info\"\n              title={\n                <>\n                  {url ? (\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                      {capitalize(label)}\n                      <ExternalLinkAltIcon />\n                    </a>\n                  ) : (\n                    capitalize(label)\n                  )}\n                </>\n              }\n            />\n            <NotificationDrawerListItemBody>\n              {message}{' '}\n            </NotificationDrawerListItemBody>\n          </NotificationDrawerListItem>\n        );\n      }\n\n      if (label === 'error') {\n        return (\n          <NotificationDrawerListItem variant=\"danger\" key={date + '-' + id}>\n            <NotificationDrawerListItemHeader\n              variant=\"danger\"\n              title={\n                <>\n                  {url ? (\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                      {capitalize(label)}\n                      <ExternalLinkAltIcon />\n                    </a>\n                  ) : (\n                    capitalize(label)\n                  )}\n                </>\n              }\n            />\n            <NotificationDrawerListItemBody timestamp={stringifyDate(date)}>\n              {message}{' '}\n            </NotificationDrawerListItemBody>\n          </NotificationDrawerListItem>\n        );\n      }\n\n      if (label === 'warning') {\n        return (\n          <NotificationDrawerListItem variant=\"warning\" key={date + '-' + id}>\n            <NotificationDrawerListItemHeader\n              variant=\"warning\"\n              title={\n                <>\n                  {url ? (\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                      {capitalize(label)}\n                      <ExternalLinkAltIcon />\n                    </a>\n                  ) : (\n                    capitalize(label)\n                  )}\n                </>\n              }\n            />\n            <NotificationDrawerListItemBody timestamp={stringifyDate(date)}>\n              {message}{' '}\n            </NotificationDrawerListItemBody>\n          </NotificationDrawerListItem>\n        );\n      }\n    }\n  );\n\nconst ErrorNotificationTemplate = ({ notifications }) =>\n  notifications\n    .filter((notification) => notification.label === 'error')\n    .map(({ message, date, label, notification_id: id, tower_url: url }) => (\n      <NotificationDrawerListItem variant=\"danger\" key={date + '-' + id}>\n        <NotificationDrawerListItemHeader\n          variant=\"danger\"\n          title={\n            <>\n              {url ? (\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                  {capitalize(label)}\n                  <ExternalLinkAltIcon />\n                </a>\n              ) : (\n                capitalize(label)\n              )}\n            </>\n          }\n        />\n        <NotificationDrawerListItemBody timestamp={stringifyDate(date)}>\n          {message}{' '}\n        </NotificationDrawerListItemBody>\n      </NotificationDrawerListItem>\n    ));\n\nconst NoticeNotificationTemplate = ({ notifications }) =>\n  notifications\n    .filter((notification) => notification.label === 'notice')\n    .map(({ message, date, label, notification_id: id, tower_url: url }) => (\n      <NotificationDrawerListItem variant=\"info\" key={date + '-' + id}>\n        <NotificationDrawerListItemHeader\n          variant=\"info\"\n          title={\n            <>\n              {url ? (\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                  {capitalize(label)}\n                  <ExternalLinkAltIcon />\n                </a>\n              ) : (\n                capitalize(label)\n              )}\n            </>\n          }\n        />\n        <NotificationDrawerListItemBody timestamp={stringifyDate(date)}>\n          {message}{' '}\n        </NotificationDrawerListItemBody>\n      </NotificationDrawerListItem>\n    ));\n\nconst WarningNotificationTemplate = ({ notifications }) =>\n  notifications\n    .filter((notification) => notification.label === 'warning')\n    .map(({ message, date, label, notification_id: id, tower_url: url }) => (\n      <NotificationDrawerListItem variant=\"warning\" key={date + '-' + id}>\n        <NotificationDrawerListItemHeader\n          variant=\"warning\"\n          title={\n            <>\n              {url ? (\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                  {capitalize(label)}\n                  <ExternalLinkAltIcon />\n                </a>\n              ) : (\n                capitalize(label)\n              )}\n            </>\n          }\n        />\n        <NotificationDrawerListItemBody timestamp={stringifyDate(date)}>\n          {message}{' '}\n        </NotificationDrawerListItemBody>\n      </NotificationDrawerListItem>\n    ));\n\nconst NotificationsList = ({ filterBy, notifications }) => (\n  <>\n    <NotificationDrawerList>\n      {notifications.length <= 0 && <LoadingState />}\n      {filterBy === '' && (\n        <AllNotificationTemplate notifications={notifications} />\n      )}\n      {filterBy === 'notice' && (\n        <NoticeNotificationTemplate notifications={notifications} />\n      )}\n      {filterBy === 'error' && (\n        <ErrorNotificationTemplate notifications={notifications} />\n      )}\n      {filterBy === 'warning' && (\n        <WarningNotificationTemplate notifications={notifications} />\n      )}\n    </NotificationDrawerList>\n  </>\n);\n\nAllNotificationTemplate.propTypes = {\n  notifications: PropTypes.array,\n};\n\nErrorNotificationTemplate.propTypes = {\n  notifications: PropTypes.array,\n};\n\nWarningNotificationTemplate.propTypes = {\n  notifications: PropTypes.array,\n};\n\nNotificationsList.propTypes = {\n  notifications: PropTypes.array,\n  filterBy: PropTypes.string,\n};\n\nexport default NotificationsList;\n","import React, { useState, useEffect, FC, useCallback } from 'react';\n\nimport { useQueryParams } from '../../QueryParams/';\n\nimport styled from 'styled-components';\nimport LoadingState from '../../Components/ApiStatus/LoadingState';\nimport NoData from '../../Components/ApiStatus/NoData';\nimport { Params, readClusters, readNotifications } from '../../Api/';\nimport useRequest from '../../Utilities/useRequest';\n\nimport { PageHeader } from '@ansible/ansible-ui-framework';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle as PFCardTitle,\n  FormSelect,\n  FormSelectOption,\n  PaginationVariant,\n  NotificationDrawer,\n  PageSection,\n} from '@patternfly/react-core';\n\nimport NotificationsList from './NotificationsList';\nimport Pagination from '../../Components/Pagination';\n\nconst CardTitle = styled(PFCardTitle)`\n  display: flex;\n  justify-content: space-between;\n\n  @media screen and (max-width: 1035px) {\n    display: block;\n  }\n`;\n\nconst DropdownGroup = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-end;\n\n  @media screen and (max-width: 1035px) {\n    display: block;\n  }\n\n  select {\n    margin: 0 10px;\n    width: 150px;\n\n    @media screen and (max-width: 1035px) {\n      margin: 10px 10px 0 0;\n    }\n\n    @media screen and (max-width: 865px) {\n      width: 100%;\n    }\n  }\n`;\n\nconst notificationOptions = [\n  {\n    value: 'please choose',\n    label: 'Select Notification Severity',\n    disabled: true,\n  },\n  { value: 'error', label: 'View Critical', disabled: false },\n  { value: 'warning', label: 'View Warning', disabled: false },\n  { value: 'notice', label: 'View Notice', disabled: false },\n  { value: '', label: 'View All', disabled: false },\n];\n\nconst formatClusterName = (\n  data: any[]\n): { value: string; label: string; disabled: boolean }[] => {\n  const defaultClusterOptions = [\n    { value: 'please choose', label: 'Select cluster', disabled: true },\n    { value: '', label: 'All Clusters', disabled: false },\n    { value: '-1', label: 'Unassociated', disabled: false },\n  ];\n\n  const calcData = data.map(\n    ({ label, cluster_id: id, install_uuid: uuid }) => ({\n      value: id as string,\n      label: (label ?? uuid) as string,\n      disabled: false,\n    })\n  );\n\n  return [...defaultClusterOptions, ...calcData];\n};\n\nconst initialQueryParams = {\n  defaultParams: {\n    limit: 5,\n    offset: 0,\n    // This is not doing anything opn the v0 api\n    sort_options: 'created',\n  },\n};\n\ninterface NotificationDataType {\n  notifications: any[];\n  meta: {\n    count: number;\n  };\n}\n\ninterface ClusterDataType {\n  templates: any[];\n}\n\nconst Notifications: FC<Record<string, never>> = () => {\n  const [selectedCluster, setSelectedCluster] = useState('');\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const { queryParams, setId, setFromPagination, setSeverity } = useQueryParams(\n    initialQueryParams.defaultParams\n  );\n\n  const { severity, limit, offset } = queryParams as Record<string, string>;\n\n  const {\n    result: { notifications: notificationsData, meta },\n    isLoading,\n    isSuccess,\n    error,\n    request: fetchNotifications,\n  } = useRequest<NotificationDataType>(\n    useCallback(\n      () =>\n        readNotifications(\n          queryParams as Params\n        ) as unknown as Promise<NotificationDataType>,\n      [queryParams]\n    ),\n    { notifications: [], meta: { count: 0 } }\n  );\n\n  const {\n    result: { templates: clustersData = [] },\n    request: fetchClusters,\n  } = useRequest<ClusterDataType>(\n    () => readClusters() as unknown as Promise<ClusterDataType>,\n    { templates: [] }\n  );\n\n  useEffect(() => {\n    // TODO: Update the useRequest hook to return function and not a promise!! @brum\n    fetchClusters();\n  }, []);\n\n  useEffect(() => {\n    fetchNotifications();\n  }, [queryParams]);\n\n  return (\n    <>\n      <PageHeader title={'Notifications'} />\n      <>\n        <PageSection>\n          <Card>\n            <CardTitle>\n              <DropdownGroup>\n                <FormSelect\n                  name=\"selectedCluster\"\n                  value={selectedCluster}\n                  onChange={(value) => {\n                    setSelectedCluster(value);\n                    setId(value);\n                    setFromPagination(0);\n                  }}\n                  aria-label=\"Select Cluster\"\n                >\n                  {formatClusterName(clustersData).map(\n                    ({ value, label, disabled }, index) => (\n                      <FormSelectOption\n                        isDisabled={disabled}\n                        key={index}\n                        value={value}\n                        label={label}\n                      />\n                    )\n                  )}\n                </FormSelect>\n                <FormSelect\n                  name=\"selectedNotification\"\n                  value={severity || ''}\n                  onChange={(value) => {\n                    setSeverity(value);\n                    setFromPagination(0);\n                  }}\n                  aria-label=\"Select Notification Type\"\n                >\n                  {notificationOptions.map(\n                    ({ disabled, value, label }, index) => (\n                      <FormSelectOption\n                        isDisabled={disabled}\n                        key={index}\n                        value={value}\n                        label={label}\n                      />\n                    )\n                  )}\n                </FormSelect>\n              </DropdownGroup>\n              <Pagination\n                count={meta?.count}\n                params={{\n                  limit: +limit,\n                  offset: +offset,\n                }}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                /* @ts-ignore */\n                setPagination={setFromPagination}\n                isCompact\n              />\n            </CardTitle>\n            <CardBody>\n              {isLoading && <LoadingState />}\n              {isSuccess && notificationsData.length <= 0 && <NoData />}\n              {isSuccess && notificationsData.length > 0 && (\n                <NotificationDrawer>\n                  <NotificationsList\n                    filterBy={severity || ''}\n                    notifications={notificationsData}\n                  />\n                </NotificationDrawer>\n              )}\n              {error && <NoData />}\n              <Pagination\n                count={meta?.count}\n                params={{\n                  limit: +limit,\n                  offset: +offset,\n                }}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                /* @ts-ignore */\n                setPagination={setFromPagination}\n                variant={PaginationVariant.bottom}\n              />\n            </CardBody>\n          </Card>\n        </PageSection>\n      </>\n    </>\n  );\n};\n\nexport default Notifications;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","variant","full","style","minHeight","icon","headingLevel","size","title","subtext","defaultPerPageOptions","value","count","perPageOptions","params","setPagination","props","offset","limit","currentPage","Math","floor","returnOffsetVal","page","isCompact","itemCount","widgetId","perPage","onPerPageSelect","_e","onSetPage","propTypes","isRequired","ExternalLinkAltIcon","styled","PFExternalLinkAltIcon","_templateObject","_taggedTemplateLiteral","NotificationDrawerListItem","PFNotificationDrawerListItem","_templateObject2","NotificationDrawerList","PFNotificationDrawerList","_templateObject3","stringifyDate","date","day","moment","now","utc","isAfter","concat","diff","isSame","valueOf","AllNotificationTemplate","_ref","notifications","map","_ref2","message","label","id","notification_id","url","tower_url","React","key","NotificationDrawerListItemHeader","target","rel","href","capitalize","NotificationDrawerListItemBody","timestamp","ErrorNotificationTemplate","_ref3","filter","notification","_ref4","NoticeNotificationTemplate","_ref5","_ref6","WarningNotificationTemplate","_ref7","_ref8","NotificationsList","_ref9","filterBy","length","LoadingState","PropTypes","DropdownGroup","div","notificationOptions","disabled","initialQueryParams","sort_options","selectedCluster","setSelectedCluster","useState","queryParams","setId","setFromPagination","setSeverity","severity","result","notificationsData","meta","isLoading","isSuccess","error","request","fetchNotifications","useRequest","useCallback","templates","clustersData","fetchClusters","useEffect","PageHeader","PageSection","Card","FormSelect","onChange","data","cluster_id","install_uuid","uuid","index","FormSelectOption","isDisabled","CardBody","NoData","NotificationDrawer","Pagination","bottom"],"sourceRoot":""}