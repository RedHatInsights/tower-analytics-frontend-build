{"version":3,"file":"js/528.f51bea1b865a408dd55d.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/caret-left-icon.js","webpack:///./src/Components/CardActionsRow.tsx","webpack:///./src/Components/DeleteButton/DeleteButton.js","webpack:///./src/Components/RoutedTabs.js","webpack:///./src/Containers/SavingsPlanner/Details/DetailsTab/index.js","webpack:///./src/Containers/SavingsPlanner/Details/StatisticsTab/TotalSavings/index.tsx","webpack:///./src/Containers/SavingsPlanner/Details/StatisticsTab/FormulaDescription/index.tsx","webpack:///./src/Containers/SavingsPlanner/Details/StatisticsTab/index.tsx","webpack:///./src/Containers/SavingsPlanner/Edit/index.js","webpack:///./src/Containers/SavingsPlanner/index.tsx","webpack:///./src/Containers/SavingsPlanner/Details/index.js","webpack:///./src/Containers/SavingsPlanner/Details/Details.js","webpack:///./src/Utilities/getRelatedResourceDeleteDetails.js","webpack:///./src/Components/Chart/types.ts","webpack:///./src/Components/Chart/convertApi.ts","webpack:///./src/Components/Chart/index.tsx","webpack:///./src/Components/JobStatus.tsx","webpack:///./src/Utilities/currencyFormatter.ts","webpack:///./src/Utilities/hoursFormatter.ts"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CaretLeftIconConfig = {\n  name: 'CaretLeftIcon',\n  height: 512,\n  width: 192,\n  svgPath: 'M192 127.338v257.324c0 17.818-21.543 26.741-34.142 14.142L29.196 270.142c-7.81-7.81-7.81-20.474 0-28.284l128.662-128.662c12.599-12.6 34.142-3.676 34.142 14.142z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CaretLeftIcon = require('../createIcon').createIcon(exports.CaretLeftIconConfig);\nexports[\"default\"] = exports.CaretLeftIcon;","import React, { FunctionComponent } from 'react';\nimport { CardActions } from '@patternfly/react-core';\nimport styled from 'styled-components';\n\nconst CardActionsWrapper = styled.div`\n  margin-top: 20px;\n  --pf-c-card__actions--PaddingLeft: 0;\n`;\n\ninterface Props {\n  children: React.ReactChild | React.ReactChildren;\n}\n\nconst CardActionsRow: FunctionComponent<Props> = ({ children }) => {\n  return (\n    <CardActionsWrapper>\n      <CardActions>{children}</CardActions>\n    </CardActionsWrapper>\n  );\n};\n\nexport default CardActionsRow;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\nimport { Button, Badge, Alert, Tooltip } from '@patternfly/react-core';\nimport AlertModal from '../AlertModal';\nimport { getRelatedResourceDeleteCounts } from '../../Utilities/getRelatedResourceDeleteDetails';\nimport ErrorDetail from '../ErrorDetail';\n\nconst WarningMessage = styled(Alert)`\n  margin-top: 10px;\n`;\n\nconst Label = styled.span`\n  && {\n    margin-right: 10px;\n  }\n`;\n\nconst DeleteButton = ({\n  onConfirm,\n  modalTitle = 'Delete',\n  name = '',\n  variant = 'secondary',\n  isDisabled = false,\n  ouiaId = null,\n  deleteMessage = 'Delete?',\n  deleteDetailsRequests = [],\n  disabledTooltip = 'This item cannot be deleted',\n  children,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [deleteMessageError, setDeleteMessageError] = useState();\n  const [deleteDetails, setDeleteDetails] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const toggleModal = async (isModalOpen) => {\n    setIsLoading(true);\n    if (deleteDetailsRequests.length > 0 && isModalOpen) {\n      const { results, error } = await getRelatedResourceDeleteCounts(\n        deleteDetailsRequests\n      );\n      if (error) {\n        setDeleteMessageError(error);\n      } else {\n        setDeleteDetails(results);\n      }\n    }\n    setIsLoading(false);\n    setIsOpen(isModalOpen);\n  };\n\n  if (deleteMessageError) {\n    return (\n      <AlertModal\n        isOpen={!!deleteMessageError}\n        variant={'error'}\n        title={'Error!'}\n        onClose={() => {\n          toggleModal(false);\n          setDeleteMessageError();\n        }}\n      >\n        <ErrorDetail error={deleteMessageError.detail} />\n      </AlertModal>\n    );\n  }\n\n  return (\n    <>\n      {disabledTooltip ? (\n        <Tooltip content={disabledTooltip} position=\"top\">\n          <div>\n            <Button\n              spinnerAriaValueText={isLoading ? 'Loading' : undefined}\n              variant={variant || 'secondary'}\n              aria-label={'Delete'}\n              isDisabled={isDisabled}\n              onClick={() => toggleModal(true)}\n              ouiaId={ouiaId}\n            >\n              {children || 'Delete'}\n            </Button>\n          </div>\n        </Tooltip>\n      ) : (\n        <Button\n          ouiaId={ouiaId}\n          spinnerAriaValueText={isLoading ? 'Loading' : undefined}\n          variant={variant || 'secondary'}\n          aria-label={'Delete'}\n          isDisabled={isDisabled}\n          onClick={() => toggleModal(true)}\n        >\n          {children || 'Delete'}\n        </Button>\n      )}\n      <AlertModal\n        isOpen={isOpen}\n        title={modalTitle}\n        variant=\"danger\"\n        onClose={() => toggleModal(false)}\n        actions={[\n          <Button\n            ouiaId=\"delete-modal-confirm\"\n            key=\"delete\"\n            variant=\"danger\"\n            aria-label={'Confirm Delete'}\n            isDisabled={isDisabled}\n            onClick={() => {\n              onConfirm();\n              toggleModal(false);\n            }}\n          >\n            {'Delete'}\n          </Button>,\n          <Button\n            ouiaId=\"delete-modal-cancel\"\n            key=\"cancel\"\n            variant=\"link\"\n            aria-label={'Cancel'}\n            onClick={() => toggleModal(false)}\n          >\n            {'Cancel'}\n          </Button>,\n        ]}\n      >\n        {'Are you sure you want to delete:'}\n        <br />\n        <strong>{name}</strong>\n        {Object.values(deleteDetails).length > 0 && (\n          <WarningMessage\n            variant=\"warning\"\n            isInline\n            title={\n              <div>\n                <div aria-label={deleteMessage}>{deleteMessage}</div>\n                <br />\n                {Object.entries(deleteDetails).map(([key, value]) => (\n                  <div aria-label={`${key}: ${value}`} key={key}>\n                    <Label>{key}</Label> <Badge>{value}</Badge>\n                  </div>\n                ))}\n              </div>\n            }\n          />\n        )}\n      </AlertModal>\n    </>\n  );\n};\n\nDeleteButton.propTypes = {\n  onConfirm: PropTypes.func.isRequired,\n  modalTitle: PropTypes.string,\n  name: PropTypes.string,\n  variant: PropTypes.object,\n  isDisabled: PropTypes.bool,\n  ouiaId: PropTypes.string,\n  deleteMessage: PropTypes.string,\n  deleteDetailsRequests: PropTypes.array,\n  disabledTooltip: PropTypes.bool,\n  children: PropTypes.node,\n};\n\nexport default DeleteButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { shape, string, number, arrayOf, node, oneOfType } from 'prop-types';\nimport { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nconst RoutedTabs = ({ tabsArray, defaultTabId = 1 }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const getActiveTabId = (defaultTabId) => {\n    return (\n      tabsArray.find(\n        (tab) =>\n          typeof tab.name === 'string' &&\n          location.pathname.includes(tab.name.toLowerCase())\n      )?.id || defaultTabId\n    );\n  };\n\n  const handleTabSelect = (_, eventKey) => {\n    const match = tabsArray.find((tab) => tab.id === eventKey);\n    if (match) {\n      navigate(match.link);\n    }\n  };\n\n  return (\n    <Tabs activeKey={getActiveTabId(defaultTabId)} onSelect={handleTabSelect}>\n      {tabsArray.map((tab) => (\n        <Tab\n          aria-label={typeof tab.name === 'string' ? tab.name : `${tab.id} tab`}\n          eventKey={tab.id}\n          key={tab.id}\n          link={tab.link}\n          title={<TabTitleText>{tab.name}</TabTitleText>}\n          role=\"tab\"\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nRoutedTabs.propTypes = {\n  defaultTabId: PropTypes.number,\n  tabsArray: arrayOf(\n    shape({\n      id: number.isRequired,\n      link: string.isRequired,\n      name: oneOfType([string.isRequired, node.isRequired]),\n    })\n  ).isRequired,\n};\n\nexport default RoutedTabs;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { Button } from '@patternfly/react-core';\n\nimport {\n  CardBody as PFCardBody,\n  CardFooter,\n  DescriptionList,\n  DescriptionListTerm,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Divider as PFDivider,\n  Label,\n  List,\n  ListItem,\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core';\nimport CardActionsRow from '../../../../Components/CardActionsRow';\nimport { deletePlan, readPlanOptions } from '../../../../Api/';\nimport useRequest, {\n  useDismissableError,\n} from '../../../../Utilities/useRequest';\nimport DeleteButton from '../../../../Components/DeleteButton/DeleteButton';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { formatDateTime } from '../../../../Utilities/helpers';\nimport RoutedTabs from '../../../../Components/RoutedTabs';\nimport AlertModal from '../../../../Components/AlertModal/AlertModal';\nimport ErrorDetail from '../../../../Components/ErrorDetail/ErrorDetail';\nimport JobStatus from '../../../../Components/JobStatus';\n\nimport { createUrl, DEFAULT_NAMESPACE } from '../../../../QueryParams/';\nimport { jobExplorer } from '../../../../Utilities/constants';\nimport { Paths } from '../../../../paths';\n\nconst CardBody = styled(PFCardBody)`\n  min-height: 500px;\n  padding: 0;\n  padding-bottom: 20px;\n\n  &:first-child {\n    padding-top: 0;\n  }\n`;\n\nconst Divider = styled(PFDivider)`\n  padding-top: 24px;\n`;\n\nconst DetailsTab = ({ tabsArray, plan, canWrite }) => {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const {\n    id,\n    automation_status,\n    category,\n    description,\n    frequency_period,\n    hosts,\n    manual_time,\n    modified,\n    name,\n    tasks,\n    template_details,\n    template_id,\n  } = plan;\n\n  const {\n    result: options,\n    isSuccess: optionsSuccess,\n    request: fetchOptions,\n  } = useRequest(readPlanOptions, {});\n\n  useEffect(() => {\n    fetchOptions({});\n  }, []);\n\n  const navigateToJobExplorer = (templateId) => {\n    const initialQueryParams = {\n      [DEFAULT_NAMESPACE]: {\n        ...jobExplorer.defaultParams,\n        quick_date_range: 'last_30_days',\n        status: ['failed', 'successful'],\n        template_id: [templateId],\n      },\n    };\n\n    navigate(\n      createUrl(Paths.jobExplorer.replace('/', ''), true, initialQueryParams)\n    );\n  };\n\n  const showTemplate = (template_details) => {\n    if (!template_details.id) {\n      return;\n    }\n\n    return (\n      <a onClick={() => navigateToJobExplorer(template_details.id)}>\n        {template_details.name}\n      </a>\n    );\n  };\n\n  const renderOptionsBasedValue = (name, val) => {\n    // Return if no options yet or no key in the options is found.\n    if (!optionsSuccess || !options[name]) return '';\n\n    // Search for the key and return the value if exists.\n    const fromOptionsValue = options[name].find(({ key }) => key === val);\n    return fromOptionsValue?.value ?? '';\n  };\n\n  const jobStatusLabel = (item, index) => {\n    return item !== 'None' ? (\n      <JobStatus key={index} status={item} />\n    ) : (\n      <Label\n        key={index}\n        variant=\"outline\"\n        color=\"red\"\n        icon={<ExclamationCircleIcon />}\n        style={{ marginRight: '0.5rem', marginBottom: '0.5rem' }}\n      >\n        Not Running\n      </Label>\n    );\n  };\n\n  const labelsAndValues = {\n    Name: name || undefined,\n    'Automation type': category\n      ? renderOptionsBasedValue('category', category)\n      : undefined,\n    Description: description || undefined,\n    'Manual time': manual_time\n      ? renderOptionsBasedValue('manual_time', manual_time)\n      : undefined,\n    'Run on hosts': hosts || undefined,\n    Frequency: frequency_period\n      ? renderOptionsBasedValue('frequency_period', frequency_period)\n      : undefined,\n    Template: template_id ? showTemplate(template_details) : undefined,\n    'Last job status': Array.isArray(automation_status.status)\n      ? automation_status.status.map((item, index) =>\n          jobStatusLabel(item, index)\n        )\n      : jobStatusLabel(automation_status.status),\n    'Last updated': modified ? (\n      <span>{formatDateTime(modified)}</span>\n    ) : undefined,\n  };\n\n  const { request: deletePlans, error: deleteError } = useRequest(\n    async (props) => {\n      await deletePlan(props);\n      navigate(createUrl(Paths.savingsPlanner, true));\n    }\n  );\n\n  const { error, dismissError } = useDismissableError(deleteError);\n\n  return (\n    <>\n      {plan && (\n        <>\n          <CardBody>\n            <RoutedTabs tabsArray={tabsArray} />\n            <div style={{ padding: '1rem' }}>\n              <DescriptionList isHorizontal columnModifier={{ lg: '3Col' }}>\n                {Object.keys(labelsAndValues).map(\n                  (key, i) =>\n                    labelsAndValues[key] !== undefined && (\n                      <DescriptionListGroup key={i}>\n                        {key === 'Last job status' ? (\n                          <Tooltip\n                            key={'last_job_status_tooltip'}\n                            position={TooltipPosition.top}\n                            content={\n                              automation_status.last_known_day\n                                ? `Status last reported on: ${automation_status.last_known_day}`\n                                : automation_status.last_known_month\n                                ? `Status last reported on: ${automation_status.last_known_month}`\n                                : automation_status.last_known_year\n                                ? `Status last reported on: ${automation_status.last_known_year}`\n                                : `Status last reported on: ${automation_status.last_known_date}`\n                            }\n                          >\n                            <DescriptionListTerm>{key}</DescriptionListTerm>\n                          </Tooltip>\n                        ) : (\n                          <DescriptionListTerm>{key}</DescriptionListTerm>\n                        )}\n                        <DescriptionListDescription>\n                          {labelsAndValues[key]}\n                        </DescriptionListDescription>\n                      </DescriptionListGroup>\n                    )\n                )}\n              </DescriptionList>\n              {tasks.length > 0 && (\n                <DescriptionList>\n                  <Divider component=\"div\" />\n                  <DescriptionListGroup key={tasks}>\n                    <DescriptionListTerm>Tasks</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      <List component=\"ol\" type=\"1\">\n                        {tasks.map(({ id, task }) => (\n                          <ListItem key={id}>{task}</ListItem>\n                        ))}\n                      </List>\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                </DescriptionList>\n              )}\n            </div>\n          </CardBody>\n          {canWrite && (\n            <CardFooter>\n              <CardActionsRow>\n                <Button\n                  key=\"edit-plan-button\"\n                  variant=\"primary\"\n                  aria-label=\"Edit plan\"\n                  onClick={() => {\n                    navigate(\n                      createUrl(`${pathname.split('/details')[0]}/edit`)\n                    );\n                  }}\n                >\n                  Edit\n                </Button>\n                <DeleteButton\n                  key={'delete-plan-button'}\n                  name={name}\n                  modalTitle={'Delete Plan'}\n                  onConfirm={() => deletePlans(id)}\n                >\n                  {'Delete'}\n                </DeleteButton>\n              </CardActionsRow>\n              {error && (\n                <AlertModal\n                  isOpen={!!error}\n                  onClose={dismissError}\n                  title={'Error'}\n                  variant=\"error\"\n                >\n                  <ErrorDetail error={error.detail} />\n                </AlertModal>\n              )}\n            </CardFooter>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nDetailsTab.propTypes = {\n  plan: PropTypes.object,\n  tabsArray: PropTypes.array,\n  canWrite: PropTypes.bool.isRequired,\n};\n\nexport default DetailsTab;\n","import React, { FunctionComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardTitle, Title } from '@patternfly/react-core';\nimport currencyFormatter from '../../../../../Utilities/currencyFormatter';\nimport hoursFormatter from '../../../../../Utilities/hoursFormatter';\ninterface Props {\n  value?: number;\n  isMoney?: boolean;\n}\n\nconst TotalSavings: FunctionComponent<Props> = ({\n  value = 0,\n  isMoney = true,\n}) => (\n  <Card isPlain>\n    <CardTitle style={{ paddingBottom: '0' }}>Total savings</CardTitle>\n    <CardBody>\n      <Title\n        headingLevel=\"h3\"\n        size=\"4xl\"\n        style={{\n          color: isMoney ? 'var(--pf-global--success-color--200)' : '#0063CF',\n        }}\n      >\n        {isMoney ? `${currencyFormatter(value)}` : `${hoursFormatter(value)}`}\n      </Title>\n    </CardBody>\n  </Card>\n);\n\nTotalSavings.propTypes = {\n  value: PropTypes.number,\n  isMoney: PropTypes.bool,\n};\n\nexport default TotalSavings;\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  CodeBlock,\n  CodeBlockCode,\n  Modal,\n  ModalVariant,\n} from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\n\nconst CostsText: FunctionComponent<Record<string, never>> = () => (\n  <>\n    <p>\n      <strong>Cost</strong>\n    </p>\n    <p>\n      The cost includes the hours spent in implementation, deployment, training\n      and other expenditures for creating, maintaining and running the\n      automation. These hours (cost of investment) are usually higher at the\n      onset, and will be greatly reduced once the automation has been created\n      and only maintenance is required.\n    </p>\n    <br />\n\n    <p>\n      For the initial period and the first year, we assume approximately 10\n      hours spent on each host, as well as some buffer time and a 40% risk\n      adjustment to account for unforeseen situations.\n    </p>\n    <br />\n\n    <p>\n      For the next two years after the first year, we assume 4 hours spent on\n      each host, as well as a 40% risk adjustment to account for unforeseen\n      situations.\n    </p>\n    <br />\n\n    <p>The formula used to calculate cost for the initial period and year 1:</p>\n    <CodeBlock>\n      <CodeBlockCode>\n        {`C1 = (time for a manual run on one host in hours * 10) + buffer time\\nC2 = C1 * 40% risk adjustment\\ninitial cost = (C1 + C2) * (cost per hour in USD if applicable, based on display)\\nyear 1 cost = (C1 + C2) * (cost per hour in USD if applicable, based on display)`}\n      </CodeBlockCode>\n    </CodeBlock>\n    <br />\n\n    <p>The formula used to calculate cost for years 2 and 3:</p>\n    <CodeBlock>\n      <CodeBlockCode>{`C1 = (time for a manual run on one host in hours * 4)\\nC2 = C1 * 40% risk adjustment\\nyear 2 cost = (C1 + C2) * (cost per hour in USD if applicable, based on display)\\nyear 3 cost = (C1 + C2) * (cost per hour in USD if applicable, based on display)`}</CodeBlockCode>\n    </CodeBlock>\n  </>\n);\n\nconst SavingsText: FunctionComponent<Record<string, never>> = () => (\n  <>\n    <p>\n      <strong>Savings</strong>\n    </p>\n    <p>\n      The savings indicates the time and money saved as a result of automating\n      the plan.\n    </p>\n    <br />\n\n    <p>\n      We assume 50% productivity recapture to account for the productivity that\n      is usually gained by repeated manual implementation of a task over a\n      period of time. We also add a -5% risk adjustment for unforeseen\n      situations that might arise and need to be handled. We also assume a 15%\n      year over year growth in savings.\n    </p>\n    <br />\n\n    <p>\n      Money savings for the initial period is 0, so there is no formula\n      necessary.\n    </p>\n    <br />\n\n    <p>The formula used to calculate savings for year 0:</p>\n    <CodeBlock>\n      <CodeBlockCode>{`initial period savings = 0 - initial cost`}</CodeBlockCode>\n    </CodeBlock>\n    <br />\n\n    <p>The formula used for savings for year 1:</p>\n    <CodeBlock>\n      <CodeBlockCode>{`S1 = (number of hosts * (manual time in minutes / 60) * yearly frequency of automation)\\nS2 = S1 * 50% productivity recapture\\nS3 = S2 * 5% risk adjustment * (cost per hour in USD if applicable, based on display)\\nyear 1 savings = S2 - S3 - year 1 cost`}</CodeBlockCode>\n    </CodeBlock>\n    <br />\n\n    <p>The formula used to calculate savings for year 2:</p>\n    <CodeBlock>\n      <CodeBlockCode>{`S1 = year 1 savings * 15% growth\\nyear 2 savings = year 1 savings + S1 - year 2 cost`}</CodeBlockCode>\n    </CodeBlock>\n    <br />\n\n    <p>The formula used to calculate savings for year 3:</p>\n    <CodeBlock>\n      <CodeBlockCode>{`S2 = year 2 savings * 15% growth\\nyear 3 savings = year 2 savings + S2 - year 3 cost`}</CodeBlockCode>\n    </CodeBlock>\n  </>\n);\n\nconst FormulaDescription: FunctionComponent<Record<string, never>> = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <Button\n        variant={ButtonVariant.link}\n        onClick={() => setIsOpen(true)}\n        icon={<InfoCircleIcon />}\n      >\n        Automation formula\n      </Button>\n      <Modal\n        title=\"Automation formula\"\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        variant={ModalVariant.medium}\n        actions={[\n          <Button\n            key=\"cancel\"\n            variant={ButtonVariant.primary}\n            onClick={() => setIsOpen(false)}\n          >\n            Close\n          </Button>,\n        ]}\n      >\n        <p>\n          We use risk-adjusted factors to create the 3-year projection of cost\n          and savings related to automation. While we aim to provide as accurate\n          an account of the cost and savings as possible, actual values may\n          differ in practice. The following information breaks down where we get\n          the data, the risk-adjustment factors we use, the assumptions we make,\n          and the formula used to compute the values as displayed in the chart.\n        </p>\n        <br />\n\n        <CostsText />\n        <br />\n\n        <SavingsText />\n      </Modal>\n    </>\n  );\n};\n\nexport default FormulaDescription;\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  Card,\n  CardActions,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport { SquareFullIcon } from '@patternfly/react-icons';\n\nimport {\n  ChartKind,\n  ChartThemeColor,\n  ChartType,\n  ChartTopLevelType,\n  ChartSchemaElement,\n  ChartLabelFormatFunction,\n} from '@ansible/react-json-chart-builder';\n\nimport RoutedTabs from '../../../../Components/RoutedTabs';\n\nimport TotalSavings from './TotalSavings';\nimport FormulaDescription from './FormulaDescription';\nimport currencyFormatter from '../../../../Utilities/currencyFormatter';\nimport hoursFormatter from '../../../../Utilities/hoursFormatter';\nimport Chart from '../../../../Components/Chart';\nimport { ApiReturnType } from '../../../../Components/Chart/types';\n\n// This should model the return type somewhere next to the Api.js where the call is made.\n// This is just a basic mockup of the exact data for TS to work.\ninterface Data {\n  name: string;\n  projections: {\n    series_stats: {\n      year: string;\n      cumulative_time_net_benefits: number;\n      total_hours_saved: number;\n      total_hours_spent_risk_adjusted: number;\n      cumulative_net_benefits: number;\n      total_benefits: number;\n      total_costs: number;\n    }[];\n    monetary_stats: {\n      net_preset_value: number;\n    };\n  };\n}\n\nconst dataConversion = (data: Data): Data => {\n  const yearConversion: Record<string, string> = {\n    initial: 'Initial',\n    year1: 'Year 1',\n    year2: 'Year 2',\n    year3: 'Year 3',\n  };\n\n  const seriesStats = data.projections.series_stats.map((item) => ({\n    ...item,\n    year: yearConversion[item.year],\n    total_costs: item.total_costs * -1,\n    total_hours_spent_risk_adjusted: item.total_hours_spent_risk_adjusted * -1,\n  }));\n\n  return {\n    ...data,\n    projections: { ...data.projections, series_stats: seriesStats },\n  };\n};\n\ninterface Props {\n  tabsArray: {\n    id: number;\n    link: string;\n    name: React.ReactNode;\n  }[];\n  plan: Data;\n}\n\nconst getChartData = (data: Data): ApiReturnType => {\n  return {\n    items: data.projections.series_stats,\n    meta: {\n      legend: [],\n      count: 0,\n    },\n  };\n};\n\nconst constants = (isMoney: boolean) => ({\n  cost: {\n    key: isMoney ? 'total_costs' : 'total_hours_spent_risk_adjusted',\n    color: '#8B8D8F',\n  },\n  benefit: {\n    key: isMoney ? 'total_benefits' : 'total_hours_saved',\n    color: isMoney ? 'var(--pf-global--success-color--100)' : '#0063CF',\n  },\n  net: {\n    key: isMoney ? 'cumulative_net_benefits' : 'cumulative_time_net_benefits',\n    color: '#EE7A00',\n  },\n});\n\nconst StatisticsTab: FunctionComponent<Props> = ({ tabsArray, plan }) => {\n  const statsPlan = dataConversion(plan);\n\n  const [isMoney, setIsMoney] = useState(true);\n\n  const customTooltipFormatting: ChartLabelFormatFunction = ({ datum }) =>\n    isMoney ? currencyFormatter(+datum.y) : hoursFormatter(+datum.y);\n\n  const computeTotalSavings = (d: Data): number =>\n    isMoney\n      ? d.projections.series_stats[3].cumulative_net_benefits\n      : d.projections.series_stats[3].cumulative_time_net_benefits;\n\n  const chartSchema: ChartSchemaElement[] = [\n    {\n      id: 1000,\n      kind: ChartKind.wrapper,\n      type: ChartTopLevelType.chart,\n      parent: null,\n      props: {\n        height: 600,\n        domainPadding: {\n          x: 100,\n        },\n        padding: {\n          bottom: 60,\n          left: 80,\n        },\n        themeColor: ChartThemeColor.gray,\n      },\n      tooltip: {\n        cursor: true,\n        stickToAxis: 'x',\n        mouseFollow: true,\n        legendTooltip: {\n          legendData: [\n            {\n              childName: constants(isMoney).benefit.key,\n              name: 'Savings',\n              symbol: {\n                fill: constants(isMoney).benefit.color,\n              },\n            },\n            {\n              childName: constants(isMoney).cost.key,\n              name: 'Costs',\n              symbol: {\n                fill: constants(isMoney).cost.color,\n              },\n            },\n            {\n              childName: constants(isMoney).net.key,\n              name: 'Cumulative savings',\n              symbol: {\n                fill: constants(isMoney).net.color,\n              },\n            },\n          ],\n          titleProperyForLegend: 'year',\n        },\n        labelFormat: 'customTooltipFormatting',\n      },\n      xAxis: {\n        label: 'Time',\n      },\n      yAxis: {\n        label: isMoney ? 'Money Saved' : 'Hours Saved',\n        tickFormat: 'formatNumberAsK',\n        style: {\n          grid: { stroke: '#D2D2D2' },\n          axisLabel: { padding: 60 },\n        },\n      },\n    },\n    {\n      id: 1001,\n      kind: ChartKind.stack,\n      parent: 1000,\n      props: {},\n    },\n    {\n      id: 1102,\n      kind: ChartKind.simple,\n      type: ChartType.bar,\n      name: constants(isMoney).benefit.key,\n      parent: 1001,\n      props: {\n        x: 'year',\n        y: constants(isMoney).benefit.key,\n        barRatio: 0.8,\n        barWidth: 0,\n        style: {\n          data: {\n            fill: constants(isMoney).benefit.color,\n            width: 120,\n          },\n        },\n      },\n      tooltip: {\n        labelName: '',\n      },\n    },\n    {\n      id: 1101,\n      kind: ChartKind.simple,\n      type: ChartType.bar,\n      name: constants(isMoney).cost.key,\n      parent: 1001,\n      props: {\n        x: 'year',\n        y: constants(isMoney).cost.key,\n        barRatio: 0.8,\n        barWidth: 0,\n        style: {\n          data: {\n            fill: constants(isMoney).cost.color,\n            width: 120,\n          },\n        },\n      },\n      tooltip: {\n        labelName: '',\n      },\n    },\n    {\n      id: 1002,\n      kind: ChartKind.simple,\n      type: ChartType.line,\n      name: constants(isMoney).net.key,\n      parent: 1000,\n      props: {\n        x: 'year',\n        y: constants(isMoney).net.key,\n        style: {\n          data: {\n            stroke: constants(isMoney).net.color,\n            strokeWidth: 5,\n          },\n        },\n      },\n      tooltip: {\n        labelName: '',\n      },\n    },\n  ];\n\n  const renderLeft = () => (\n    <Card isPlain>\n      <CardHeader>\n        <CardActions>\n          <ToggleGroup aria-label=\"toggleButton\">\n            <ToggleGroupItem\n              text=\"Money\"\n              buttonId=\"money\"\n              isSelected={isMoney}\n              onChange={() => setIsMoney(true)}\n            />\n            <ToggleGroupItem\n              text=\"Time\"\n              buttonId=\"time\"\n              isSelected={!isMoney}\n              onChange={() => setIsMoney(false)}\n            />\n          </ToggleGroup>\n        </CardActions>\n        <CardTitle>{statsPlan.name}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <Chart\n          schema={chartSchema}\n          data={getChartData(statsPlan)}\n          specificFunctions={{\n            labelFormat: {\n              customTooltipFormatting,\n            },\n          }}\n        />\n      </CardBody>\n    </Card>\n  );\n\n  const renderRight = () => (\n    <>\n      <TotalSavings value={computeTotalSavings(statsPlan)} isMoney={isMoney} />\n      <Card isPlain>\n        <CardBody>\n          <List isPlain>\n            <ListItem\n              icon={<SquareFullIcon color={constants(isMoney).benefit.color} />}\n            >\n              Savings from automating this plan\n            </ListItem>\n            <ListItem\n              icon={<SquareFullIcon color={constants(isMoney).cost.color} />}\n            >\n              Costs from creating, maintaining and running the automation\n            </ListItem>\n            <ListItem\n              icon={<SquareFullIcon color={constants(isMoney).net.color} />}\n            >\n              Cumulative savings over time\n            </ListItem>\n          </List>\n        </CardBody>\n      </Card>\n      <FormulaDescription />\n    </>\n  );\n\n  return (\n    <Card>\n      <RoutedTabs tabsArray={tabsArray} />\n      <Grid>\n        <GridItem span={9}>{renderLeft()}</GridItem>\n        <GridItem span={3}>{renderRight()}</GridItem>\n      </Grid>\n    </Card>\n  );\n};\n\nexport default StatisticsTab;\n","import React, { useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { readPlanOptions } from '../../../Api/';\nimport { paths } from '../index';\n\nimport Form from '../Shared/Form';\nimport useRequest from '../../../Utilities/useRequest';\nimport { createUrl } from '../../../QueryParams/';\n\nconst Edit = ({ data }) => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const {\n    result: options,\n    isSuccess,\n    request: fetchPlanOptions,\n  } = useRequest(readPlanOptions, {\n    meta: {\n      rbac: {\n        perms: {},\n      },\n    },\n  });\n\n  const canWrite =\n    options.meta.rbac.perms?.write === true ||\n    options.meta.rbac.perms?.all === true;\n\n  useEffect(() => {\n    fetchPlanOptions({});\n  }, []);\n\n  useEffect(() => {\n    if (isSuccess && !canWrite) navigate(createUrl(paths.getDetails(id)));\n  }, [canWrite]);\n\n  const renderContent = () => {\n    if (!isSuccess) return null;\n    return <Form title=\"Edit plan\" options={options} data={data} />;\n  };\n\n  return renderContent();\n};\n\nEdit.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default Edit;\n","import { Paths } from '../../paths';\n\nexport const paths = {\n  getDetails: (id: number): string => `${Paths.savingsPlanner}/${id}`,\n};\n","import Details from './Details';\n\nexport default Details;\n","import React, { useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { CaretLeftIcon } from '@patternfly/react-icons';\nimport { Card, PageSection } from '@patternfly/react-core';\n\nimport DetailsTab from './DetailsTab';\nimport StatisticsTab from './StatisticsTab';\nimport ApiErrorState from '../../../Components/ApiStatus/ApiErrorState';\n\nimport { PageHeader } from '@ansible/ansible-ui-framework';\n\nimport { readPlan } from '../../../Api/';\n\nimport SavingsPlanEdit from '../Edit';\nimport useRequest from '../../../Utilities/useRequest';\n\nconst Details = () => {\n  const { id } = useParams();\n  const location = useLocation();\n\n  const queryParams = { id: [id] };\n\n  let pageTitle = 'Details';\n  if (location.pathname.indexOf('/statistics') !== -1) {\n    pageTitle = 'Statistics';\n  } else if (location.pathname.indexOf('/edit') !== -1) {\n    pageTitle = 'Edit plan';\n  }\n\n  const {\n    result: { rbac, plan },\n    isSuccess: dataSuccess,\n    error: dataError,\n    request: fetchEndpoints,\n  } = useRequest(readPlan, {\n    plan: {},\n    rbac: {\n      perms: {},\n    },\n  });\n  useEffect(() => {\n    if (!location.pathname.includes('/edit')) fetchEndpoints(id);\n  }, [location]);\n\n  useEffect(() => {\n    fetchEndpoints(id);\n  }, [id]);\n\n  const canWrite =\n    dataSuccess && (rbac.perms?.write === true || rbac.perms?.all === true);\n\n  const tabsArray = [\n    {\n      id: 0,\n      name: (\n        <>\n          <CaretLeftIcon />\n          {'Back to Plans'}\n        </>\n      ),\n      link: '../savings-planner',\n    },\n    { id: 1, name: 'Details', link: `../savings-planner/${id}` },\n    {\n      id: 2,\n      name: 'Statistics',\n      link: `../savings-planner/${id}/statistics`,\n    },\n  ];\n\n  const breadcrumbsItems = dataSuccess\n    ? [\n        {\n          label: 'Savings Planner',\n          to: 'ansible/automation-analytics/savings-planner',\n        },\n        {\n          label: plan.name,\n          to: `ansible/automation-analytics/savings-planner/${id}`,\n        },\n      ]\n    : [];\n\n  return (\n    <>\n      {dataError && <ApiErrorState message={dataError.error} />}\n      {dataSuccess && (\n        <>\n          <PageHeader breadcrumbs={breadcrumbsItems} title={pageTitle} />\n          <PageSection>\n            <Card>\n              {location.pathname.includes('edit') && (\n                <SavingsPlanEdit data={plan} />\n              )}\n              {location.pathname.includes('statistics') && (\n                <StatisticsTab\n                  tabsArray={tabsArray}\n                  plan={plan}\n                  queryParams={queryParams}\n                />\n              )}\n              {!location.pathname.includes('statistics') &&\n                !location.pathname.includes('edit') && (\n                  <DetailsTab\n                    plan={plan}\n                    tabsArray={tabsArray}\n                    canWrite={canWrite}\n                  />\n                )}\n            </Card>\n          </PageSection>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Details;\n","export async function getRelatedResourceDeleteCounts(requests) {\n  const results = {};\n  let error = null;\n  let hasCount = false;\n\n  try {\n    await Promise.all(\n      requests.map(async ({ request, label }) => {\n        const {\n          items: { count },\n        } = await request();\n        if (count > 0) {\n          results[label] = count;\n          hasCount = true;\n        }\n      })\n    );\n  } catch (err) {\n    error = err;\n  }\n\n  return {\n    results: hasCount && results,\n    error,\n  };\n}\n","import { ChartLegendEntry } from '@ansible/react-json-chart-builder';\n\nexport enum ApiType {\n  nonGrouped = 'nonGrouped',\n  grouped = 'grouped',\n}\n\nexport interface NonGroupedApi {\n  type?: ApiType.nonGrouped;\n  items: Record<string, string | number>[];\n  meta: {\n    legend: ChartLegendEntry[];\n    count: number;\n  };\n}\n\nexport interface GroupedApi {\n  type?: ApiType.grouped;\n  dates: {\n    date: string;\n    items: Record<string, string | number>[];\n  }[];\n  meta: {\n    legend: ChartLegendEntry[];\n    count: number;\n  };\n}\n\nexport type ApiReturnType = NonGroupedApi | GroupedApi;\n","import { ChartData, ChartDataSerie } from '@ansible/react-json-chart-builder';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ApiReturnType, ApiType, GroupedApi } from './types';\n\nexport const convertGroupedByData = (data: GroupedApi): ChartDataSerie[] => {\n  const { dates } = data;\n  const items: ChartDataSerie[] = [];\n  dates.forEach((el) => {\n    // Add items to the correct serie\n    el.items.forEach((item, idx) => {\n      if (!items[idx]) {\n        items[idx] = {\n          serie: [],\n          hidden: false,\n          name: uuidv4(),\n        };\n      }\n      items[idx].serie.push({\n        created_date: el.date,\n        ...item,\n      });\n    });\n  });\n  return items;\n};\n\nexport const convertApiToData = (result: ApiReturnType): ChartData => {\n  const data: ChartData = {\n    series: [],\n    legend: [],\n  };\n\n  if ('dates' in result) {\n    result.type = ApiType.grouped;\n  } else {\n    result.type = ApiType.nonGrouped;\n  }\n\n  switch (result.type) {\n    case ApiType.grouped:\n      data.series = convertGroupedByData(result);\n      break;\n    case ApiType.nonGrouped:\n      data.series = [\n        {\n          serie: result.items || result.meta.legend,\n          hidden: false,\n          name: uuidv4(),\n        },\n      ];\n      break;\n  }\n\n  if (result.meta?.legend) {\n    data.legend = result.meta.legend.map((item) => {\n      const s = data.series.find(({ serie }) => {\n        return serie.find(({ id: serieId }) => serieId === item.id);\n      });\n      return {\n        ...item,\n        childName: s && s.name ? s.name : '',\n      };\n    });\n  }\n\n  return data;\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport ChartBuilder, {\n  ChartData,\n  ChartFunctions,\n  ChartSchemaElement,\n  functions,\n} from '@ansible/react-json-chart-builder';\nimport { useQueryParams } from '../../QueryParams';\nimport { convertApiToData } from './convertApi';\nimport { ApiReturnType } from './types';\nimport { ChartDataSerie } from '@ansible/react-json-chart-builder/dist/cjs';\n\ninterface Props {\n  schema: ChartSchemaElement[];\n  data: ApiReturnType;\n  specificFunctions?: ChartFunctions;\n  namespace?: string;\n}\n\ninterface Props {\n  x?: number;\n  y?: number;\n  [key: string]: any;\n}\n\nconst CustomPoint: FC<Props> = ({ x, y, disableInlineStyles, ...props }) => {\n  return x != undefined && y != undefined ? (\n    <ExclamationCircleIcon\n      x={x - 8}\n      y={y - 8}\n      {...props}\n      {...props.events}\n    ></ExclamationCircleIcon>\n  ) : null;\n};\n\nconst customFunctions = (specificFunctions?: ChartFunctions) => ({\n  ...functions,\n  axisFormat: {\n    ...functions.axisFormat,\n    formatAsYear: (tick: string | number) =>\n      Intl.DateTimeFormat('en', { year: 'numeric' }).format(new Date(tick)),\n    formatAsMonth: (tick: string | number) =>\n      Intl.DateTimeFormat('en', { month: 'long' }).format(new Date(tick)),\n    ...specificFunctions?.axisFormat,\n  },\n  labelFormat: {\n    ...functions.labelFormat,\n    ...specificFunctions?.labelFormat,\n  },\n\n  onClick: {\n    ...functions.onClick,\n    ...specificFunctions?.onClick,\n  },\n  dataComponent: {\n    scatterPlot: CustomPoint,\n  },\n});\n\nconst applyHiddenFilter = (\n  chartData: ChartData,\n  chartSeriesHidden: string[] = []\n): ChartData => ({\n  ...chartData,\n  series: chartData.series.map((series: ChartDataSerie) => ({\n    ...series,\n    hidden:\n      (!!series.serie[0].id || !!series.serie[0].host_id) &&\n      !!chartSeriesHidden.includes(\n        // eslint-disable-next-line no-prototype-builtins\n        series.serie[0].hasOwnProperty('host_id').toString() ||\n          // eslint-disable-next-line no-prototype-builtins\n          series.serie[0].hasOwnProperty('id').toString()\n      ),\n  })),\n});\n\nconst Chart: FC<Props> = ({\n  schema,\n  data,\n  specificFunctions,\n  namespace = 'settings',\n}) => {\n  const {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    queryParams: { chartSeriesHiddenProps },\n    dispatch,\n  } = useQueryParams(\n    {\n      chartSeriesHiddenProps: [],\n    },\n    namespace\n  );\n\n  const [chartData, setChartData] = useState<ChartData>({\n    series: [],\n    legend: [],\n  });\n\n  const setChartDataHook = (newChartData: ChartData) => {\n    dispatch({\n      type: 'SET_CHART_SERIES_HIDDEN_PROPS',\n      value: newChartData.series.map((line) => [line.serie[0].id, line.hidden]),\n    });\n\n    setChartData(newChartData);\n  };\n\n  useEffect(() => {\n    setChartData(\n      applyHiddenFilter(\n        convertApiToData(data),\n        chartSeriesHiddenProps as string[]\n      )\n    );\n  }, [data]);\n  return (\n    <ChartBuilder\n      schema={schema}\n      functions={{\n        ...customFunctions(specificFunctions),\n      }}\n      dataState={[chartData, setChartDataHook]}\n    />\n  );\n};\n\nexport default Chart;\n","import React, { FunctionComponent } from 'react';\nimport { Label } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ClockIcon,\n  SyncAltIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\n\nimport { capitalize } from '../Utilities/helpers';\n\ninterface Props {\n  status:\n    | 'successful'\n    | 'failed'\n    | 'running'\n    | 'pending'\n    | 'error'\n    | 'canceled'\n    | 'new'\n    | 'waiting';\n}\n\nconst JobStatus: FunctionComponent<Props> = ({ status }) => {\n  const getColor = () => {\n    switch (status) {\n      case 'successful':\n        return 'green';\n      case 'failed':\n      case 'error':\n        return 'red';\n      case 'running':\n      case 'pending':\n        return 'blue';\n      case 'canceled':\n        return 'orange';\n      // case new, waiting\n      default:\n        return 'grey';\n    }\n  };\n\n  const getIcon = () => {\n    switch (status) {\n      case 'successful':\n        return <CheckCircleIcon />;\n      case 'failed':\n      case 'error':\n        return <ExclamationCircleIcon />;\n      case 'running':\n        return <SyncAltIcon />;\n      case 'canceled':\n        return <ExclamationTriangleIcon />;\n      // case new, waiting, pending\n      default:\n        return <ClockIcon />;\n    }\n  };\n\n  return (\n    <Label\n      variant=\"outline\"\n      color={getColor()}\n      icon={getIcon()}\n      style={{ marginRight: '0.5rem', marginBottom: '0.5rem' }}\n    >\n      {capitalize(status)}\n    </Label>\n  );\n};\n\nexport default JobStatus;\n","const currencyFormatter = (n: number): string => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n\n  return formatter.format(n); /* $2,500.00 */\n};\nexport default currencyFormatter;\n","const hoursFormatter = (n: number): string =>\n  n ? `${(+n.toFixed(0)).toLocaleString()} hours` /* 2,500 hours */ : '0 hours';\n\nexport default hoursFormatter;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","CardActionsWrapper","div","children","CardActions","WarningMessage","styled","Alert","_templateObject","_taggedTemplateLiteral","Label","span","_templateObject2","DeleteButton","_ref","onConfirm","_ref$modalTitle","modalTitle","_ref$name","_ref$variant","variant","_ref$isDisabled","isDisabled","_ref$ouiaId","ouiaId","_ref$deleteMessage","deleteMessage","_ref$deleteDetailsReq","deleteDetailsRequests","_ref$disabledTooltip","disabledTooltip","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","_useState3","_useState4","deleteMessageError","setDeleteMessageError","_useState5","_useState6","deleteDetails","setDeleteDetails","_useState7","_useState8","isLoading","setIsLoading","toggleModal","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","isModalOpen","_yield$getRelatedReso","results","error","_context","prev","next","length","getRelatedResourceDeleteCounts","sent","stop","_x","apply","arguments","React","AlertModal","title","onClose","ErrorDetail","detail","Tooltip","content","position","Button","spinnerAriaValueText","undefined","onClick","actions","key","Object","values","isInline","entries","map","_ref3","_ref4","value","concat","Badge","propTypes","PropTypes","isRequired","RoutedTabs","tabsArray","_ref$defaultTabId","defaultTabId","navigate","useNavigate","location","useLocation","Tabs","activeKey","_tabsArray$find","find","tab","pathname","includes","toLowerCase","id","getActiveTabId","onSelect","_","eventKey","match","link","Tab","TabTitleText","role","arrayOf","shape","number","string","oneOfType","node","CardBody","PFCardBody","Divider","PFDivider","DetailsTab","plan","canWrite","automation_status","category","description","frequency_period","hosts","manual_time","modified","tasks","template_details","template_id","_useRequest","useRequest","readPlanOptions","options","result","optionsSuccess","isSuccess","fetchOptions","request","useEffect","renderOptionsBasedValue","val","_fromOptionsValue$val","fromOptionsValue","jobStatusLabel","item","index","JobStatus","status","color","icon","ExclamationCircleIcon","style","marginRight","marginBottom","labelsAndValues","Name","Description","Frequency","Template","templateId","initialQueryParams","_defineProperty","DEFAULT_NAMESPACE","_objectSpread","jobExplorer","defaultParams","quick_date_range","createUrl","Paths","replace","showTemplate","Array","isArray","formatDateTime","_useRequest2","props","deletePlan","savingsPlanner","deletePlans","deleteError","_useDismissableError","useDismissableError","dismissError","padding","DescriptionList","isHorizontal","columnModifier","lg","keys","i","DescriptionListGroup","TooltipPosition","top","last_known_day","last_known_month","last_known_year","last_known_date","DescriptionListTerm","DescriptionListDescription","component","List","type","task","ListItem","CardFooter","CardActionsRow","split","TotalSavings","isMoney","Card","isPlain","CardTitle","paddingBottom","Title","headingLevel","size","currencyFormatter","hoursFormatter","CostsText","CodeBlock","CodeBlockCode","SavingsText","Modal","medium","primary","cost","benefit","net","statsPlan","data","yearConversion","initial","year1","year2","year3","seriesStats","projections","series_stats","year","total_costs","total_hours_spent_risk_adjusted","dataConversion","setIsMoney","chartSchema","kind","wrapper","chart","parent","domainPadding","x","bottom","left","themeColor","gray","tooltip","cursor","stickToAxis","mouseFollow","legendTooltip","legendData","childName","symbol","fill","titleProperyForLegend","labelFormat","xAxis","label","yAxis","tickFormat","grid","stroke","axisLabel","stack","simple","bar","y","barRatio","barWidth","labelName","line","strokeWidth","Grid","GridItem","CardHeader","ToggleGroup","ToggleGroupItem","text","buttonId","isSelected","onChange","Chart","schema","items","meta","legend","count","specificFunctions","customTooltipFormatting","datum","d","cumulative_net_benefits","cumulative_time_net_benefits","Edit","_options$meta$rbac$pe","_options$meta$rbac$pe2","useParams","rbac","perms","fetchPlanOptions","write","all","paths","Form","_rbac$perms","_rbac$perms2","queryParams","pageTitle","indexOf","readPlan","_useRequest$result","dataSuccess","dataError","fetchEndpoints","CaretLeftIcon","breadcrumbsItems","to","ApiErrorState","message","PageHeader","breadcrumbs","PageSection","SavingsPlanEdit","StatisticsTab","_getRelatedResourceDeleteCounts","_callee2","requests","hasCount","_context2","Promise","_yield$request","_x2","t0","abrupt","ApiType","CustomPoint","disableInlineStyles","events","customFunctions","axisFormat","formatAsYear","tick","Intl","DateTimeFormat","format","Date","formatAsMonth","month","dataComponent","scatterPlot","namespace","chartSeriesHiddenProps","dispatch","chartData","setChartData","series","chartSeriesHidden","hidden","serie","host_id","hasOwnProperty","toString","applyHiddenFilter","grouped","nonGrouped","dates","forEach","el","idx","push","created_date","date","convertGroupedByData","s","serieId","convertApiToData","functions","dataState","newChartData","getColor","getIcon","n","NumberFormat","currency","toFixed","toLocaleString"],"sourceRoot":""}