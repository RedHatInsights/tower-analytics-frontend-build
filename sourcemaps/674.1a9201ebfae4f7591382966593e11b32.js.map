{"version":3,"file":"js/674.9750c4d111a62dc7527d.js","mappings":"sZA2BMA,EAAgB,CACpBC,GAAIC,EAAAA,yBAAAA,MACJC,OAAQD,EAAAA,yBAAAA,MACRE,YAAaC,EAAAA,yBAAAA,MACbC,QAASC,EAAAA,wBAAAA,MACTC,OAAQC,EAAAA,uBAAAA,MACRC,QAASC,EAAAA,wBAAAA,OAsELC,EAAqB,SAAC,GAAY,kBAAVC,EAAU,EAAVA,IAC5B,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAKMC,EAAgBJ,EAClB,CACEZ,GAAE,UAAEY,MAAAA,OAAF,EAAEA,EAAKK,qBAAP,QAAwB,EAC1BR,QAAO,UAAEG,MAAAA,OAAF,EAAEA,EAAKM,0BAAP,QAA6B,EACpCb,QAAO,UAAEO,MAAAA,OAAF,EAAEA,EAAKO,0BAAP,QAA6B,EACpCZ,OAAM,UAAEK,MAAAA,OAAF,EAAEA,EAAKQ,yBAAP,QAA4B,EAClCjB,YAAW,UAAES,MAAAA,OAAF,EAAEA,EAAKS,8BAAP,QAAiC,GAE9C,KAEEC,EAAe,CACnB,CACEC,MAAO,UACPC,MAAOZ,EAAIa,SAAUC,EAAAA,EAAAA,IAAed,EAAIa,SAAW,eAErD,CACEF,MAAO,UACPC,MAAOZ,EAAIa,SAAUC,EAAAA,EAAAA,IAAed,EAAIe,SAAW,eAErD,CACEJ,MAAO,WACPC,MAAOZ,EAAIa,SAAUC,EAAAA,EAAAA,IAAed,EAAIgB,UAAY,eAEtD,CACEL,MAAO,QACPC,MAAK,UAAEZ,EAAIiB,uBAAN,QAAyB,IAIlC,OACE,oCACE,kBAAC,EAAAC,GAAD,KACE,kBAAC,EAAAC,GAAD,CACEC,OAAQ,CACNC,SAAUrB,EAAIsB,GAAGA,GACjBC,WAAYrB,EACZsB,SAxCc,WACtBrB,GAAaD,OA0CT,kBAAC,EAAAiB,GAAD,KACE,uBACEM,KAAMzB,EAAIsB,GAAGI,YADf,UAEK1B,EAAIsB,GAAGA,GAFZ,cAEoBtB,EAAIsB,GAAGK,iBAE7B,kBAAC,EAAAR,GAAD,KACE,kBAACS,EAAA,EAAD,CAAWC,OAAQ7B,MAAAA,OAAF,EAAEA,EAAK6B,UAE1B,kBAAC,EAAAV,GAAD,KAAKnB,MAAAA,OAAL,EAAKA,EAAK8B,cACV,kBAAC,EAAAX,GAAD,KAAKnB,MAAAA,OAAL,EAAKA,EAAK+B,UACV,kBAAC,EAAAZ,GAAD,MAAKa,EAAAA,EAAAA,IAAchC,MAAAA,OAAD,EAACA,EAAKiC,YAE1B,kBAAC,EAAAf,GAAD,CAAIK,WAAYrB,GACd,kBAAC,EAAAiB,GAAD,CAAIe,QAAS,GACX,kBAAC,EAAAC,qBAAD,KACE,kBAAC,EAAAC,KAAD,KACE,kBAAC,EAAAC,SAAD,KACE,gDAEF,kBAAC,EAAAA,SAAD,CAAUC,MAAO,CAAEC,QAAS,eAC1B,yCACC,KAFH,UAGGvC,MAAAA,OAHH,EAGGA,EAAKwC,kBAHR,QAGsB,IAGxB,kBAACC,EAAA,EAAD,CACErC,cAAeA,EACfjB,cAAeA,EACfuD,aAAW,IA1HG,SAACC,GAC3B,OAAgC1C,EAAAA,EAAAA,WAAS,GAAzC,eAAO2C,EAAP,KAAiBC,EAAjB,KAEA,GAAoB,MAAhBF,EACF,OACE,oCACE,2BACE,qDAGF,kBAAC,EAAAG,KAAD,CAAMC,WAAS,GACZJ,EACEK,MAAM,EAAGJ,EAAWD,EAAaM,OAAS,GAC1CC,KAAI,SAACC,EAAMC,GAAQ,UACZhD,EAAgB,CACpBd,OAAM,UAAE6D,MAAAA,OAAF,EAAEA,EAAME,yBAAR,QAA6B,EACnC1D,OAAM,UAAEwD,MAAAA,OAAF,EAAEA,EAAM3C,yBAAR,QAA6B,EACnCjB,YAAW,UAAE4D,MAAAA,OAAF,EAAEA,EAAM1C,8BAAR,QAAkC,GAG/C,OACE,kBAAC,EAAA6C,SAAD,CAAUC,GAAI,EAAGC,GAAI,GAAIC,IAAG,sBAAiBL,IAC3C,kBAAC,EAAAhB,KAAD,KACE,kBAAC,EAAAC,SAAD,KACE,8CADF,IAC+Bc,MAAAA,OAD/B,EAC+BA,EAAMO,WAGrC,kBAAC,EAAArB,SAAD,CAAUC,MAAO,CAAEC,QAAS,eAC1B,gDADF,IACiCY,MAAAA,OADjC,EACiCA,EAAMQ,cAGzC,kBAAClB,EAAA,EAAD,CACErC,cAAeA,EACfjB,cAAeA,EACfuD,aAAW,SAOtBC,EAAaM,OAAS,EA3DN,SAACL,EAAUC,GAClC,OACE,kBAAC,EAAAT,KAAD,CAAMwB,UAAU,cACd,kBAAC,EAAAvB,SAAD,CAAUC,MAAO,CAAEC,QAAS,eAC1B,kBAAC,EAAAsB,OAAD,CACEC,QAAQ,YACRC,QAAS,WACPlB,GAAaD,IAEfoB,UAAW,CAAEzB,QAAS,cAErBK,EAAW,YAAc,eAiDxBqB,CAAiBrB,EAAUC,GAC3B,MAiFCqB,CAAoBlE,EAAImE,mBAEzB,kBAAC,EAAAC,gBAAD,CAAiBC,cAAY,EAACC,eAAgB,CAAEf,GAAI,SACjD7C,EAAawC,KAAI,gBAAGvC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAChB,kBAAC,EAAA2D,qBAAD,CAAsBd,IAAK9C,GACzB,kBAAC,EAAA6D,oBAAD,KAAsB7D,GACtB,kBAAC,EAAA8D,2BAAD,KACG7D,aAYrBb,EAAmB2E,UAAY,CAC7B1E,IAAK2E,IAAAA,OAAAA,YAGP,UCnMA,IAAMC,EAAO,CAAC,UAAW,SAAU,UAAW,eAAgB,QACxDC,EAAe,CAAC,UAAW,SAAU,QAErCC,EAAU,CACd,EAAG,KACH,EAAG,SACH,EAAG,YAGCC,EAAiB,CACrBzD,GAAI,EACJO,OAAQ,EACRI,SAAU,GAGN+C,EAAkB,SAAC,GAA+C,IAA7CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,oBAC5C,GAA8BlF,EAAAA,EAAAA,WAAU,GAAxC,eAAOmF,EAAP,KAAgBC,EAAhB,KACA,GAA8BpF,EAAAA,EAAAA,UAAS,QAAvC,eAAOqF,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,YACJN,MAAAA,OAAA,EAAAA,EAAaO,gBAAgBV,GAC/BM,EAAWN,EAAeG,EAAYO,eACtCF,EACEL,MAAAA,IAAAA,EAAaQ,YACiB,SAA3BR,EAAYQ,YACgB,QAA3BR,EAAYQ,WAEZ,OADAR,EAAYQ,cAIlBL,GAAY,GACZE,EAAW,WAEZ,CAACL,IAEJ,IAAMS,EAAS,SAACC,EAAQxC,EAAKyC,GACvBzC,IAAQgC,IACVC,EAAWjC,GACX+B,EAAoB,CAClBW,KAAM,mBACNlF,MAAO,CAAE6E,aAAcX,EAAQ1B,OAI/ByC,IAAQP,IACVC,EAAWM,GACXV,EAAoB,CAClBW,KAAM,iBACNlF,MAAO,CAAE8E,WAAYG,OAK3B,OACE,kBAAC,EAAAE,gBAAD,CAAiB,aAAW,qBAAqBjC,QAAQ,WACvD,kBAAC,EAAAkC,MAAD,KACE,kBAAC,EAAA9E,GAAD,KACE,kBAAC,EAAA+E,GAAD,MACCrB,EAAK1B,KAAI,SAACgD,EAAM9C,GACf,IAAM+C,EAAStB,EAAauB,SAASF,GACjC,CACEG,KAAM,CACJC,OAAQ,CACNC,MAAOnB,EACPoB,UAAWlB,GAEbK,OAAAA,EACAc,YAAarD,IAGjB,GACJ,OACE,kBAAC,EAAA6C,IAAD,QAAIxC,IAAG,cAASL,IAAW+C,GACxBD,QAMX,kBAAC,EAAAQ,MAAD,KACGzB,EAAK/B,KAAI,SAAClD,GAAD,OACR,kBAAC,EAAD,CAAoBA,IAAKA,EAAKyD,IAAKzD,EAAIsB,GAAGA,WAOpD0D,EAAgBN,UAAY,CAC1BO,KAAMN,IAAAA,MAAAA,WACNO,YAAaP,IAAAA,OAAAA,WACbQ,oBAAqBR,IAAAA,KAAAA,YAGvB,U,eCQA,QApFoB,WAClB,OAKIgC,EAAAA,EAAAA,IAAeC,EAAAA,GAAAA,eAJjB1B,EADF,EACEA,YACA2B,EAFF,EAEEA,kBACAC,EAHF,EAGEA,eACU3B,EAJZ,EAIE4B,SAGF,GAIIC,EAAAA,EAAAA,KACFC,EAAAA,EAAAA,cAAY,kBAAMC,EAAAA,EAAAA,IAAuBhC,KAAc,CAACA,IACxD,IALQiC,EADV,EACEC,OACAC,EAFF,EAEEA,MACSC,EAHX,EAGEC,QAMF,GAKIP,EAAAA,EAAAA,KACFC,EAAAA,EAAAA,cAAY,kBAAMO,EAAAA,EAAAA,IAAgBtC,KAAc,CAACA,IACjD,CAAEuC,MAAO,GAAIC,KAAM,KAPrB,IACEN,OAAiBO,EADnB,EACYF,MAAaC,EADzB,EACyBA,KACZE,EAFb,EAEEC,UACWC,EAHb,EAGEC,UACSC,EAJX,EAIET,QAWF,OALA/B,EAAAA,EAAAA,YAAU,WACR8B,IACAU,MACC,CAAC9C,IAEAmC,EAAc,kBAACY,EAAA,EAAD,CAAeC,QAASb,EAAMA,QAG9C,kBAAC,aAAD,KACE,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,MAAO,kBAE1B,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAAC,KAAD,KACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,IAAD,CACEC,WAAYtB,EACZuB,QAASxD,EACTyD,WAAY7B,EACZ8B,WACE,kBAACC,EAAA,EAAD,CACEC,MAAOpB,MAAAA,OAAF,EAAEA,EAAMoB,MACb3C,OAAQ,CACN4C,OAAQ7D,EAAY6D,MACpBC,QAAS9D,EAAY8D,QAEvBC,cAAepC,EACfqC,WAAS,IAGbC,aAAW,IAEZvB,GAAiB,kBAACwB,EAAA,EAAD,MACjBtB,GAAiBH,EAAK1E,QAAU,GAAK,kBAACoG,EAAA,EAAD,MACrCvB,GAAiBH,EAAK1E,OAAS,GAC9B,kBAAC,EAAD,CACEgC,KAAM0C,EACNzC,YAAaA,EACbC,oBAAqBA,IAGzB,kBAAC0D,EAAA,EAAD,CACEC,MAAOpB,MAAAA,OAAF,EAAEA,EAAMoB,MACb3C,OAAQ,CACN4C,OAAQ7D,EAAY6D,MACpBC,QAAS9D,EAAY8D,QAEvBC,cAAepC,EACf/C,QAASwF,EAAAA,kBAAAA","sources":["webpack:///./src/Containers/JobExplorer/JobExplorerListRow.js","webpack:///./src/Containers/JobExplorer/JobExplorerList.js","webpack:///./src/Containers/JobExplorer/JobExplorer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Tr, Td, ExpandableRowContent } from '@patternfly/react-table';\n\nimport { formatDateTime, formatJobType } from '../../Utilities/helpers';\nimport JobStatus from '../../Components/JobStatus';\nimport Breakdown from '../../Charts/Breakdown';\nimport {\n  global_palette_green_300,\n  global_palette_black_400,\n  global_palette_gold_300,\n  global_palette_red_100,\n  global_palette_blue_300,\n} from '@patternfly/react-tokens';\nimport {\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Button,\n} from '@patternfly/react-core';\n\nconst categoryColor = {\n  ok: global_palette_green_300.value,\n  passed: global_palette_green_300.value,\n  unreachable: global_palette_black_400.value,\n  changed: global_palette_gold_300.value,\n  failed: global_palette_red_100.value,\n  skipped: global_palette_blue_300.value,\n};\n\nconst renderMoreButton = (showMore, setShowMore) => {\n  return (\n    <Flex className=\"pf-u-mb-md\">\n      <FlexItem align={{ default: 'alignRight' }}>\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            setShowMore(!showMore);\n          }}\n          fullWidth={{ default: 'fullWidth' }}\n        >\n          {showMore ? 'Show less' : 'Show more'}\n        </Button>\n      </FlexItem>\n    </Flex>\n  );\n};\n\nconst renderFailedTaskBar = (failed_tasks) => {\n  const [showMore, setShowMore] = useState(false);\n\n  if (failed_tasks != null) {\n    return (\n      <>\n        <p>\n          <strong>Top failed tasks</strong>\n        </p>\n\n        <Grid hasGutter>\n          {failed_tasks\n            .slice(0, showMore ? failed_tasks.length : 2)\n            .map((task, idx) => {\n              const categoryCount = {\n                passed: task?.passed_host_count ?? 0,\n                failed: task?.failed_host_count ?? 0,\n                unreachable: task?.unreachable_host_count ?? 0,\n              };\n\n              return (\n                <GridItem lg={6} md={12} key={`most-failed-${idx}`}>\n                  <Flex>\n                    <FlexItem>\n                      <strong>Task name </strong> {task?.task_name}\n                    </FlexItem>\n\n                    <FlexItem align={{ default: 'alignRight' }}>\n                      <strong>Module name </strong> {task?.module_name}\n                    </FlexItem>\n                  </Flex>\n                  <Breakdown\n                    categoryCount={categoryCount}\n                    categoryColor={categoryColor}\n                    showPercent\n                  />\n                </GridItem>\n              );\n            })}\n        </Grid>\n\n        {failed_tasks.length > 2\n          ? renderMoreButton(showMore, setShowMore)\n          : null}\n      </>\n    );\n  }\n};\n\nconst JobExplorerListRow = ({ job }) => {\n  const [expanded, setExpanded] = useState(false);\n  const handleExpansion = () => {\n    setExpanded(!expanded);\n  };\n\n  const categoryCount = job\n    ? {\n        ok: job?.ok_host_count ?? 0,\n        skipped: job?.skipped_host_count ?? 0,\n        changed: job?.changed_host_count ?? 0,\n        failed: job?.failed_host_count ?? 0,\n        unreachable: job?.unreachable_host_count ?? 0,\n      }\n    : null;\n\n  const expandedInfo = [\n    {\n      label: 'Created',\n      value: job.created ? formatDateTime(job.created) : 'Unavailable',\n    },\n    {\n      label: 'Started',\n      value: job.created ? formatDateTime(job.started) : 'Unavailable',\n    },\n    {\n      label: 'Finished',\n      value: job.created ? formatDateTime(job.finished) : 'Unavailable',\n    },\n    {\n      label: 'Tasks',\n      value: job.host_task_count ?? 0,\n    },\n  ];\n\n  return (\n    <>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex: job.id.id,\n            isExpanded: expanded,\n            onToggle: handleExpansion,\n          }}\n        />\n        <Td>\n          <a\n            href={job.id.tower_link}\n          >{`${job.id.id} - ${job.id.template_name}`}</a>\n        </Td>\n        <Td>\n          <JobStatus status={job?.status} />\n        </Td>\n        <Td>{job?.cluster_name}</Td>\n        <Td>{job?.org_name}</Td>\n        <Td>{formatJobType(job?.job_type)}</Td>\n      </Tr>\n      <Tr isExpanded={expanded}>\n        <Td colSpan={6}>\n          <ExpandableRowContent>\n            <Flex>\n              <FlexItem>\n                <strong>Host status</strong>\n              </FlexItem>\n              <FlexItem align={{ default: 'alignRight' }}>\n                <strong>Hosts</strong>\n                {'  '}\n                {job?.host_count ?? 0}\n              </FlexItem>\n            </Flex>\n            <Breakdown\n              categoryCount={categoryCount}\n              categoryColor={categoryColor}\n              showPercent\n            />\n            {renderFailedTaskBar(job.most_failed_tasks)}\n\n            <DescriptionList isHorizontal columnModifier={{ lg: '3Col' }}>\n              {expandedInfo.map(({ label, value }) => (\n                <DescriptionListGroup key={label}>\n                  <DescriptionListTerm>{label}</DescriptionListTerm>\n                  <DescriptionListDescription>\n                    {value}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n              ))}\n            </DescriptionList>\n          </ExpandableRowContent>\n        </Td>\n      </Tr>\n    </>\n  );\n};\n\nJobExplorerListRow.propTypes = {\n  job: PropTypes.object.isRequired,\n};\n\nexport default JobExplorerListRow;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TableComposable, Thead, Tbody, Tr, Th } from '@patternfly/react-table';\nimport JobExplorerListRow from './JobExplorerListRow';\n\nconst cols = ['Id/Name', 'Status', 'Cluster', 'Organization', 'Type'];\nconst sortableCols = ['Id/Name', 'Status', 'Type'];\n\nconst sortMap = {\n  0: 'id',\n  1: 'status',\n  4: 'job_type',\n};\n\nconst reverseSortMap = {\n  id: 0,\n  status: 1,\n  job_type: 4,\n};\n\nconst JobExplorerList = ({ jobs, queryParams, queryParamsDispatch }) => {\n  const [sortIdx, setSortIdx] = useState(-1);\n  const [sortDir, setSortDir] = useState('none');\n\n  useEffect(() => {\n    if (queryParams?.sort_options in reverseSortMap) {\n      setSortIdx(reverseSortMap[queryParams.sort_options]);\n      setSortDir(\n        queryParams?.sort_order &&\n          (queryParams.sort_order === 'desc' ||\n            queryParams.sort_order === 'asc')\n          ? queryParams.sort_order\n          : 'desc'\n      );\n    } else {\n      setSortIdx(-1);\n      setSortDir('none');\n    }\n  }, [queryParams]);\n\n  const onSort = (_event, idx, dir) => {\n    if (idx !== sortIdx) {\n      setSortIdx(idx);\n      queryParamsDispatch({\n        type: 'SET_SORT_OPTIONS',\n        value: { sort_options: sortMap[idx] },\n      });\n    }\n\n    if (dir !== sortDir) {\n      setSortDir(dir);\n      queryParamsDispatch({\n        type: 'SET_SORT_ORDER',\n        value: { sort_order: dir },\n      });\n    }\n  };\n\n  return (\n    <TableComposable aria-label=\"Job Explorer Table\" variant=\"compact\">\n      <Thead>\n        <Tr>\n          <Th />\n          {cols.map((head, idx) => {\n            const params = sortableCols.includes(head)\n              ? {\n                  sort: {\n                    sortBy: {\n                      index: sortIdx,\n                      direction: sortDir,\n                    },\n                    onSort,\n                    columnIndex: idx,\n                  },\n                }\n              : {};\n            return (\n              <Th key={`col-${idx}`} {...params}>\n                {head}\n              </Th>\n            );\n          })}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {jobs.map((job) => (\n          <JobExplorerListRow job={job} key={job.id.id} />\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nJobExplorerList.propTypes = {\n  jobs: PropTypes.array.isRequired,\n  queryParams: PropTypes.object.isRequired,\n  queryParamsDispatch: PropTypes.func.isRequired,\n};\n\nexport default JobExplorerList;\n","import React, { useEffect, useCallback } from 'react';\n\nimport { useQueryParams } from '../../QueryParams/';\nimport useRequest from '../../Utilities/useRequest';\n\nimport LoadingState from '../../Components/ApiStatus/LoadingState';\nimport NoResults from '../../Components/ApiStatus/NoResults';\nimport ApiErrorState from '../../Components/ApiStatus/ApiErrorState';\nimport Pagination from '../../Components/Pagination';\n\nimport { readJobExplorer, readJobExplorerOptions } from '../../Api/';\nimport { jobExplorer } from '../../Utilities/constants';\n\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport { Card, CardBody, PaginationVariant } from '@patternfly/react-core';\n\nimport JobExplorerList from './JobExplorerList';\nimport FilterableToolbar from '../../Components/Toolbar/';\n\nconst JobExplorer = () => {\n  const {\n    queryParams,\n    setFromPagination,\n    setFromToolbar,\n    dispatch: queryParamsDispatch,\n  } = useQueryParams(jobExplorer.defaultParams);\n\n  const {\n    result: options,\n    error,\n    request: fetchOptions,\n  } = useRequest(\n    useCallback(() => readJobExplorerOptions(queryParams), [queryParams]),\n    {}\n  );\n\n  const {\n    result: { items: data, meta },\n    isLoading: dataIsLoading,\n    isSuccess: dataIsSuccess,\n    request: fetchEndpoints,\n  } = useRequest(\n    useCallback(() => readJobExplorer(queryParams), [queryParams]),\n    { items: [], meta: {} }\n  );\n\n  useEffect(() => {\n    fetchOptions();\n    fetchEndpoints();\n  }, [queryParams]);\n\n  if (error) return <ApiErrorState message={error.error} />;\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle title={'Job Explorer'} />\n      </PageHeader>\n      <Main>\n        <Card>\n          <CardBody>\n            <FilterableToolbar\n              categories={options}\n              filters={queryParams}\n              setFilters={setFromToolbar}\n              pagination={\n                <Pagination\n                  count={meta?.count}\n                  params={{\n                    limit: +queryParams.limit,\n                    offset: +queryParams.offset,\n                  }}\n                  setPagination={setFromPagination}\n                  isCompact\n                />\n              }\n              hasSettings\n            />\n            {dataIsLoading && <LoadingState />}\n            {dataIsSuccess && data.length <= 0 && <NoResults />}\n            {dataIsSuccess && data.length > 0 && (\n              <JobExplorerList\n                jobs={data}\n                queryParams={queryParams}\n                queryParamsDispatch={queryParamsDispatch}\n              />\n            )}\n            <Pagination\n              count={meta?.count}\n              params={{\n                limit: +queryParams.limit,\n                offset: +queryParams.offset,\n              }}\n              setPagination={setFromPagination}\n              variant={PaginationVariant.bottom}\n            />\n          </CardBody>\n        </Card>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default JobExplorer;\n"],"names":["categoryColor","ok","global_palette_green_300","passed","unreachable","global_palette_black_400","changed","global_palette_gold_300","failed","global_palette_red_100","skipped","global_palette_blue_300","JobExplorerListRow","job","useState","expanded","setExpanded","categoryCount","ok_host_count","skipped_host_count","changed_host_count","failed_host_count","unreachable_host_count","expandedInfo","label","value","created","formatDateTime","started","finished","host_task_count","Tr","Td","expand","rowIndex","id","isExpanded","onToggle","href","tower_link","template_name","JobStatus","status","cluster_name","org_name","formatJobType","job_type","colSpan","ExpandableRowContent","Flex","FlexItem","align","default","host_count","Breakdown","showPercent","failed_tasks","showMore","setShowMore","Grid","hasGutter","slice","length","map","task","idx","passed_host_count","GridItem","lg","md","key","task_name","module_name","className","Button","variant","onClick","fullWidth","renderMoreButton","renderFailedTaskBar","most_failed_tasks","DescriptionList","isHorizontal","columnModifier","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","propTypes","PropTypes","cols","sortableCols","sortMap","reverseSortMap","JobExplorerList","jobs","queryParams","queryParamsDispatch","sortIdx","setSortIdx","sortDir","setSortDir","useEffect","sort_options","sort_order","onSort","_event","dir","type","TableComposable","Thead","Th","head","params","includes","sort","sortBy","index","direction","columnIndex","Tbody","useQueryParams","jobExplorer","setFromPagination","setFromToolbar","dispatch","useRequest","useCallback","readJobExplorerOptions","options","result","error","fetchOptions","request","readJobExplorer","items","meta","data","dataIsLoading","isLoading","dataIsSuccess","isSuccess","fetchEndpoints","ApiErrorState","message","PageHeader","PageHeaderTitle","title","Main","Card","CardBody","categories","filters","setFilters","pagination","Pagination","count","limit","offset","setPagination","isCompact","hasSettings","LoadingState","NoResults","PaginationVariant"],"sourceRoot":""}