{"version":3,"file":"js/837.31308cee21a78ef345a4.js","mappings":"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","sources":["webpack:///./src/Charts/Utilities/Tooltip.js","webpack:///./src/Charts/BarChart.js","webpack:///./src/Charts/LineChart.js","webpack:///./src/Containers/Clusters/ModulesList.js","webpack:///./src/Containers/Clusters/ModalContents.js","webpack:///./src/Containers/Clusters/TemplatesList.js","webpack:///./src/Containers/Clusters/Clusters.js"],"sourcesContent":["import * as d3 from 'd3';\n\nclass Tooltip {\n  constructor(opts) {\n    this.svg = opts.svg;\n    this.colors = opts.colors;\n    this.draw();\n  }\n\n  draw() {\n    this.toolTipBase = d3.select(this.svg + '> svg').append('g');\n    this.toolTipBase.attr('id', 'svg-chart-Tooltip.base-' + this.svg.slice(1));\n    this.toolTipBase.attr('overflow', 'visible');\n    this.toolTipBase.style('opacity', 0);\n    this.toolTipBase.style('pointer-events', 'none');\n    this.toolTipBase.attr('transform', 'translate(100, 100)');\n    this.boxWidth = 145;\n    this.textWidthThreshold = 20;\n\n    this.toolTipPoint = this.toolTipBase\n      .append('rect')\n      .attr('transform', 'translate(10, -10) rotate(45)')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('height', 20)\n      .attr('width', 20)\n      .attr('fill', '#393f44');\n    this.boundingBox = this.toolTipBase\n      .append('rect')\n      .attr('x', 10)\n      .attr('y', -41)\n      .attr('rx', 2)\n      .attr('height', 110)\n      .attr('width', this.boxWidth)\n      .attr('fill', '#393f44');\n    this.circleSuccess = this.toolTipBase\n      .append('circle')\n      .attr('cx', 26)\n      .attr('cy', 0)\n      .attr('r', 8)\n      .attr('stroke', 'white')\n      .attr('fill', 'white');\n    this.circleFail = this.toolTipBase\n      .append('circle')\n      .attr('cx', 26)\n      .attr('cy', 26)\n      .attr('r', 8)\n      .attr('stroke', 'white')\n      .attr('fill', 'white');\n    this.successText = this.toolTipBase\n      .append('text')\n      .attr('x', 43)\n      .attr('y', 4)\n      .attr('font-size', 12)\n      .attr('fill', 'white')\n      .text('Successful');\n    this.failText = this.toolTipBase\n      .append('text')\n      .attr('x', 43)\n      .attr('y', 28)\n      .attr('font-size', 12)\n      .attr('fill', 'white')\n      .text('Failed');\n    this.successIcon = this.toolTipBase\n      .append('text')\n      .attr('class', 'fas fa-sm')\n      .attr('fill', this.colors(1))\n      .attr('x', 19)\n      .attr('y', 5)\n      .text('\\uf058');\n    this.failedIcon = this.toolTipBase\n      .append('text')\n      .attr('class', 'fas fa-sm')\n      .attr('fill', this.colors(0))\n      .attr('x', 20)\n      .attr('y', 31)\n      .text('\\uf06a');\n    this.jobs = this.toolTipBase\n      .append('text')\n      .attr('fill', 'white')\n      .attr('x', 137)\n      .attr('y', -21)\n      .attr('font-size', 12)\n      .attr('text-anchor', 'end')\n      .text('No jobs');\n    this.successful = this.toolTipBase\n      .append('text')\n      .attr('fill', 'white')\n      .attr('font-size', 12)\n      .attr('x', 122)\n      .attr('y', 4)\n      .text('0');\n    this.failed = this.toolTipBase\n      .append('text')\n      .attr('fill', 'white')\n      .attr('font-size', 12)\n      .attr('x', 122)\n      .attr('y', 28)\n      .text('0');\n    this.date = this.toolTipBase\n      .append('text')\n      .attr('fill', 'white')\n      .attr('stroke', 'white')\n      .attr('x', 20)\n      .attr('y', -21)\n      .attr('font-size', 12)\n      .text('Never');\n    this.clickMore = this.toolTipBase\n      .append('text')\n      .attr('fill', 'white')\n      .attr('x', 20)\n      .attr('y', 55)\n      .attr('font-size', 12)\n      .text('Click for details');\n  }\n\n  handleMouseOver = (d) => {\n    let success = 0;\n    let fail = 0;\n    let total = 0;\n    const x =\n      d3.event.pageX -\n      d3.select(this.svg).node().getBoundingClientRect().x +\n      10;\n    const y =\n      d3.event.pageY -\n      d3.select(this.svg).node().getBoundingClientRect().y -\n      10;\n    const formatTooltipDate = d3.timeFormat('%m/%d');\n    if (!d) {\n      return;\n    }\n\n    const toolTipWidth = this.toolTipBase.node().getBoundingClientRect().width;\n    const chartWidth = d3\n      .select(this.svg + '> svg')\n      .node()\n      .getBoundingClientRect().width;\n    const overflow = 100 - (toolTipWidth / chartWidth) * 100;\n    const flipped = overflow < (x / chartWidth) * 100;\n    if (d) {\n      success = d.RAN || 0;\n      fail = d.FAIL || 0;\n      total = d.TOTAL || 0;\n      this.date.text(formatTooltipDate(d.DATE || null));\n    }\n\n    if (d && d.data) {\n      success = d.data.RAN || 0;\n      fail = d.data.FAIL || 0;\n      total = d.data.TOTAL || 0;\n      this.date.text(formatTooltipDate(d.data.DATE || null));\n    }\n\n    this.jobs.text('' + total + ' jobs');\n    this.jobsWidth = this.jobs.node().getComputedTextLength();\n    this.failed.text('' + fail);\n    this.successful.text('' + success);\n    this.successTextWidth = this.successful.node().getComputedTextLength();\n    this.failTextWidth = this.failed.node().getComputedTextLength();\n\n    const maxTextPerc = (this.jobsWidth / this.boxWidth) * 100;\n    const threshold = 40;\n    const overage = maxTextPerc / threshold;\n    let adjustedWidth;\n    if (maxTextPerc > threshold) {\n      adjustedWidth = this.boxWidth * overage;\n    } else {\n      adjustedWidth = this.boxWidth;\n    }\n\n    this.boundingBox.attr('width', adjustedWidth);\n    this.toolTipBase.attr('transform', 'translate(' + x + ',' + y + ')');\n    if (flipped) {\n      this.toolTipPoint.attr('transform', 'translate(-20, 0) rotate(45)');\n      this.boundingBox.attr('x', -adjustedWidth - 20);\n      this.circleSuccess.attr('cx', -adjustedWidth);\n      this.circleFail.attr('cx', -adjustedWidth);\n      this.failedIcon.attr('x', -adjustedWidth - 7);\n      this.successIcon.attr('x', -adjustedWidth - 7);\n      this.successText.attr('x', -adjustedWidth + 17);\n      this.failText.attr('x', -adjustedWidth + 17);\n      this.successful.attr('x', -this.successTextWidth - 20 - 12);\n      this.failed.attr('x', -this.failTextWidth - 20 - 12);\n      this.date.attr('x', -adjustedWidth - 5);\n      this.jobs.attr('x', -this.jobsWidth / 2 - 7);\n      this.clickMore.attr('x', -adjustedWidth);\n    } else {\n      this.toolTipPoint.attr('transform', 'translate(10, 0) rotate(45)');\n      this.boundingBox.attr('x', 10);\n      this.circleSuccess.attr('cx', 26);\n      this.circleFail.attr('cx', 26);\n      this.failedIcon.attr('x', 19);\n      this.successIcon.attr('x', 19);\n      this.successText.attr('x', 43);\n      this.failText.attr('x', 43);\n      this.successful.attr('x', adjustedWidth - this.successTextWidth);\n      this.failed.attr('x', adjustedWidth - this.failTextWidth);\n      this.date.attr('x', 20);\n      this.jobs.attr('x', adjustedWidth);\n      this.clickMore.attr('x', 20);\n    }\n\n    this.toolTipBase.style('opacity', 1);\n    this.toolTipBase.interrupt();\n  };\n\n  handleMouseOut = () => {\n    this.toolTipBase\n      .transition()\n      .delay(15)\n      .style('opacity', 0)\n      .style('pointer-events', 'none');\n  };\n}\n\nexport default Tooltip;\n","import React, { Component } from 'react';\nimport initializeChart from './BaseChart';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport Tooltip from './Utilities/Tooltip';\nimport { stringify } from 'query-string';\nimport { Paths } from '../paths';\nimport { formatDate } from '../Utilities/helpers';\n\nclass BarChart extends Component {\n  constructor(props) {\n    super(props);\n    this.draw = this.draw.bind(this);\n    this.init = this.init.bind(this);\n    this.resize = this.resize.bind(this);\n    this.redirectToJobExplorer = this.redirectToJobExplorer.bind(this);\n    this.state = {\n      formattedData: [],\n      timeout: null,\n    };\n  }\n\n  redirectToJobExplorer({ data: { DATE: date } }) {\n    const { jobExplorer } = Paths;\n    const formattedDate = formatDate(date);\n    const initialQueryParams = {\n      start_date: formattedDate,\n      end_date: formattedDate,\n      quick_date_range: 'custom',\n      status: ['failed', 'successful'],\n      template_id: this.props.queryParams.template_id,\n      org_id: this.props.queryParams.org_id,\n      job_type: this.props.queryParams.job_type,\n    };\n\n    const search = stringify(initialQueryParams, { arrayFormat: 'bracket' });\n    this.props.history.push({\n      pathname: jobExplorer,\n      search,\n    });\n  }\n\n  resize() {\n    const { timeout } = this.state;\n    clearTimeout(timeout);\n    this.setState({\n      timeout: setTimeout(() => {\n        this.init();\n      }, 500),\n    });\n  }\n\n  init() {\n    this.draw();\n  }\n\n  // Methods\n  draw() {\n    // Clear our chart container element first\n    d3.selectAll('#' + this.props.id + ' > *').remove();\n    const parseTime = d3.timeParse('%Y-%m-%d');\n    let { data: unformattedData } = this.props;\n    const data = unformattedData.reduce(\n      (formatted, { created_date, successful_count, failed_count }) => {\n        let DATE = parseTime(created_date) || new Date();\n        let RAN = +successful_count || 0;\n        let FAIL = +failed_count || 0;\n        let TOTAL = +successful_count + failed_count || 0;\n        return formatted.concat({ DATE, RAN, FAIL, TOTAL });\n      },\n      []\n    );\n    const width = this.props.getWidth();\n    const height = this.props.getHeight();\n    const x = d3.scaleBand().rangeRound([0, width]).padding(0.35); // percentage\n    const y = d3.scaleLinear().range([height, 0]);\n\n    const svg = d3\n      .select('#' + this.props.id)\n      .append('svg')\n      .attr('width', width + this.props.margin.left + this.props.margin.right)\n      .attr('height', height + this.props.margin.top + this.props.margin.bottom)\n      .append('g')\n      .attr(\n        'transform',\n        'translate(' +\n          this.props.margin.left +\n          ',' +\n          this.props.margin.top +\n          ')'\n      );\n    //[fail, success]\n    let colors = d3.scaleOrdinal(['#6EC664', '#A30000']);\n\n    const barTooltip = new Tooltip({\n      svg: '#' + this.props.id,\n      colors,\n    });\n    const status = ['FAIL', 'RAN'];\n\n    // stack our data\n    const stack = d3\n      .stack()\n      .keys(status)\n      .order(d3.stackOrderNone)\n      .offset(d3.stackOffsetNone);\n\n    const layers = stack(data);\n    // Scale the range of the data\n    x.domain(layers[0].map((d) => d.data.DATE));\n    y.domain([0, d3.max(layers[layers.length - 1], (d) => d[1] * 1.15) || 8]);\n    // Add the Y Axis\n    svg\n      .append('g')\n      .attr('class', 'y-axis')\n      .call(d3.axisLeft(y).tickSize(-width, 0, 0))\n      .selectAll('line')\n      .attr('stroke', '#d7d7d7');\n    svg.selectAll('.y-axis .tick text').attr('x', -5);\n    // text label for the y axis\n    svg\n      .append('text')\n      .attr('transform', 'rotate(-90)')\n      .attr('y', 0 - this.props.margin.left)\n      .attr('x', 0 - height / 2)\n      .attr('dy', '1em')\n      .style('text-anchor', 'middle')\n      .text('Jobs across all clusters');\n    // Add the X Axis\n    let ticks;\n    const maxTicks = Math.round(data.length / (data.length / 2));\n    ticks = data.map((d) => d.DATE);\n    if (data.length > 14) {\n      ticks = data\n        .map((d, i) => (i % maxTicks === 0 ? d.DATE : undefined))\n        .filter((item) => item);\n    }\n\n    svg\n      .append('g')\n      .attr('class', 'x-axis')\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(\n        d3.axisBottom(x).tickValues(ticks).tickFormat(d3.timeFormat('%-m/%-d')) // \"1/19\"\n      )\n      .selectAll('line')\n      .attr('stroke', '#d7d7d7');\n    svg.selectAll('.x-axis .tick text').attr('y', 10);\n\n    // text label for the x axis\n    svg\n      .append('text')\n      .attr(\n        'transform',\n        'translate(' +\n          width / 2 +\n          ' ,' +\n          (height + this.props.margin.top + 20) +\n          ')'\n      )\n      .style('text-anchor', 'middle')\n      .text('Date');\n\n    const layer = svg\n      .selectAll('layer')\n      .data(layers)\n      .enter()\n      .append('g')\n      .attr('class', 'layer')\n      .style('fill', (_d, i) => colors(i));\n    layer\n      .selectAll('rect')\n      .data((d) => d)\n      .enter()\n      .append('rect')\n      .attr('x', (d) => x(d.data.DATE))\n      .attr('y', (d) => y(d[0]))\n      .attr('height', 0)\n      .attr('width', x.bandwidth() - 1)\n      .transition()\n      .duration(550)\n      .ease(d3.easeCubic)\n      .attr('y', (d) => y(d[1]))\n      .attr('height', (d) => y(d[0]) - y(d[1]));\n    layer\n      .selectAll('rect')\n      .on('mouseover', barTooltip.handleMouseOver)\n      .on('mousemove', barTooltip.handleMouseOver)\n      .on('mouseout', barTooltip.handleMouseOut)\n      .on('click', this.redirectToJobExplorer);\n  }\n\n  componentDidMount() {\n    this.init();\n    // Call the resize function whenever a resize event occurs\n    window.addEventListener('resize', this.resize);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.data !== this.props.data) {\n      this.init();\n    }\n  }\n\n  componentWillUnmount() {\n    const { timeout } = this.state;\n    clearTimeout(timeout);\n    window.removeEventListener('resize', this.resize);\n  }\n\n  render() {\n    return <div id={this.props.id} />;\n  }\n}\n\nBarChart.propTypes = {\n  id: PropTypes.string,\n  queryParams: PropTypes.object,\n  data: PropTypes.array,\n  margin: PropTypes.object,\n  getHeight: PropTypes.func,\n  getWidth: PropTypes.func,\n  history: PropTypes.object,\n};\n\nexport default initializeChart(BarChart);\n","import React, { Component } from 'react';\nimport initializeChart from './BaseChart';\nimport PropTypes from 'prop-types';\nimport Tooltip from './Utilities/Tooltip';\nimport { Paths } from '../paths';\nimport { formatDate } from '../Utilities/helpers';\nimport { stringify } from 'query-string';\nimport * as d3 from 'd3';\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n    this.init = this.init.bind(this);\n    this.draw = this.draw.bind(this);\n    this.resize = this.resize.bind(this);\n    this.updateCluster = this.updateCluster.bind(this);\n    this.redirectToJobExplorer = this.redirectToJobExplorer.bind(this);\n    this.state = {\n      formattedData: [],\n      timeout: null,\n    };\n  }\n\n  redirectToJobExplorer({ DATE: date }) {\n    const { jobExplorer } = Paths;\n    const formattedDate = formatDate(date);\n    const initialQueryParams = {\n      start_date: formattedDate,\n      end_date: formattedDate,\n      quick_date_range: 'custom',\n      status: ['failed', 'successful'],\n      cluster_id: this.props.queryParams.cluster_id,\n      org_id: this.props.queryParams.org_id,\n      template_id: this.props.queryParams.template_id,\n      job_type: this.props.queryParams.job_type,\n    };\n\n    const search = stringify(initialQueryParams, { arrayFormat: 'bracket' });\n    this.props.history.push({\n      pathname: jobExplorer,\n      search,\n    });\n  }\n\n  resize() {\n    const { timeout } = this.state;\n    clearTimeout(timeout);\n    this.setState({\n      timeout: setTimeout(() => {\n        this.init();\n      }, 500),\n    });\n  }\n\n  updateCluster() {\n    this.init();\n  }\n  init() {\n    this.draw();\n  }\n  // Methods\n  draw() {\n    // Clear our chart container element first\n    d3.selectAll('#' + this.props.id + ' > *').remove();\n    const width = this.props.getWidth();\n    const height = this.props.getHeight();\n\n    function transition(path) {\n      path.transition().duration(1000).attrTween('stroke-dasharray', tweenDash);\n    }\n\n    function tweenDash() {\n      const l = this.getTotalLength();\n      const i = d3.interpolateString('0,' + l, l + ',' + l);\n      return function (t) {\n        return i(t);\n      };\n    }\n\n    const x = d3.scaleTime().rangeRound([0, width]);\n    const y = d3.scaleLinear().range([height, 0]);\n\n    //[success, fail, total]\n    let colors = d3.scaleOrdinal(['#6EC664', '#A30000', '#06C']);\n    const svg = d3\n      .select('#' + this.props.id)\n      .append('svg')\n      .attr('width', width + this.props.margin.left + this.props.margin.right)\n      .attr('height', height + this.props.margin.top + this.props.margin.bottom)\n      .attr('z', 100)\n      .append('g')\n      .attr(\n        'transform',\n        'translate(' +\n          this.props.margin.left +\n          ',' +\n          this.props.margin.top +\n          ')'\n      );\n    // Tooltip\n    const tooltip = new Tooltip({\n      svg: '#' + this.props.id,\n      colors,\n    });\n    const { data: unformattedData } = this.props;\n    const parseTime = d3.timeParse('%Y-%m-%d');\n\n    const data = unformattedData.reduce(\n      (formatted, { created_date, successful_count, failed_count }) => {\n        let DATE = parseTime(created_date) || new Date();\n        let RAN = +successful_count || 0;\n        let FAIL = +failed_count || 0;\n        let TOTAL = +successful_count + failed_count || 0;\n        return formatted.concat({ DATE, RAN, FAIL, TOTAL });\n      },\n      []\n    );\n    // Scale the range of the data\n    x.domain(\n      d3.extent(data, function (d) {\n        return d.DATE;\n      })\n    );\n    y.domain([\n      0,\n      d3.max(data, function (d) {\n        return d.TOTAL * 1.15 || 8;\n      }),\n    ]);\n\n    const successLine = d3\n      .line()\n      .curve(d3.curveMonotoneX)\n      .x(function (d) {\n        return x(d.DATE);\n      })\n      .y(function (d) {\n        return y(d.RAN);\n      });\n\n    const failLine = d3\n      .line()\n      .defined((d) => !isNaN(d.FAIL))\n      .curve(d3.curveMonotoneX)\n      .x(function (d) {\n        return x(d.DATE);\n      })\n      .y(function (d) {\n        return y(d.FAIL);\n      });\n    // Add the Y Axis\n    svg\n      .append('g')\n      .attr('class', 'y-axis')\n      .call(d3.axisLeft(y).ticks(10).tickSize(-width))\n      .selectAll('line')\n      .attr('stroke', '#d7d7d7');\n    svg.selectAll('.y-axis .tick text').attr('x', -5);\n\n    // text label for the y axis\n    svg\n      .append('text')\n      .attr('transform', 'rotate(-90)')\n      .attr('y', 0 - this.props.margin.left)\n      .attr('x', 0 - height / 2)\n      .attr('dy', '1em')\n      .style('text-anchor', 'middle')\n      .text('Job runs');\n    // Add the X Axis\n    let ticks;\n    const maxTicks = Math.round(data.length / (data.length / 2));\n    ticks = data.map((d) => d.DATE);\n    if (data.length > 14) {\n      ticks = data\n        .map((d, i) => (i % maxTicks === 0 ? d.DATE : undefined))\n        .filter((item) => item);\n    }\n\n    svg\n      .append('g')\n      .attr('class', 'x-axis')\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(\n        d3\n          .axisBottom(x)\n          .tickValues(ticks)\n          .tickSize(-height)\n          .tickFormat(d3.timeFormat('%-m/%-d')) // \"1/19\"\n      ) // \"Jan-01\"\n      .selectAll('line')\n      .attr('stroke', '#d7d7d7');\n    svg.selectAll('.x-axis .tick text').attr('y', 10);\n\n    // text label for the x axis\n    svg\n      .append('text')\n      .attr(\n        'transform',\n        'translate(' +\n          width / 2 +\n          ' ,' +\n          (height + this.props.margin.top + 20) +\n          ')'\n      )\n      .style('text-anchor', 'middle')\n      .text('Date');\n    const vertical = svg\n      .append('path')\n      .attr('class', 'mouse-line')\n      .style('stroke', 'black')\n      .style('stroke-width', '3px')\n      .style('stroke-dasharray', '3, 3')\n      .style('opacity', '0');\n\n    const handleMouseOver = function (d) {\n      tooltip.handleMouseOver(d);\n      // show vertical line\n      vertical.transition().style('opacity', '1');\n    };\n\n    const handleMouseMove = function () {\n      let intersectX = this.cx.baseVal.value;\n      vertical.attr('d', function () {\n        let d = 'M' + intersectX + ',' + height;\n        d += ' ' + intersectX + ',' + 0;\n        return d;\n      });\n    };\n\n    const handleMouseOut = function () {\n      // hide tooltip\n      tooltip.handleMouseOut();\n      // hide vertical line\n      vertical.transition().style('opacity', 0);\n    };\n\n    // Add the successLine path.\n    svg\n      .append('path')\n      .data([data])\n      .attr('class', 'line')\n      .style('fill', 'none')\n      .style('stroke', () => colors(1))\n      .attr('stroke-width', 2)\n      .attr('d', successLine)\n      .call(transition);\n\n    // Add the failLine path.\n    svg\n      .append('path')\n      .data([data])\n      .attr('class', 'line')\n      .style('fill', 'none')\n      .style('stroke', () => colors(0))\n      .attr('stroke-width', 2)\n      .attr('d', failLine)\n      .call(transition);\n    svg\n      .selectAll('dot')\n      .data(data)\n      .enter()\n      .append('circle')\n      .attr('r', 3)\n      .style('stroke', () => colors(1))\n      .style('fill', () => colors(1))\n      .attr('cx', function (d) {\n        return x(d.DATE);\n      })\n      .attr('cy', function (d) {\n        return y(d.RAN);\n      })\n\n      .on('mouseover', handleMouseOver)\n      .on('mousemove', handleMouseMove)\n      .on('mouseout', handleMouseOut)\n      .on('click', this.redirectToJobExplorer);\n    // create our failLine circles\n    svg\n      .selectAll('dot')\n      .data(data)\n      .enter()\n      .append('circle')\n      .attr('r', 3)\n      .style('stroke', () => colors(0))\n      .style('fill', () => colors(0))\n      .attr('cx', function (d) {\n        return x(d.DATE);\n      })\n      .attr('cy', function (d) {\n        return y(d.FAIL);\n      })\n      .on('mouseover', handleMouseOver)\n      .on('mousemove', handleMouseMove)\n      .on('mouseout', handleMouseOut)\n      .on('click', this.redirectToJobExplorer);\n  }\n\n  componentDidMount() {\n    this.updateCluster();\n    // Call the resize function whenever a resize event occurs\n    window.addEventListener('resize', this.resize);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.data !== this.props.data) {\n      this.updateCluster();\n    }\n  }\n\n  componentWillUnmount() {\n    const { timeout } = this.state;\n    clearTimeout(timeout);\n    window.removeEventListener('resize', this.resize);\n  }\n\n  render() {\n    return <div id={this.props.id} />;\n  }\n}\n\nLineChart.propTypes = {\n  id: PropTypes.string,\n  queryParams: PropTypes.object,\n  data: PropTypes.array,\n  margin: PropTypes.object,\n  getHeight: PropTypes.func,\n  getWidth: PropTypes.func,\n  history: PropTypes.object,\n};\n\nexport default initializeChart(LineChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { trimStr } from '../../Utilities/helpers';\nimport styled from 'styled-components';\nimport LoadingState from '../../Components/ApiStatus/LoadingState';\nimport NoData from '../../Components/ApiStatus/NoData';\n\nimport {\n  DataList,\n  DataListItem as PFDataListItem,\n  DataListCell as PFDataListCell,\n} from '@patternfly/react-core';\n\nconst DataListCell = styled(PFDataListCell)`\n  --pf-c-data-list__cell-cell--MarginRight: 0;\n`;\n\nconst DataListItem = styled(PFDataListItem)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  padding: 0 15px 10px 15px;\n`;\n\nconst DataCellEnd = styled(DataListCell)`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`;\n\nconst ModulesList = ({ modules, isLoading }) => (\n  <DataList\n    aria-label=\"Top Modules\"\n    style={{\n      maxHeight: '400px',\n      overflow: 'auto',\n      height: '400px',\n      background: 'white',\n    }}\n  >\n    <DataListItem aria-labelledby=\"top-modules-header\">\n      <DataListCell>\n        <h3>Top modules</h3>\n      </DataListCell>\n      <DataCellEnd>\n        <h3>Usage</h3>\n      </DataCellEnd>\n    </DataListItem>\n    {isLoading && (\n      <PFDataListItem\n        aria-labelledby=\"modules-loading\"\n        key={isLoading}\n        style={{ border: 'none' }}\n      >\n        <PFDataListCell>\n          <LoadingState />\n        </PFDataListCell>\n      </PFDataListItem>\n    )}\n    {!isLoading && modules.length <= 0 && (\n      <PFDataListItem\n        aria-labelledby=\"modules-no-data\"\n        key={isLoading}\n        style={{ border: 'none' }}\n      >\n        <PFDataListCell>\n          <NoData />\n        </PFDataListCell>\n      </PFDataListItem>\n    )}\n    {!isLoading &&\n      modules\n        .filter((module) => module.name !== null)\n        .map(({ name, host_task_count }, index) => (\n          <DataListItem aria-labelledby=\"top-modules-detail\" key={index}>\n            <DataListCell>\n              <span>{trimStr(name)}</span>\n            </DataListCell>\n            <DataCellEnd>{host_task_count}</DataCellEnd>\n          </DataListItem>\n        ))}\n  </DataList>\n);\n\nModulesList.propTypes = {\n  modules: PropTypes.array,\n  isLoading: PropTypes.bool,\n};\n\nexport default ModulesList;\n","import React, { useCallback, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport LoadingState from '../../Components/ApiStatus/LoadingState';\nimport ApiErrorState from '../../Components/ApiStatus/ApiErrorState';\nimport NoResults from '../../Components/ApiStatus/NoResults';\nimport Breakdown from '../../Charts/Breakdown';\nimport JobStatus from '../../Components/JobStatus';\nimport { Paths } from '../../paths';\nimport { stringify } from 'query-string';\nimport {\n  formatDateTime,\n  formatJobType,\n  formatTotalTime,\n} from '../../Utilities/helpers';\nimport { readJobExplorer } from '../../Api';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport {\n  global_palette_blue_300,\n  global_palette_green_200,\n  global_palette_red_100,\n  global_palette_black_850,\n  global_palette_orange_300,\n  global_palette_purple_300,\n  global_palette_cyan_200,\n  global_palette_light_green_200,\n} from '@patternfly/react-tokens';\n\nimport {\n  DescriptionList,\n  DescriptionListTerm,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Divider,\n} from '@patternfly/react-core';\n\nimport {\n  TableComposable,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from '@patternfly/react-table';\nimport useRequest from '../../Utilities/useRequest';\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 2rem;\n`;\n\nconst formatTopFailedTask = (data) => {\n  if (!data) {\n    return;\n  }\n\n  if (data && data[0]) {\n    const percentage = Math.ceil(\n      (data[0].failed_count / data[0].total_failed_count) * 100\n    );\n    return `${data[0].task_name} ${percentage}%`;\n  }\n\n  return `Unavailable`;\n};\n\nconst formatSuccessRate = (successCount, totalCount) =>\n  Math.ceil((successCount / totalCount) * 100) + '%';\nconst formatAvgRun = (elapsed, totalCount) =>\n  new Date(Math.ceil(elapsed / totalCount) * 1000).toISOString().substr(11, 8);\n\nconst ModalContents = ({ selectedId, isOpen, handleModal, qp, jobType }) => {\n  const {\n    result: stats,\n    request: fetchStats,\n    ...statsApi\n  } = useRequest(\n    useCallback(() => readJobExplorer(agreggateTemplateParams), [selectedId]),\n    {}\n  );\n\n  const {\n    result: relatedJobs,\n    request: fetchJobs,\n    ...jobsApi\n  } = useRequest(\n    useCallback(() => readJobExplorer(relatedTemplateJobsParams), [selectedId]),\n    {}\n  );\n  let history = useHistory();\n\n  const redirectToJobExplorer = () => {\n    const { jobExplorer } = Paths;\n    const initialQueryParams = {\n      'job-explorer.template_id': selectedId,\n      'job-explorer.status': [\n        'successful',\n        'failed',\n        'new',\n        'pending',\n        'waiting',\n        'error',\n        'canceled',\n        'running',\n      ],\n      'job-explorer.job_type': [jobType],\n      'job-explorer.quick_date_range': 'last_30_days',\n    };\n\n    const search = stringify(initialQueryParams, { arrayFormat: 'bracket' });\n    history.push({\n      pathname: jobExplorer,\n      search,\n    });\n  };\n\n  const relatedTemplateJobsParams = {\n    ...qp,\n    template_id: [selectedId],\n    attributes: [\n      'id',\n      'status',\n      'job_type',\n      'started',\n      'finished',\n      'elapsed',\n      'created',\n      'cluster_name',\n      'org_name',\n    ],\n    group_by_time: false,\n    limit: 5,\n    sort_options: 'created',\n    sort_oder: 'desc',\n    quick_date_range: qp.quick_date_range\n      ? qp.quick_date_range\n      : 'last_30_days',\n    job_type: [jobType],\n  };\n\n  const agreggateTemplateParams = {\n    group_by: 'template',\n    template_id: [selectedId],\n    attributes: [\n      'elapsed',\n      'job_type',\n      'successful_count',\n      'failed_count',\n      'error_count',\n      'waiting_count',\n      'pending_count',\n      'canceled_count',\n      'new_count',\n      'running_count',\n      'total_count',\n      jobType === 'job' ? 'most_failed_tasks' : 'most_failed_steps',\n    ],\n    status: qp.status,\n    quick_date_range: qp.quick_date_range\n      ? qp.quick_date_range\n      : 'last_30_days',\n    job_type: [jobType],\n  };\n\n  useEffect(() => {\n    fetchJobs();\n    fetchStats();\n  }, [selectedId]);\n\n  const tableCols = ['Id/Name', 'Status', 'Cluster', 'Finished', 'Total time'];\n  const statsData = (statsApi.isSuccess && stats?.items[0]) ?? null;\n  const categoryCount = statsData\n    ? {\n        success: statsData.successful_count,\n        cancelled: statsData.canceled_count,\n        error: statsData.error_count,\n        failed: statsData.failed_count,\n        new: statsData.new_count,\n        pending: statsData.pending_count,\n        running: statsData.running_count,\n        waiting: statsData.waiting_count,\n      }\n    : null;\n\n  const categoryColor = {\n    success: global_palette_green_200.value,\n    cancelled: global_palette_black_850.value,\n    error: global_palette_orange_300.value,\n    failed: global_palette_red_100.value,\n    new: global_palette_cyan_200.value,\n    pending: global_palette_purple_300.value,\n    running: global_palette_blue_300.value,\n    waiting: global_palette_light_green_200.value,\n  };\n\n  const descriptionStats = statsData && [\n    {\n      label: 'Number of runs',\n      id: 'total-runs',\n      value: statsData.total_count ?? 'Unavailable',\n    },\n    {\n      label: 'Total time',\n      id: 'total-time',\n      value: statsData.elapsed\n        ? formatTotalTime(statsData.elapsed)\n        : 'Unavailable',\n    },\n    {\n      label: 'Average time',\n      id: 'avg-time',\n      value: statsData.elapsed\n        ? formatAvgRun(statsData.elapsed, statsData.total_count)\n        : 'Unavailable',\n    },\n    {\n      label: 'Type',\n      id: 'type',\n      value: jobType ? formatJobType(jobType) : 'Unavailable',\n    },\n    {\n      label: 'Success rate',\n      id: 'success-rate',\n      value: !isNaN(statsData.successful_count)\n        ? formatSuccessRate(statsData.successful_count, statsData.total_count)\n        : 'Unavailable',\n    },\n    {\n      label: 'Most failed task',\n      id: 'most-failed',\n      value: statsData.most_failed_tasks\n        ? formatTopFailedTask(statsData.most_failed_tasks)\n        : 'Unavailable',\n    },\n  ];\n\n  const cleanup = () => {\n    handleModal(false);\n  };\n\n  return (\n    <Modal\n      aria-label=\"modal\"\n      variant={ModalVariant.medium}\n      title={\n        jobsApi.isSuccess &&\n        statsApi.isSuccess &&\n        stats?.items?.length > 0 &&\n        (stats?.items[0]?.name ?? 'No template name')\n      }\n      isOpen={isOpen}\n      onClose={cleanup}\n    >\n      {(statsApi.isLoading || jobsApi.isLoading) && <LoadingState />}\n      {(statsApi.error || jobsApi.error) && (\n        <ApiErrorState message={jobsApi.error.error} />\n      )}\n      {statsApi.isSuccess &&\n        jobsApi.isSuccess &&\n        relatedJobs?.items?.length <= 0 && <NoResults />}\n      {statsApi.isSuccess &&\n        jobsApi.isSuccess &&\n        relatedJobs?.items?.length > 0 && (\n          <>\n            {categoryCount && (\n              <Breakdown\n                categoryCount={categoryCount}\n                categoryColor={categoryColor}\n              />\n            )}\n\n            <DescriptionList isHorizontal columnModifier={{ lg: '3Col' }}>\n              {descriptionStats.map(({ label, id, value }) => (\n                <DescriptionListGroup className={id} key={label}>\n                  <DescriptionListTerm>{label}</DescriptionListTerm>\n                  <DescriptionListDescription>\n                    {value}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n              ))}\n            </DescriptionList>\n\n            <Divider\n              component=\"div\"\n              style={{ marginTop: '2rem', marginBottom: '1.5rem' }}\n            />\n            <p>\n              <strong>Last 5 jobs</strong>\n            </p>\n\n            <TableComposable\n              aria-label=\"Template information table\"\n              variant=\"compact\"\n            >\n              <Thead>\n                <Tr>\n                  {tableCols.map((heading, idx) => (\n                    <Th key={idx}>{heading}</Th>\n                  ))}\n                </Tr>\n              </Thead>\n              <Tbody>\n                {relatedJobs.items.map((job, idx) => (\n                  <Tr key={`job-detail-${idx}`}>\n                    <Td>{`${job.id.id} - ${job.id.template_name}`}</Td>\n                    <Td>\n                      <JobStatus status={job.status} />\n                    </Td>\n                    <Td>{job.cluster_name}</Td>\n                    <Td>{formatDateTime(job.finished)}</Td>\n                    <Td>{formatTotalTime(job.elapsed)}</Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </TableComposable>\n          </>\n        )}\n\n      <ActionContainer>\n        <Button\n          key=\"cancel\"\n          variant=\"secondary\"\n          onClick={() => {\n            cleanup();\n          }}\n        >\n          Close\n        </Button>\n\n        <Button component=\"a\" onClick={redirectToJobExplorer} variant=\"link\">\n          View all jobs\n        </Button>\n      </ActionContainer>\n    </Modal>\n  );\n};\n\nModalContents.propTypes = {\n  selectedId: PropTypes.number.isRequired,\n  qp: PropTypes.object.isRequired,\n  jobType: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  handleModal: PropTypes.func.isRequired,\n};\n\nexport default ModalContents;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport LoadingState from '../../Components/ApiStatus/LoadingState';\nimport NoData from '../../Components/ApiStatus/NoData';\n\nimport {\n  DataList,\n  DataListItem as PFDataListItem,\n  DataListCell as PFDataListCell,\n} from '@patternfly/react-core';\n\nimport ModalContents from './ModalContents';\n\nconst DataListCell = styled(PFDataListCell)`\n  --pf-c-data-list__cell-cell--MarginRight: 0;\n`;\n\nconst DataListItem = styled(PFDataListItem)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  padding: 0 15px 10px 15px;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DataCellEnd = styled(DataListCell)`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`;\n\nconst TemplatesList = ({ templates, isLoading, qp, title, jobType }) => {\n  const [selectedId, setSelectedId] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const displayJobType = (type) => {\n    return type === 'job' ? 'templates' : 'workflows';\n  };\n\n  return (\n    <>\n      <DataList\n        aria-label={`Top ${displayJobType(jobType)}`}\n        style={{\n          maxHeight: '400px',\n          overflow: 'auto',\n          height: '400px',\n          background: 'white',\n        }}\n      >\n        <DataListItem aria-labelledby={`top-${displayJobType(jobType)}-header`}>\n          <DataListCell>\n            <h3>{title}</h3>\n          </DataListCell>\n          <DataCellEnd>\n            <h3>Usage</h3>\n          </DataCellEnd>\n        </DataListItem>\n        {isLoading && (\n          <PFDataListItem\n            aria-labelledby={`${displayJobType(jobType)}-loading`}\n            key={isLoading}\n            style={{ border: 'none' }}\n          >\n            <PFDataListCell>\n              <LoadingState />\n            </PFDataListCell>\n          </PFDataListItem>\n        )}\n        {!isLoading && templates.length <= 0 && (\n          <PFDataListItem\n            aria-labelledby={`${displayJobType(jobType)}-no-data`}\n            key={isLoading}\n            style={{ border: 'none' }}\n          >\n            <PFDataListCell>\n              <NoData />\n            </PFDataListCell>\n          </PFDataListItem>\n        )}\n        {!isLoading &&\n          templates.map(({ name, total_count, id }, index) => (\n            <DataListItem\n              aria-labelledby={`top-${displayJobType(jobType)}-detail`}\n              key={index}\n            >\n              <DataListCell>\n                <a\n                  onClick={() => {\n                    setIsModalOpen(true);\n                    setSelectedId(id);\n                  }}\n                >\n                  {name}\n                </a>\n              </DataListCell>\n              <DataCellEnd>{total_count}</DataCellEnd>\n            </DataListItem>\n          ))}\n      </DataList>\n      {selectedId && (\n        <ModalContents\n          isOpen={isModalOpen}\n          handleModal={setIsModalOpen}\n          selectedId={selectedId}\n          qp={qp}\n          jobType={jobType}\n        />\n      )}\n    </>\n  );\n};\n\nTemplatesList.propTypes = {\n  templates: PropTypes.array,\n  isLoading: PropTypes.bool,\n  queryParams: PropTypes.object,\n  title: PropTypes.string,\n  qp: PropTypes.object,\n  jobType: PropTypes.string,\n};\n\nexport default TemplatesList;\n","import React, { useEffect, useCallback } from 'react';\n\nimport { useQueryParams } from '../../Utilities/useQueryParams';\n\nimport LoadingState from '../../Components/ApiStatus/LoadingState';\nimport {\n  readClustersOptions,\n  readJobExplorer,\n  readEventExplorer,\n} from '../../Api/';\n\nimport { jobExplorer } from '../../Utilities/constants';\n\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Grid,\n  GridItem,\n} from '@patternfly/react-core';\n\nimport BarChart from '../../Charts/BarChart';\nimport LineChart from '../../Charts/LineChart';\nimport ModulesList from './ModulesList';\nimport TemplatesList from './TemplatesList';\nimport FilterableToolbar from '../../Components/Toolbar';\nimport ApiErrorState from '../../Components/ApiStatus/ApiErrorState';\n\nimport { clusters } from '../../Utilities/constants';\nimport useRequest from '../../Utilities/useRequest';\nimport { getQSConfig } from '../../Utilities/qs';\n\nconst initialTopTemplateParams = {\n  group_by: 'template',\n  limit: 10,\n  job_type: ['job'],\n  group_by_time: false,\n  status: ['successful', 'failed'],\n};\n\nconst initialTopWorkflowParams = {\n  group_by: 'template',\n  limit: 10,\n  job_type: ['workflowjob'],\n  group_by_time: false,\n  status: ['successful', 'failed'],\n};\n\nconst initialModuleParams = {\n  group_by: 'module',\n  sort_options: 'host_task_count',\n  sort_oder: 'desc',\n  limit: 10,\n};\n\nconst initialOptionsParams = {\n  attributes: jobExplorer.attributes,\n};\n\n// takes json and returns\nconst qsConfig = getQSConfig('clusters', { ...clusters.defaultParams }, [\n  'limit',\n  'offset',\n]);\n\nconst Clusters = () => {\n  // params from toolbar/searchbar\n  const optionsQueryParams = useQueryParams(initialOptionsParams);\n  const { queryParams, setFromToolbar } = useQueryParams(qsConfig);\n  const {\n    result: options,\n    error,\n    request: fetchOptions,\n  } = useRequest(\n    useCallback(\n      () => readClustersOptions(optionsQueryParams),\n      [optionsQueryParams]\n    ),\n    {}\n  );\n\n  const {\n    result: chartData,\n    isLoading: chartDataIsLoading,\n    isSuccess: chartDataIsSuccess,\n    request: fetchChartData,\n  } = useRequest(\n    useCallback(async () => {\n      const chartData = await readJobExplorer(queryParams);\n      return chartData.items;\n    }, [queryParams]),\n    []\n  );\n\n  const {\n    result: modules,\n    isLoading: modulesIsLoading,\n    request: fetchModules,\n  } = useRequest(\n    useCallback(async () => {\n      const modules = await readEventExplorer(topModuleParams);\n      return modules.items;\n    }, [queryParams]),\n    []\n  );\n\n  const {\n    result: templates,\n    isLoading: templatesIsLoading,\n    request: fetchTemplates,\n  } = useRequest(\n    useCallback(async () => {\n      const templates = await readJobExplorer(topTemplatesParams);\n      return templates.items;\n    }, [queryParams]),\n    []\n  );\n\n  const {\n    result: workflows,\n    isLoading: workflowsIsLoading,\n    request: fetchWorkflows,\n  } = useRequest(\n    useCallback(async () => {\n      const workflows = await readJobExplorer(topWorkflowParams);\n      return workflows.items;\n    }, [queryParams]),\n    []\n  );\n\n  useEffect(() => {\n    fetchOptions();\n    fetchChartData();\n    fetchModules();\n    fetchTemplates();\n    fetchWorkflows();\n  }, [queryParams]);\n\n  const {\n    cluster_id,\n    org_id,\n    template_id,\n    quick_date_range,\n    start_date,\n    end_date,\n  } = queryParams;\n\n  const topTemplatesParams = {\n    cluster_id,\n    org_id,\n    template_id,\n    quick_date_range,\n    start_date,\n    end_date,\n    ...initialTopTemplateParams,\n  };\n\n  const topWorkflowParams = {\n    cluster_id,\n    org_id,\n    template_id,\n    quick_date_range,\n    start_date,\n    end_date,\n    ...initialTopWorkflowParams,\n  };\n\n  const topModuleParams = {\n    cluster_id,\n    org_id,\n    template_id,\n    quick_date_range,\n    start_date,\n    end_date,\n    ...initialModuleParams,\n  };\n\n  if (error) return <ApiErrorState message={error.error} />;\n\n  const renderContent = () => {\n    // Warning: we are not checking if ALL the api succeed\n    // this can cause an unsurfaced error when only some of them fails\n    return (\n      <Grid hasGutter>\n        <GridItem span={12}>\n          <Card>\n            <CardTitle>\n              <h2>Job status</h2>\n            </CardTitle>\n            <CardBody>\n              {chartDataIsLoading && <LoadingState />}\n              {(!queryParams.cluster_id ||\n                queryParams.cluster_id?.length <= 0) &&\n                chartDataIsSuccess && (\n                  <BarChart\n                    margin={{ top: 20, right: 20, bottom: 50, left: 70 }}\n                    id=\"d3-bar-chart-root\"\n                    data={chartData}\n                    queryParams={queryParams}\n                  />\n                )}\n              {queryParams.cluster_id?.length > 0 && chartDataIsSuccess && (\n                <LineChart\n                  margin={{ top: 20, right: 20, bottom: 50, left: 70 }}\n                  id=\"d3-line-chart-root\"\n                  data={chartData}\n                  queryParams={queryParams}\n                />\n              )}\n            </CardBody>\n          </Card>\n        </GridItem>\n        <GridItem span={4}>\n          <TemplatesList\n            qp={queryParams}\n            templates={workflows}\n            isLoading={workflowsIsLoading}\n            title={'Top workflows'}\n            jobType={'workflowjob'}\n          />\n        </GridItem>\n        <GridItem span={4}>\n          <TemplatesList\n            qp={queryParams}\n            templates={templates}\n            isLoading={templatesIsLoading}\n            title={'Top templates'}\n            jobType={'job'}\n          />\n        </GridItem>\n        <GridItem span={4}>\n          <ModulesList modules={modules} isLoading={modulesIsLoading} />\n        </GridItem>\n      </Grid>\n    );\n  };\n\n  return (\n    <>\n      <PageHeader>\n        <PageHeaderTitle title={'Clusters'} />\n        <FilterableToolbar\n          categories={options}\n          qsConfig={qsConfig}\n          filters={queryParams}\n          setFilters={setFromToolbar}\n        />\n      </PageHeader>\n      <Main>{renderContent()}</Main>\n    </>\n  );\n};\n\nexport default Clusters;\n"],"names":["Tooltip","opts","d","success","fail","total","x","d3","svg","node","getBoundingClientRect","y","formatTooltipDate","toolTipWidth","toolTipBase","width","chartWidth","flipped","RAN","FAIL","TOTAL","date","text","DATE","data","jobs","jobsWidth","getComputedTextLength","failed","successful","successTextWidth","failTextWidth","adjustedWidth","maxTextPerc","boxWidth","overage","boundingBox","attr","toolTipPoint","circleSuccess","circleFail","failedIcon","successIcon","successText","failText","clickMore","style","interrupt","transition","delay","this","colors","draw","append","slice","textWidthThreshold","BarChart","props","bind","init","resize","redirectToJobExplorer","state","formattedData","timeout","jobExplorer","Paths","formattedDate","formatDate","initialQueryParams","start_date","end_date","quick_date_range","status","template_id","queryParams","org_id","job_type","search","stringify","arrayFormat","history","push","pathname","clearTimeout","setState","setTimeout","id","remove","ticks","parseTime","reduce","formatted","created_date","successful_count","failed_count","Date","concat","getWidth","height","getHeight","rangeRound","padding","range","margin","left","right","top","bottom","barTooltip","layers","keys","order","offset","stack","domain","map","length","call","tickSize","selectAll","maxTicks","Math","round","i","undefined","filter","item","tickValues","tickFormat","layer","enter","_d","bandwidth","duration","ease","on","handleMouseOver","handleMouseOut","window","addEventListener","prevProps","removeEventListener","Component","propTypes","PropTypes","initializeChart","LineChart","updateCluster","cluster_id","path","attrTween","tweenDash","l","getTotalLength","t","tooltip","unformattedData","successLine","curve","failLine","defined","isNaN","vertical","handleMouseMove","intersectX","cx","baseVal","value","DataListCell","styled","PFDataListCell","DataListItem","PFDataListItem","DataCellEnd","ModulesList","modules","isLoading","DataList","maxHeight","overflow","background","key","border","LoadingState","NoData","module","name","index","host_task_count","trimStr","ActionContainer","formatTopFailedTask","percentage","ceil","total_failed_count","task_name","formatSuccessRate","successCount","totalCount","ModalContents","selectedId","isOpen","handleModal","qp","jobType","useRequest","useCallback","readJobExplorer","agreggateTemplateParams","stats","result","fetchStats","request","statsApi","relatedTemplateJobsParams","relatedJobs","fetchJobs","jobsApi","useHistory","attributes","group_by_time","limit","sort_options","sort_oder","group_by","useEffect","elapsed","statsData","isSuccess","items","categoryCount","cancelled","canceled_count","error","error_count","new","new_count","pending","pending_count","running","running_count","waiting","waiting_count","categoryColor","global_palette_green_200","global_palette_black_850","global_palette_orange_300","global_palette_red_100","global_palette_cyan_200","global_palette_purple_300","global_palette_blue_300","global_palette_light_green_200","descriptionStats","label","total_count","formatTotalTime","toISOString","substr","formatJobType","most_failed_tasks","cleanup","Modal","variant","ModalVariant","title","onClose","ApiErrorState","message","NoResults","Breakdown","DescriptionList","isHorizontal","columnModifier","lg","DescriptionListGroup","className","DescriptionListTerm","DescriptionListDescription","Divider","component","marginTop","marginBottom","TableComposable","Thead","Tr","heading","idx","Th","Tbody","job","Td","template_name","JobStatus","cluster_name","formatDateTime","finished","Button","onClick","TemplatesList","templates","useState","setSelectedId","isModalOpen","setIsModalOpen","displayJobType","type","initialTopTemplateParams","initialTopWorkflowParams","initialModuleParams","initialOptionsParams","qsConfig","getQSConfig","clusters","optionsQueryParams","useQueryParams","setFromToolbar","readClustersOptions","options","fetchOptions","chartData","chartDataIsLoading","chartDataIsSuccess","fetchChartData","readEventExplorer","topModuleParams","modulesIsLoading","fetchModules","topTemplatesParams","templatesIsLoading","fetchTemplates","topWorkflowParams","workflows","workflowsIsLoading","fetchWorkflows","PageHeader","PageHeaderTitle","categories","filters","setFilters","Main","Grid","hasGutter","GridItem","span","Card","CardTitle","CardBody"],"sourceRoot":""}