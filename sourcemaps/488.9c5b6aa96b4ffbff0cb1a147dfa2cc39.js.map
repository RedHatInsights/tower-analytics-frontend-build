{"version":3,"file":"js/488.14a7e8538803ff4f2273.js","mappings":"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","sources":["webpack:///./src/Containers/Reports/List/ListItem/index.tsx","webpack:///./src/Containers/Reports/List/List.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {\n  Card,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle as PFCardTitle,\n  CardBody,\n  CardFooter,\n  Label as PFLabel,\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core';\n\nimport paths from '../../paths';\nimport { TAGS } from '../../Shared/constants';\nimport { BaseReportProps } from '../../Layouts/types';\n\nconst CardTitle = styled(PFCardTitle)`\n  word-break: break-word;\n`;\n\nconst Small = styled.small`\n  display: block;\n  margin-bottom: 10px;\n  color: #6a6e73;\n  white-space: pre-line;\n`;\n\nconst Label = styled(PFLabel)`\n  margin-right: 10px;\n  margin-bottom: 10px;\n`;\n\ninterface Props {\n  report: BaseReportProps;\n  selected: string;\n  setSelected: (newSelection: string) => void;\n}\n\nconst ListItem: FunctionComponent<Props> = ({\n  report: { slug, description, name, tags },\n  selected,\n  setSelected,\n}) => {\n  return (\n    <Card\n      data-cy={slug}\n      isSelectableRaised\n      isSelected={selected === slug}\n      onClick={() => {\n        setSelected(slug);\n      }}\n    >\n      <CardHeader>\n        <CardHeaderMain>\n          <CardTitle onClick={(event) => event.stopPropagation()}>\n            <Tooltip content={<div>Click to go to report details</div>}>\n              <Link to={paths.getDetails(slug)}>{name}</Link>\n            </Tooltip>\n          </CardTitle>\n        </CardHeaderMain>\n      </CardHeader>\n      <CardBody>\n        {description ? (\n          <Tooltip\n            content={<div>Show report in preview</div>}\n            position=\"bottom\"\n          >\n            <Small>{description}</Small>\n          </Tooltip>\n        ) : null}\n      </CardBody>\n      <CardFooter>\n        {tags.map((tagKey, idx) => {\n          const tag = TAGS.find((t) => t.key === tagKey);\n          if (tag) {\n            return (\n              <Tooltip\n                key={`tooltip_${idx}`}\n                position={TooltipPosition.top}\n                content={tag.description}\n              >\n                <Label key={idx}>{tag.name}</Label>\n              </Tooltip>\n            );\n          }\n        })}\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default ListItem;\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { PageHeader } from '@ansible/ansible-ui-framework';\nimport {\n  Button,\n  ButtonVariant,\n  Card,\n  CardActions,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  Gallery,\n  Label,\n  PageSection,\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core';\nimport {\n  AngleLeftIcon,\n  AngleRightIcon,\n  CaretDownIcon,\n} from '@patternfly/react-icons';\n\nimport paths from '../paths';\nimport ListItem from './ListItem';\nimport { TagName, TAGS } from '../Shared/constants';\nimport getComponent from '../Layouts/index';\nimport useRequest from '../../../Utilities/useRequest';\nimport { readReport, readReports, reportOptions } from '../../../Api';\nimport { ReportSchema } from '../Layouts/types';\nimport { reportDefaultParams } from '../../../Utilities/constants';\nimport { useQueryParams } from '../../../QueryParams';\nimport FilterableToolbar from '../../../Components/Toolbar/Toolbar';\nimport EmptyList from '../../../Components/EmptyList';\nimport NoData from '../../../Components/ApiStatus/NoData';\n\nexport interface Report {\n  slug: string;\n  name: string;\n  description: string;\n  tags: any[];\n  tableHeaders: string[];\n}\n\nconst List: FunctionComponent<Record<string, never>> = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  let index = 0;\n  let nextItem = '';\n  let previousItem = '';\n  const queryParams = useQueryParams(\n    reportDefaultParams('reports'),\n    'allReports'\n  ).queryParams;\n  const setFromToolbar = useQueryParams(\n    reportDefaultParams('reports'),\n    'allReports'\n  ).setFromToolbar;\n\n  const {\n    result: { reports: data },\n    isSuccess: isSuccess,\n    error: error,\n    request: fetchReports,\n  } = useRequest(readReports, { reports: [] });\n\n  const optionsQueryParams = useQueryParams(reportDefaultParams('reports'));\n  const { result: options, request: fetchOptions } = useRequest(\n    reportOptions,\n    {}\n  );\n\n  useEffect(() => {\n    fetchReports(queryParams);\n    fetchOptions(optionsQueryParams.queryParams);\n  }, [queryParams]);\n\n  const reports = data as Report[];\n  const selected = queryParams.selected_report || reports[0]?.slug || '';\n  const setSelected = (slug: string) => setFromToolbar('selected_report', slug);\n\n  const {\n    result: previewReport,\n    request: fetchReport,\n    isSuccess: isReportSuccess,\n  } = useRequest(async () => {\n    const response = await readReport(selected);\n    return response.report as ReportSchema;\n  }, {} as ReportSchema);\n\n  useEffect(() => {\n    if (isSuccess && reports.length > 0) {\n      const report = reports.filter(({ slug }) => selected === slug);\n      if (selected === '' || report.length === 0) setSelected(reports[0].slug);\n      fetchReport();\n    }\n  }, [reports]);\n\n  const dropdownItems = [\n    isSuccess &&\n      reports.length > 0 &&\n      isReportSuccess &&\n      reports.map((report) => {\n        return (\n          <Button\n            key={report.slug}\n            variant={ButtonVariant.plain}\n            aria-label=\"Report list item\"\n            onClick={() => setSelected(report.slug)}\n          >\n            <DropdownItem key={report.slug}>{report.name}</DropdownItem>\n          </Button>\n        );\n      }),\n  ];\n\n  return (\n    <>\n      <PageHeader data-cy={'header-all_reports'} title={'Reports'} />\n      <FilterableToolbar\n        categories={options}\n        filters={queryParams}\n        setFilters={setFromToolbar}\n      />\n      {isSuccess && reports.length > 0 && isReportSuccess && (\n        <PageSection>\n          {reports\n            .filter((report: Report) => report.slug === selected)\n            .map((report) => {\n              return (\n                (index = reports.indexOf(report)),\n                reports.indexOf(report) < reports.length - 1 &&\n                  (nextItem = reports[index + 1].slug),\n                reports.indexOf(report) > 0 &&\n                  (previousItem = reports[index - 1].slug),\n                (\n                  <>\n                    <Card\n                      key={report.slug}\n                      style={{\n                        maxWidth: '100%',\n                        marginBottom: '25px',\n                      }}\n                      isCompact\n                      data-cy={report.slug}\n                    >\n                      <CardHeader\n                        style={{\n                          paddingTop: '16px',\n                          paddingBottom: '16px',\n                          paddingRight: '0px',\n                        }}\n                      >\n                        <CardTitle>\n                          <Link\n                            data-cy={'preview_title_link'}\n                            to={paths.getDetails(report.slug)}\n                          >\n                            {report.name}\n                          </Link>\n                        </CardTitle>\n                        <CardActions\n                          style={{ marginLeft: '15px', marginTop: '-2px' }}\n                        >\n                          {report.tags.map(\n                            (\n                              tagKey: TagName,\n                              idx: React.Key | null | undefined\n                            ) => {\n                              const tag = TAGS.find((t) => t.key === tagKey);\n                              if (tag) {\n                                return (\n                                  <Tooltip\n                                    key={`tooltip_${idx as string}`}\n                                    position={TooltipPosition.top}\n                                    content={tag.description}\n                                  >\n                                    <Label key={idx}>{tag.name}</Label>\n                                  </Tooltip>\n                                );\n                              }\n                            }\n                          )}\n                        </CardActions>\n                        <CardActions>\n                          <Button\n                            variant={ButtonVariant.plain}\n                            aria-label=\"Previous report\"\n                            data-cy={'previous_report_button'}\n                            isDisabled={reports.indexOf(report) === 0}\n                            onClick={() => setSelected(previousItem)}\n                          >\n                            <AngleLeftIcon />\n                          </Button>\n                          <Dropdown\n                            data-cy={'preview_dropdown'}\n                            isPlain\n                            onSelect={() => setIsOpen(!isOpen)}\n                            toggle={\n                              <DropdownToggle\n                                onToggle={(next) => setIsOpen(next)}\n                                toggleIndicator={CaretDownIcon}\n                                id=\"report_list\"\n                                data-cy={'selected_report_dropdown'}\n                                style={{ color: '#151515' }}\n                              >\n                                {report.name}\n                              </DropdownToggle>\n                            }\n                            isOpen={isOpen}\n                            dropdownItems={dropdownItems}\n                          />\n                          <Button\n                            variant={ButtonVariant.plain}\n                            aria-label=\"Next report\"\n                            data-cy=\"next_report_button\"\n                            isDisabled={\n                              reports.indexOf(report) >= reports.length - 1\n                            }\n                            onClick={() => setSelected(nextItem)}\n                          >\n                            <AngleRightIcon />\n                          </Button>\n                        </CardActions>\n                      </CardHeader>\n                      <Divider />\n                      {report.slug === previewReport.slug\n                        ? getComponent(previewReport, false)\n                        : ''}\n                      <CardFooter style={{ paddingBottom: '16px' }}>\n                        <Link\n                          to={paths.getDetails(report.slug)}\n                          style={{ float: 'right' }}\n                          data-cy={'view_full_report_link'}\n                        >\n                          View full report\n                        </Link>\n                      </CardFooter>\n                    </Card>\n                  </>\n                )\n              );\n            })}\n          <Gallery\n            data-cy=\"all_reports\"\n            hasGutter\n            minWidths={{\n              sm: '307px',\n              md: '307px',\n              lg: '307px',\n              xl: '307px',\n              '2xl': '307px',\n            }}\n          >\n            {reports.map((report) => (\n              <ListItem\n                key={report.slug}\n                report={report}\n                selected={selected}\n                setSelected={setSelected}\n              />\n            ))}\n          </Gallery>\n        </PageSection>\n      )}\n      {isSuccess && reports.length === 0 && (\n        <EmptyList\n          label={'Clear all filters'}\n          title={'No results found'}\n          message={\n            'No results match the filter criteria. Clear all filters and try again.'\n          }\n          showButton={true}\n          path={'/ansible/automation-analytics/reports'}\n        />\n      )}\n      {error && <NoData />}\n    </>\n  );\n};\n\nexport default List;\n"],"names":["Small","small","report","slug","description","name","tags","selected","setSelected","Card","isSelectableRaised","isSelected","onClick","CardHeader","CardHeaderMain","event","stopPropagation","Tooltip","content","Link","to","paths","getDetails","CardBody","position","CardFooter","map","tagKey","idx","tag","find","t","key","top","isOpen","setIsOpen","useState","index","nextItem","previousItem","queryParams","setFromToolbar","result","reports","data","isSuccess","error","request","fetchReports","useRequest","optionsQueryParams","options","fetchOptions","useEffect","selected_report","previewReport","fetchReport","isReportSuccess","async","length","filter","dropdownItems","Button","variant","plain","DropdownItem","PageHeader","title","categories","filters","setFilters","PageSection","indexOf","style","maxWidth","marginBottom","isCompact","paddingTop","paddingBottom","paddingRight","CardTitle","CardActions","marginLeft","marginTop","Label","isDisabled","Dropdown","isPlain","onSelect","toggle","DropdownToggle","onToggle","next","toggleIndicator","id","color","Divider","float","Gallery","hasGutter","minWidths","sm","md","lg","xl","EmptyList","label","message","showButton","path","NoData"],"sourceRoot":""}