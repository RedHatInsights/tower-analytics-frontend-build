{"version":3,"file":"js/720.dfdd773b7c6c5bdbe9db.js","mappings":"qWAaMA,GAAwBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uEAIrBE,GAAkBF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,uEAIfI,GAAiBJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,qEAIdM,GAAkBN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,wEAIfQ,GAA0BR,EAAAA,EAAAA,IAAOS,EAAAA,GAAPT,CAAH,wEAIvBU,EAASV,EAAAA,GAAAA,IAAH,iFAONW,EAAa,SAAC,GAOd,IANJC,EAMI,EANJA,OACAC,EAKI,EALJA,MAKI,IAJJC,MAAAA,OAII,MAJI,cAIJ,MAHJC,QAAAA,OAGI,MAHM,UAGN,EAFJC,EAEI,EAFJA,SACGC,GACC,YACEC,EAAe,CACnBC,OAAQ,kBAACpB,EAAD,CAAuBqB,KAAK,OACpCC,MAAO,kBAACnB,EAAD,CAAiBkB,KAAK,OAC7BE,KAAM,kBAAClB,EAAD,CAAgBgB,KAAK,OAC3BG,QAAS,kBAACjB,EAAD,CAAiBc,KAAK,OAC/BI,QAAS,kBAAChB,EAAD,CAAyBY,KAAK,QAGnCK,EACJ,kBAACf,EAAD,KACGK,EAAUG,EAAaH,GAAW,KACnC,kBAAC,EAAAW,MAAD,CAAOC,GAAG,2BAA2BP,KAAK,MAAMQ,aAAa,MAC1Df,IAKP,OACE,kBAAC,EAAAgB,OAAD,QACEC,OAAQL,EACR,aAAYX,EACZ,kBAAgB,2BAChBF,SAAUA,EACVG,QAAQ,QACRF,MAAOA,GACHI,GAEHD,IAKPL,EAAWoB,UAAY,CACrBnB,OAAQoB,IAAAA,KAAAA,WACRnB,MAAOmB,IAAAA,OAAAA,WACPlB,MAAOkB,IAAAA,OACPjB,QAASiB,IAAAA,OACThB,SAAUgB,IAAAA,MAGZ,W,sJC9EMC,EAAc,SAAC,GAAmC,QAAjCC,MAAAA,OAAiC,MAAzB,GAAyB,MAArBC,QAAAA,OAAqB,MAAX,KAAW,EACtD,OACE,kBAAC,EAAAC,WAAD,KACGF,EAAMG,KAAI,YAAyB,IAAtBxB,EAAsB,EAAtBA,MAAOyB,EAAe,EAAfA,SACnB,OACE,kBAAC,EAAAC,eAAD,CAAgBC,IAAK3B,GACnB,kBAAC,EAAA4B,KAAD,CAAMC,GAAIJ,GAAWzB,OAI1BsB,GAAW,kBAAC,EAAAQ,kBAAD,KAAoBR,KAKtCF,EAAYF,UAAY,CACtBG,MAAOF,IAAAA,QACLA,IAAAA,MAAgB,CACdM,SAAUN,IAAAA,IACVnB,MAAOmB,IAAAA,QAGXG,QAASH,IAAAA,MAGX,W,+HCzBMY,GAAO5C,EAAAA,EAAAA,IAAO6C,EAAAA,KAAP7C,CAAH,mHAKJ8C,GAAW9C,EAAAA,EAAAA,IAAO+C,EAAAA,SAAP/C,CAAH,mEAKRgD,GAAahD,EAAAA,EAAAA,IAAOiD,EAAAA,kBAAPjD,CAAH,qLAWhB,SAASkD,EAAT,GAAgC,IAAT7B,EAAS,EAATA,MACrB,GAAoC8B,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAMA,OACE,oCACGC,MAAMC,QAAQlC,IAAUA,EAAMmC,QAC7B,kBAACR,EAAD,CACES,WAAY,UACZC,SATa,WACnBL,GAAeD,IASTA,WAAYA,GAEZ,kBAACR,EAAD,KACE,kBAACE,EAAD,KACE,4BACGzB,EAAMgB,KAAI,SAACsB,GAAD,MACI,iBAANA,EAAiB,wBAAInB,IAAKmB,GAAIA,GAAU,aAWjET,EAAYnB,UAAY,CACtBV,MAAOW,IAAAA,QAAkBA,IAAAA,SAG3B,W","sources":["webpack:///./src/Components/AlertModal/AlertModal.js","webpack:///./src/Components/Breadcrumbs.js","webpack:///./src/Components/ErrorDetail/ErrorDetail.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Modal, Title } from '@patternfly/react-core';\nimport {\n  CheckCircleIcon as PFCheckCircleIcon,\n  ExclamationCircleIcon as PFExclamationCircleIcon,\n  ExclamationTriangleIcon as PFExclamationTriangleIcon,\n  InfoCircleIcon as PFInfoCircleIcon,\n  TimesCircleIcon as PFTimesCircleIcon,\n} from '@patternfly/react-icons';\nimport styled from 'styled-components';\n\nconst ExclamationCircleIcon = styled(PFExclamationCircleIcon)`\n  color: var(--pf-global--danger-color--100);\n`;\n\nconst TimesCircleIcon = styled(PFTimesCircleIcon)`\n  color: var(--pf-global--danger-color--100);\n`;\n\nconst InfoCircleIcon = styled(PFInfoCircleIcon)`\n  color: var(--pf-global--info-color--100);\n`;\n\nconst CheckCircleIcon = styled(PFCheckCircleIcon)`\n  color: var(--pf-global--success-color--100);\n`;\n\nconst ExclamationTriangleIcon = styled(PFExclamationTriangleIcon)`\n  color: var(--pf-global--warning-color--100);\n`;\n\nconst Header = styled.div`\n  display: flex;\n  svg {\n    margin-right: 16px;\n  }\n`;\n\nconst AlertModal = ({\n  isOpen,\n  title,\n  label = 'Alert modal',\n  variant = 'warning',\n  children,\n  ...props\n}) => {\n  const variantIcons = {\n    danger: <ExclamationCircleIcon size=\"lg\" />,\n    error: <TimesCircleIcon size=\"lg\" />,\n    info: <InfoCircleIcon size=\"lg\" />,\n    success: <CheckCircleIcon size=\"lg\" />,\n    warning: <ExclamationTriangleIcon size=\"lg\" />,\n  };\n\n  const customHeader = (\n    <Header>\n      {variant ? variantIcons[variant] : null}\n      <Title id=\"alert-modal-header-label\" size=\"2xl\" headingLevel=\"h2\">\n        {title}\n      </Title>\n    </Header>\n  );\n\n  return (\n    <Modal\n      header={customHeader}\n      aria-label={label}\n      aria-labelledby=\"alert-modal-header-label\"\n      isOpen={!!isOpen}\n      variant=\"small\"\n      title={title}\n      {...props}\n    >\n      {children}\n    </Modal>\n  );\n};\n\nAlertModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  variant: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default AlertModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbHeading,\n} from '@patternfly/react-core';\n\nconst Breadcrumbs = ({ items = [], current = null }) => {\n  return (\n    <Breadcrumb>\n      {items.map(({ title, navigate }) => {\n        return (\n          <BreadcrumbItem key={title}>\n            <Link to={navigate}>{title}</Link>\n          </BreadcrumbItem>\n        );\n      })}\n      {current && <BreadcrumbHeading>{current}</BreadcrumbHeading>}\n    </Breadcrumb>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      navigate: PropTypes.any,\n      title: PropTypes.node,\n    })\n  ),\n  current: PropTypes.node,\n};\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport {\n  Card as PFCard,\n  CardBody as PFCardBody,\n  ExpandableSection as PFExpandable,\n} from '@patternfly/react-core';\n\nconst Card = styled(PFCard)`\n  background-color: var(--pf-global--BackgroundColor--200);\n  overflow-wrap: break-word;\n`;\n\nconst CardBody = styled(PFCardBody)`\n  max-height: 200px;\n  overflow: scroll;\n`;\n\nconst Expandable = styled(PFExpandable)`\n  text-align: left;\n\n  & .pf-c-expandable__toggle {\n    padding-left: 10px;\n    margin-left: 5px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n`;\n\nfunction ErrorDetail({ error }) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const handleToggle = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return (\n    <>\n      {Array.isArray(error) && error.length && (\n        <Expandable\n          toggleText={'Details'}\n          onToggle={handleToggle}\n          isExpanded={isExpanded}\n        >\n          <Card>\n            <CardBody>\n              <ul>\n                {error.map((m) =>\n                  typeof m === 'string' ? <li key={m}>{m}</li> : null\n                )}\n              </ul>\n            </CardBody>\n          </Card>\n        </Expandable>\n      )}\n    </>\n  );\n}\n\nErrorDetail.propTypes = {\n  error: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default ErrorDetail;\n"],"names":["ExclamationCircleIcon","styled","PFExclamationCircleIcon","TimesCircleIcon","PFTimesCircleIcon","InfoCircleIcon","PFInfoCircleIcon","CheckCircleIcon","PFCheckCircleIcon","ExclamationTriangleIcon","PFExclamationTriangleIcon","Header","AlertModal","isOpen","title","label","variant","children","props","variantIcons","danger","size","error","info","success","warning","customHeader","Title","id","headingLevel","Modal","header","propTypes","PropTypes","Breadcrumbs","items","current","Breadcrumb","map","navigate","BreadcrumbItem","key","Link","to","BreadcrumbHeading","Card","PFCard","CardBody","PFCardBody","Expandable","PFExpandable","ErrorDetail","useState","isExpanded","setIsExpanded","Array","isArray","length","toggleText","onToggle","m"],"sourceRoot":""}