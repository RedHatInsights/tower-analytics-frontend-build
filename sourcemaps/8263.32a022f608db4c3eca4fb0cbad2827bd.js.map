{"version":3,"file":"js/8263.1680819997222.3e4cfd4b37550205fa7d.js","mappings":"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","sources":["webpack:///./src/Charts/Breakdown.js","webpack:///./src/Containers/JobExplorer/JobExplorer.js","webpack:///./src/Components/JobStatus.tsx","webpack:///./src/Components/Pagination/Pagination.tsx","webpack:///./src/Components/Pagination/index.ts"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst BarContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  width: 100%;\n  max-width: 100%;\n  height: 1rem;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n`;\n\nconst Bar = styled.div`\n  height: 100%;\n`;\n\nconst LabelsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-bottom: 1rem;\n`;\n\nconst Label = styled.div`\n  padding-left: 2rem;\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n`;\n\nconst Square = styled.div`\n  width: 0.75rem;\n  height: 0.75rem;\n  margin-right: 0.5rem;\n`;\n\nconst whiteSpace = 0.15; // Currently in percent of total bar width\n\nfunction title(str) {\n  return str[0].toUpperCase() + str.slice(1).toLowerCase();\n}\n\nconst Breakdown = ({ categoryCount, categoryColor, showPercent = false }) => {\n  const totalCount = Object.values(categoryCount).reduce(\n    (accumulated, currentVal) => accumulated + currentVal\n  );\n\n  const sortedCategories = Object.keys(categoryCount)\n    .filter((category) => categoryCount[category] > 0)\n    .sort((a, b) => {\n      if (categoryCount[a] < categoryCount[b]) {\n        return 1; // Normally should be -1, but we want descending order\n      }\n      if (categoryCount[a] > categoryCount[b]) {\n        return -1;\n      }\n      return 0;\n    })\n    .map((category) => {\n      return {\n        name: category,\n        barSpacing: categoryCount[category] / totalCount,\n        color: categoryColor[category],\n      };\n    });\n\n  const remainingSpace = 1 - ((sortedCategories.length - 1) * whiteSpace) / 100;\n\n  return (\n    <>\n      <BarContainer>\n        {sortedCategories.map(({ barSpacing, color }, idx) => {\n          if (idx < sortedCategories.length - 1) {\n            return (\n              <React.Fragment key={idx}>\n                <Bar\n                  style={{\n                    backgroundColor: color,\n                    width: `${barSpacing * 100 * remainingSpace}%`,\n                  }}\n                />\n                <Bar\n                  style={{\n                    backgroundColor: 'transparent',\n                    width: `${whiteSpace}%`,\n                  }}\n                />\n              </React.Fragment>\n            );\n          } else {\n            return (\n              <React.Fragment key={idx}>\n                <Bar\n                  style={{\n                    backgroundColor: color,\n                    width: `${barSpacing * 100 * remainingSpace}%`,\n                  }}\n                />\n              </React.Fragment>\n            );\n          }\n        })}\n      </BarContainer>\n      <LabelsContainer>\n        {sortedCategories.map(({ name, barSpacing, color }) => (\n          <Label key={`label-${name}`}>\n            <Square style={{ backgroundColor: color }} />\n            {showPercent ? (\n              <p>\n                {title(name)} {Math.round(barSpacing * 100)}%\n              </p>\n            ) : (\n              <p>{title(name)}</p>\n            )}\n          </Label>\n        ))}\n      </LabelsContainer>\n    </>\n  );\n};\n\nBreakdown.propTypes = {\n  categoryColor: PropTypes.object.isRequired,\n  categoryCount: PropTypes.object.isRequired,\n  showPercent: PropTypes.bool,\n};\n\nexport default Breakdown;\n","import React, { useEffect, useState } from 'react';\n\nimport { useQueryParams } from '../../QueryParams/';\nimport useRequest from '../../Utilities/useRequest';\nimport { formatDateTime, formatJobType } from '../../Utilities/helpers';\nimport JobStatus from '../../Components/JobStatus';\nimport Breakdown from '../../Charts/Breakdown';\n\nimport ApiErrorState from '../../Components/ApiStatus/ApiErrorState';\nimport Pagination from '../../Components/Pagination';\n\nimport { readJobExplorer, readJobExplorerOptions } from '../../Api/';\nimport { jobExplorer } from '../../Utilities/constants';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DescriptionListDescription,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  PageSection,\n  PaginationVariant,\n} from '@patternfly/react-core';\nimport {\n  global_palette_green_300,\n  global_palette_black_400,\n  global_palette_gold_300,\n  global_palette_red_100,\n  global_palette_blue_300,\n} from '@patternfly/react-tokens';\nimport { ExpandableRowContent } from '@patternfly/react-table';\n\nimport FilterableToolbar from '../../Components/Toolbar/';\nimport { SettingsPanel } from '../../Components/Toolbar/Groups';\nimport { PageHeader, PageTable, TextCell } from '@ansible/ansible-ui-framework';\n\nconst JobExplorer = () => {\n  const {\n    queryParams,\n    setFromPagination,\n    setFromToolbar,\n    dispatch: queryParamsDispatch,\n  } = useQueryParams(jobExplorer.defaultParams);\n\n  const {\n    result: options,\n    error,\n    request: fetchOptions,\n  } = useRequest(readJobExplorerOptions, {});\n\n  const {\n    result: { items: data, meta },\n    request: fetchEndpoints,\n  } = useRequest(readJobExplorer, { items: [], meta: { count: 0 } });\n\n  useEffect(() => {\n    fetchOptions(queryParams);\n    fetchEndpoints(queryParams);\n  }, [queryParams]);\n\n  if (error) return <ApiErrorState message={error.error.error} />;\n\n  const setSort = (idx) => {\n    if (idx !== queryParams.sort_options) {\n      queryParamsDispatch({\n        type: 'SET_SORT_OPTIONS',\n        value: { sort_options: idx },\n      });\n      queryParamsDispatch({\n        type: 'SET_SORT_ORDER',\n        value: {\n          sort_order: 'asc',\n        },\n      });\n    } else {\n      queryParamsDispatch({\n        type: 'SET_SORT_ORDER',\n        value: {\n          sort_order: queryParams.sort_order === 'asc' ? 'desc' : 'asc',\n        },\n      });\n    }\n  };\n\n  const categoryColor = {\n    ok: global_palette_green_300.value,\n    passed: global_palette_green_300.value,\n    unreachable: global_palette_black_400.value,\n    changed: global_palette_gold_300.value,\n    failed: global_palette_red_100.value,\n    skipped: global_palette_blue_300.value,\n  };\n\n  const renderMoreButton = (showMore, setShowMore) => {\n    return (\n      <Flex className=\"pf-u-mb-md\">\n        <FlexItem align={{ default: 'alignRight' }}>\n          <Button\n            variant=\"secondary\"\n            onClick={() => {\n              setShowMore(!showMore);\n            }}\n            fullWidth={{ default: 'fullWidth' }}\n          >\n            {showMore ? 'Show less' : 'Show more'}\n          </Button>\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  const renderFailedTaskBar = (failed_tasks) => {\n    const [showMore, setShowMore] = useState(false);\n\n    if (failed_tasks != null) {\n      return (\n        <>\n          <p>\n            <strong>Top failed tasks</strong>\n          </p>\n\n          <Grid hasGutter>\n            {failed_tasks\n              .slice(0, showMore ? failed_tasks.length : 2)\n              .map((task, idx) => {\n                const categoryCount = {\n                  passed: task?.passed_host_count ?? 0,\n                  failed: task?.failed_host_count ?? 0,\n                  unreachable: task?.unreachable_host_count ?? 0,\n                };\n\n                return (\n                  <GridItem lg={6} md={12} key={`most-failed-${idx}`}>\n                    <Flex>\n                      <FlexItem>\n                        <strong>Task name </strong> {task?.task_name}\n                      </FlexItem>\n\n                      <FlexItem align={{ default: 'alignRight' }}>\n                        <strong>Module name </strong> {task?.module_name}\n                      </FlexItem>\n                    </Flex>\n                    <Breakdown\n                      categoryCount={categoryCount}\n                      categoryColor={categoryColor}\n                      showPercent\n                    />\n                  </GridItem>\n                );\n              })}\n          </Grid>\n\n          {failed_tasks.length > 2\n            ? renderMoreButton(showMore, setShowMore)\n            : null}\n        </>\n      );\n    }\n  };\n\n  const categoryCount = (item) =>\n    item\n      ? {\n          ok: item?.ok_host_count ?? 0,\n          skipped: item?.skipped_host_count ?? 0,\n          changed: item?.changed_host_count ?? 0,\n          failed: item?.failed_host_count ?? 0,\n          unreachable: item?.unreachable_host_count ?? 0,\n        }\n      : null;\n\n  const expandedInfo = (item) => [\n    {\n      label: 'Created',\n      value: item.created ? formatDateTime(item.created) : 'Unavailable',\n    },\n    {\n      label: 'Started',\n      value: item.created ? formatDateTime(item.started) : 'Unavailable',\n    },\n    {\n      label: 'Finished',\n      value: item.created ? formatDateTime(item.finished) : 'Unavailable',\n    },\n    {\n      label: 'Tasks',\n      value: item.host_task_count ?? 0,\n    },\n  ];\n\n  const jobExplorerTableColumns = [\n    {\n      header: 'ID/Name',\n      sort: 'id',\n      type: 'text',\n      cell: (item) => <TextCell text={item.id.id} iconSize=\"sm\" />,\n      value: (item) => {\n        return (\n          <a\n            href={item.id.tower_link}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {`${item.id.id} - ${item.id.template_name}`}\n          </a>\n        );\n      },\n    },\n    {\n      header: 'Status',\n      sort: 'status',\n      type: 'label',\n      cell: (item) => <JobStatus status={item?.status} />,\n      value: (item) => {\n        return <JobStatus status={item?.status} />;\n      },\n    },\n    {\n      header: 'Cluster',\n      type: 'text',\n      cell: (item) => <TextCell text={item.cluster_name} iconSize=\"sm\" />,\n      value: (item) => {\n        return item.cluster_name;\n      },\n    },\n    {\n      header: 'Organization',\n      type: 'text',\n      cell: (item) => <TextCell text={item.org_name} iconSize=\"sm\" />,\n      value: (item) => {\n        return item.org_name;\n      },\n    },\n    {\n      header: 'Type',\n      sort: 'job_type',\n      type: 'text',\n      cell: (item) => <TextCell text={item.job_type} iconSize=\"sm\" />,\n      value: (item) => {\n        return formatJobType(item?.job_type);\n      },\n    },\n  ];\n\n  const expandedRowContent = (item) => (\n    <ExpandableRowContent>\n      <Flex>\n        <FlexItem>\n          <strong>Host status</strong>\n        </FlexItem>\n        <FlexItem align={{ default: 'alignRight' }}>\n          <strong>Hosts</strong>\n          {'  '}\n          {item?.host_count ?? 0}\n        </FlexItem>\n      </Flex>\n      <Breakdown\n        categoryCount={categoryCount(item)}\n        categoryColor={categoryColor}\n        showPercent\n      />\n      {renderFailedTaskBar(item.most_failed_tasks)}\n      <DescriptionList isHorizontal columnModifier={{ lg: '3Col' }}>\n        {expandedInfo(item).map(({ label, value }) => (\n          <DescriptionListGroup key={label}>\n            <DescriptionListTerm>{label}</DescriptionListTerm>\n            <DescriptionListDescription>{value}</DescriptionListDescription>\n          </DescriptionListGroup>\n        ))}\n      </DescriptionList>\n    </ExpandableRowContent>\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader title={'Job Explorer'} />\n      <PageSection>\n        <Card>\n          <CardBody>\n            <FilterableToolbar\n              categories={options}\n              filters={queryParams}\n              setFilters={setFromToolbar}\n              pagination={\n                <Pagination\n                  count={meta.count}\n                  params={{\n                    limit: +queryParams.limit,\n                    offset: +queryParams.offset,\n                  }}\n                  setPagination={setFromPagination}\n                  isCompact\n                />\n              }\n              settingsPanel={(setSettingsExpanded, settingsExpanded) => (\n                <SettingsPanel\n                  filters={queryParams}\n                  setFilters={setFromToolbar}\n                  settingsExpanded={settingsExpanded}\n                  setSettingsExpanded={setSettingsExpanded}\n                  id={'showRootWorkflowJobs'}\n                  label={'Ignore nested workflows and jobs'}\n                  labelOff={'Ignore nested workflows and jobs'}\n                  isChecked={\n                    queryParams.only_root_workflows_and_standalone_jobs\n                  }\n                  onChange={(value) => {\n                    setFromToolbar(\n                      'only_root_workflows_and_standalone_jobs',\n                      value\n                    );\n                  }}\n                  ariaLabel={'ignore nested workflow popover'}\n                  bodyContent={\n                    'If enabled, nested workflows and jobs will not be included in the overall totals. Enable this option to filter out duplicate entries.'\n                  }\n                />\n              )}\n              hasSettings\n            />\n            <PageTable\n              pageItems={data}\n              itemCount={meta.count}\n              autoHidePagination\n              tableColumns={jobExplorerTableColumns}\n              expandedRow={expandedRowContent}\n              errorStateTitle={'Error loading templates'}\n              emptyStateTitle={'No templates yet'}\n              emptyStateDescription={'To get started, create a template.'}\n              sort={queryParams.sort_options}\n              sortDirection={queryParams.sort_order}\n              setSort={(e) => setSort(e)}\n            />\n            <Pagination\n              count={meta.count}\n              params={{\n                limit: +queryParams.limit,\n                offset: +queryParams.offset,\n              }}\n              setPagination={setFromPagination}\n              variant={PaginationVariant.bottom}\n            />\n          </CardBody>\n        </Card>\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nexport default JobExplorer;\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { CheckCircleIcon, ExclamationCircleIcon, ClockIcon, SyncAltIcon, ExclamationTriangleIcon, } from '@patternfly/react-icons';\nimport { capitalize } from '../Utilities/helpers';\nvar JobStatus = function (_a) {\n    var status = _a.status;\n    var getColor = function () {\n        switch (status) {\n            case 'successful':\n                return 'green';\n            case 'failed':\n            case 'error':\n                return 'red';\n            case 'running':\n            case 'pending':\n                return 'blue';\n            case 'canceled':\n                return 'orange';\n            // case new, waiting\n            default:\n                return 'grey';\n        }\n    };\n    var getIcon = function () {\n        switch (status) {\n            case 'successful':\n                return React.createElement(CheckCircleIcon, null);\n            case 'failed':\n            case 'error':\n                return React.createElement(ExclamationCircleIcon, null);\n            case 'running':\n                return React.createElement(SyncAltIcon, null);\n            case 'canceled':\n                return React.createElement(ExclamationTriangleIcon, null);\n            // case new, waiting, pending\n            default:\n                return React.createElement(ClockIcon, null);\n        }\n    };\n    return (React.createElement(Label, { variant: \"outline\", color: getColor(), icon: getIcon(), style: { marginRight: '0.5rem', marginBottom: '0.5rem' } }, capitalize(status)));\n};\nexport default JobStatus;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Pagination as PFPagination } from '@patternfly/react-core';\nvar defaultPerPageOptions = [\n    { title: '5', value: 5 },\n    { title: '10', value: 10 },\n    { title: '15', value: 15 },\n    { title: '20', value: 20 },\n    { title: '25', value: 25 },\n];\nvar Pagination = function (_a) {\n    var _b = _a.count, count = _b === void 0 ? 0 : _b, _c = _a.perPageOptions, perPageOptions = _c === void 0 ? null : _c, params = _a.params, setPagination = _a.setPagination, props = __rest(_a, [\"count\", \"perPageOptions\", \"params\", \"setPagination\"]);\n    var offset = params.offset, limit = params.limit;\n    var currentPage = Math.floor(offset / limit + 1);\n    var returnOffsetVal = function (page) { return (page - 1) * limit; };\n    return (React.createElement(PFPagination, __assign({ \"data-cy\": props.isCompact ? 'pagination_top' : 'pagination_bottom', itemCount: count, widgetId: \"aa-pagination\", perPageOptions: perPageOptions !== null && perPageOptions !== void 0 ? perPageOptions : defaultPerPageOptions, perPage: limit, page: currentPage, onPerPageSelect: function (_e, perPage, page) {\n            setPagination(returnOffsetVal(page), perPage);\n        }, onSetPage: function (_e, page) {\n            setPagination(returnOffsetVal(page));\n        } }, props)));\n};\nPagination.propTypes = {\n    count: PropTypes.number,\n    params: PropTypes.exact({\n        offset: PropTypes.number.isRequired,\n        limit: PropTypes.number.isRequired,\n    }).isRequired,\n    setPagination: PropTypes.func.isRequired,\n    perPageOptions: PropTypes.arrayOf(PropTypes.exact({\n        title: PropTypes.string.isRequired,\n        value: PropTypes.number.isRequired,\n    }).isRequired),\n};\nexport default Pagination;\n","import Pagination from './Pagination';\nexport default Pagination;\n"],"names":["BarContainer","styled","Bar","LabelsContainer","Label","Square","title","str","toUpperCase","slice","toLowerCase","Breakdown","categoryCount","categoryColor","showPercent","totalCount","Object","values","reduce","accumulated","currentVal","sortedCategories","keys","filter","category","sort","a","b","map","name","barSpacing","color","remainingSpace","length","idx","key","style","backgroundColor","width","Math","round","propTypes","PropTypes","useQueryParams","jobExplorer","queryParams","setFromPagination","setFromToolbar","queryParamsDispatch","dispatch","useRequest","readJobExplorerOptions","options","result","error","fetchOptions","request","readJobExplorer","items","meta","count","data","fetchEndpoints","useEffect","message","ok","global_palette_green_300","passed","unreachable","global_palette_black_400","changed","global_palette_gold_300","failed","global_palette_red_100","skipped","global_palette_blue_300","item","ok_host_count","skipped_host_count","changed_host_count","failed_host_count","unreachable_host_count","jobExplorerTableColumns","header","type","cell","TextCell","text","id","iconSize","value","href","tower_link","target","rel","template_name","status","cluster_name","org_name","job_type","formatJobType","PageHeader","PageSection","Card","CardBody","categories","filters","setFilters","pagination","params","limit","offset","setPagination","isCompact","settingsPanel","setSettingsExpanded","settingsExpanded","label","labelOff","isChecked","only_root_workflows_and_standalone_jobs","onChange","ariaLabel","bodyContent","hasSettings","PageTable","pageItems","itemCount","autoHidePagination","tableColumns","expandedRow","ExpandableRowContent","Flex","FlexItem","align","default","host_count","failed_tasks","useState","showMore","setShowMore","Grid","hasGutter","task","passed_host_count","GridItem","lg","md","task_name","module_name","className","Button","variant","onClick","fullWidth","renderMoreButton","renderFailedTaskBar","most_failed_tasks","DescriptionList","isHorizontal","columnModifier","created","formatDateTime","started","finished","host_task_count","expandedInfo","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","errorStateTitle","emptyStateTitle","emptyStateDescription","sort_options","sortDirection","sort_order","setSort","e","PaginationVariant","_a","getColor","icon","getIcon","marginRight","marginBottom","__assign","assign","t","s","i","n","arguments","p","prototype","hasOwnProperty","call","apply","this","defaultPerPageOptions","Pagination","_b","_c","perPageOptions","props","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","currentPage","floor","returnOffsetVal","page","widgetId","perPage","onPerPageSelect","_e","onSetPage","isRequired"],"sourceRoot":""}