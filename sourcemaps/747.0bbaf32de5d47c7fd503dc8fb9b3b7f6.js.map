{"version":3,"file":"js/747.b59a3f970a6532b74d75.js","mappings":"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","sources":["webpack:///./src/Components/ApiStatus/ApiErrorState.tsx","webpack:///./src/Components/Toolbar/Groups/ToolbarInput/Select.tsx","webpack:///./src/Components/Toolbar/Groups/ToolbarInput/Date.tsx","webpack:///./src/Components/Toolbar/Groups/ToolbarInput/Text.tsx","webpack:///./src/Components/Toolbar/Groups/ToolbarInput/index.tsx","webpack:///./src/Components/Toolbar/Groups/ToolbarInput/helpers.ts","webpack:///./src/Components/Toolbar/Groups/CategoryDropdown.tsx","webpack:///./src/Components/Toolbar/Groups/FiltersCategoriesGroup.tsx","webpack:///./src/Components/Toolbar/Groups/QuickDateGroup.tsx","webpack:///./src/Components/Toolbar/Groups/SortByGroup.tsx","webpack:///./src/Components/Toolbar/Groups/SettingsPanel.tsx","webpack:///./src/Components/Toolbar/Toolbar.tsx","webpack:///./src/Components/Toolbar/constants.ts","webpack:///./src/Components/Toolbar/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { global_danger_color_200 as globalDangerColor200 } from '@patternfly/react-tokens';\n\ninterface Props {\n  message: string | Record<string, any>;\n}\n\nconst ApiErrorState: FunctionComponent<Props> = ({ message }) => (\n  <EmptyState variant={EmptyStateVariant.small} data-cy={'api_error_state'}>\n    <EmptyStateIcon\n      icon={ExclamationCircleIcon}\n      color={globalDangerColor200.value}\n    />\n    <Title headingLevel=\"h2\" size=\"lg\">\n      Error\n    </Title>\n    <EmptyStateBody>{message}</EmptyStateBody>\n  </EmptyState>\n);\n\nexport default ApiErrorState;\n","// TODO: The component converts all types to string.\n// It should be able to use the correct type in the future for example number and number[].\nimport React, { FunctionComponent, useState } from 'react';\nimport {\n  Tooltip,\n  ToolbarFilter,\n  Select as PFSelect,\n  SelectOption,\n  SelectVariant,\n  ToolbarChip,\n  SelectOptionObject,\n} from '@patternfly/react-core';\n\nimport { handleCheckboxChips, handleSingleChips } from './helpers';\nimport { optionsForCategories } from '../../constants';\nimport styled from 'styled-components';\n\nimport { AttributeType, SelectOptionProps, SetValue } from '../../types';\n\nconst OptionSpan = styled('span')`\n  display: block;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  max-width: 300px;\n`;\n\ninterface Props {\n  categoryKey: string;\n  value: AttributeType;\n  selectOptions: SelectOptionProps[];\n  isVisible?: boolean;\n  setValue: SetValue;\n}\n\nconst renderValues = (values: SelectOptionProps[]) =>\n  values &&\n  values.map(({ key, value, description }) => (\n    <SelectOption key={key} value={key} description={description} data-cy={key}>\n      <Tooltip content={<div>{value}</div>}>\n        <OptionSpan>{value}</OptionSpan>\n      </Tooltip>\n    </SelectOption>\n  ));\n\nconst Select: FunctionComponent<Props> = ({\n  categoryKey,\n  value,\n  selectOptions: nonTypedSelectOptions,\n  isVisible = true,\n  setValue,\n}) => {\n  const [expanded, setExpanded] = useState(false);\n  const options = optionsForCategories[categoryKey];\n  let selectOptions = nonTypedSelectOptions.map(\n    ({ key, value, description }) => ({\n      key: key?.toString(),\n      value: value?.toString(),\n      description: description?.toString(),\n    })\n  );\n\n  const selectOptionsMasterCopy = selectOptions;\n\n  selectOptions = selectOptions.slice(0, 500);\n\n  const onDelete = (chip: string) => {\n    if (Array.isArray(value)) {\n      const keyToDelete = selectOptionsMasterCopy.find(\n        ({ value }) => value === chip\n      )?.key;\n\n      const stringValues: string[] = value.map((i) => i.toString());\n      const filteredArr = stringValues.filter((item) => item !== keyToDelete);\n      setValue(filteredArr);\n    } else {\n      setValue(null);\n    }\n  };\n\n  const onFilter = (_: unknown, textInput: string) => {\n    if (textInput === '') return renderValues(selectOptions);\n    return renderValues(\n      selectOptionsMasterCopy\n        .filter(({ value }) =>\n          value.toString().toLowerCase().includes(textInput.toLowerCase())\n        )\n        .slice(0, 50)\n    );\n  };\n\n  const handleChips = (): string[] => {\n    if (\n      (Array.isArray(value) && value.length === 0) ||\n      typeof value === 'undefined'\n    )\n      return [];\n    if (Array.isArray(value))\n      return handleCheckboxChips(\n        value.map((i) => i.toString()),\n        selectOptionsMasterCopy\n      );\n    return handleSingleChips(value.toString(), selectOptions);\n  };\n\n  const onSelect = (_: unknown, selection: SelectOptionObject | string) => {\n    if (Array.isArray(value)) {\n      const stringValues: string[] = value.map((i) => i.toString());\n      setValue(\n        !stringValues.includes(selection.toString())\n          ? [...stringValues, selection]\n          : stringValues.filter((item) => item !== selection.toString())\n      );\n    } else {\n      setValue(selection);\n      setExpanded(false);\n    }\n  };\n\n  return (\n    <ToolbarFilter\n      data-cy={categoryKey}\n      key={categoryKey}\n      showToolbarItem={isVisible}\n      chips={options.hasChips ? handleChips() : []}\n      categoryName={options.name}\n      deleteChip={\n        options.hasChips\n          ? (_: unknown, chip: ToolbarChip | string) => onDelete(chip as string)\n          : undefined\n      }\n    >\n      <PFSelect\n        variant={\n          Array.isArray(value) ? SelectVariant.checkbox : SelectVariant.single\n        }\n        aria-label={options.name}\n        onToggle={() => setExpanded(!expanded)}\n        onSelect={onSelect}\n        selections={value}\n        isOpen={expanded}\n        hasInlineFilter\n        placeholderText={options.placeholder}\n        onFilter={onFilter}\n        maxHeight={'1000%'}\n      >\n        {renderValues(selectOptions)}\n      </PFSelect>\n    </ToolbarFilter>\n  );\n};\n\nexport default Select;\n","import React, { FunctionComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { DatePicker } from '@patternfly/react-core';\nimport { optionsForCategories } from '../../constants';\n\ninterface Props {\n  categoryKey: string;\n  value?: string;\n  setValue?: (value: string | Date | undefined) => void;\n  otherProps?: {\n    [x: string]: unknown;\n  };\n}\n\nconst DateInput: FunctionComponent<Props> = ({\n  categoryKey,\n  value = '',\n  setValue = () => ({}),\n  otherProps = {},\n}) => {\n  const options = optionsForCategories[categoryKey];\n  const handleSetValue = (value: string | Date | undefined) => {\n    setValue(value);\n  };\n  return (\n    <DatePicker\n      aria-label={options.name}\n      id={categoryKey}\n      key={categoryKey}\n      value={value}\n      onChange={(_event, value) => handleSetValue(value)}\n      inputProps={{\n        isReadOnly: true,\n      }}\n      {...otherProps}\n    />\n  );\n};\n\nDateInput.propTypes = {\n  categoryKey: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  setValue: PropTypes.func.isRequired,\n  otherProps: PropTypes.any,\n};\n\nexport default DateInput;\n","import React, { useState, useEffect, FunctionComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ToolbarFilter,\n  TextInput,\n  InputGroup,\n  Button,\n} from '@patternfly/react-core';\n\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { optionsForCategories } from '../../constants';\n\nimport { SetValue } from '../../types';\n\ninterface Props {\n  categoryKey: string;\n  isVisible?: boolean;\n  value?: string;\n  setValue: SetValue;\n}\n\nconst Text: FunctionComponent<Props> = ({\n  categoryKey,\n  isVisible = true,\n  value = '',\n  setValue,\n}) => {\n  const [searchVal, setSearchVal] = useState(value);\n  const options = optionsForCategories[categoryKey];\n\n  const onDelete = () => {\n    setValue('');\n  };\n\n  const handleChips = () => {\n    return value ? [value] : [];\n  };\n\n  useEffect(() => {\n    setSearchVal(value);\n  }, [value]);\n\n  return (\n    <ToolbarFilter\n      data-cy={categoryKey}\n      key={categoryKey}\n      showToolbarItem={isVisible}\n      chips={options.hasChips ? handleChips() : []}\n      categoryName={options.name}\n      deleteChip={options.hasChips ? onDelete : undefined}\n    >\n      <InputGroup>\n        <TextInput\n          type=\"search\"\n          aria-label={options.name}\n          value={searchVal}\n          onChange={setSearchVal}\n          onKeyDown={(e) => {\n            if (e.key && e.key === 'Enter') {\n              e.preventDefault();\n              setValue(searchVal);\n            }\n          }}\n        />\n        <Button\n          variant=\"control\"\n          aria-label={`Search button for ${options.name}`}\n          onClick={() => {\n            setValue(searchVal);\n          }}\n        >\n          <SearchIcon />\n        </Button>\n      </InputGroup>\n    </ToolbarFilter>\n  );\n};\n\nText.propTypes = {\n  categoryKey: PropTypes.string.isRequired,\n  value: PropTypes.any,\n  isVisible: PropTypes.bool,\n  setValue: PropTypes.func.isRequired,\n};\n\nexport default Text;\n","import React, { FunctionComponent } from 'react';\nimport Select from './Select';\nimport DateInput from './Date';\nimport Text from './Text';\nimport { optionsForCategories } from '../../constants';\nimport { AttributeType, SetValue } from '../../types';\nimport { SelectOptionProps } from '@patternfly/react-core';\n\n// Todo: unify the interfaces better so we don't have to use any\n// and avoid accidentall wronglt passed props\ninterface ComponentMapper {\n  [x: string]: React.ComponentType<any>;\n}\n\nconst components: ComponentMapper = {\n  select: Select,\n  date: DateInput,\n  text: Text,\n};\n\ninterface Props {\n  categoryKey: string;\n  value?: AttributeType;\n  selectOptions?: SelectOptionProps[];\n  isVisible?: boolean;\n  setValue: SetValue;\n  [x: string]: any;\n}\n\nconst ToolbarInput: FunctionComponent<Props> = ({\n  categoryKey,\n  value,\n  selectOptions,\n  isVisible = true,\n  setValue,\n  ...otherProps\n}) => {\n  const options = optionsForCategories[categoryKey];\n  const SelectedInput = components[options.type];\n\n  const defaultValue = () => {\n    if (value) {\n      return value;\n    } else if (options.type !== 'select') {\n      return '';\n    } else {\n      return undefined;\n    }\n  };\n\n  return (\n    <SelectedInput\n      data-cy={options.name}\n      categoryKey={categoryKey}\n      value={defaultValue()}\n      selectOptions={selectOptions}\n      isVisible={isVisible}\n      setValue={setValue}\n      otherProps={otherProps}\n    />\n  );\n};\n\nexport default ToolbarInput;\n","import { SelectOptionProps } from '../../types';\n\n/**\n * Get comparator values if their key is in the item list\n */\nexport const handleCheckboxChips = (\n  item: string[],\n  comparator: SelectOptionProps[]\n): string[] => {\n  if (item && comparator) {\n    return item.reduce((acc: string[], i) => {\n      comparator.forEach(({ key, value }) => {\n        if (key === i) {\n          acc.push(value);\n        }\n      });\n\n      return acc;\n    }, []);\n  }\n\n  return [];\n};\n\n/**\n * Convert a list of objects to a list of the last value if defined\n */\nexport const handleSingleChips = (\n  item: string,\n  comparator: SelectOptionProps[]\n): string[] => {\n  if (item && typeof item === 'string' && comparator) {\n    let val;\n    comparator.forEach(({ key, value }) => {\n      if (key === item) {\n        val = value;\n      }\n    });\n\n    if (val !== undefined) {\n      return [val];\n    }\n  }\n\n  return [];\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  ToolbarItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from '@patternfly/react-core';\n\ninterface Props {\n  categoryKey: string;\n  selected: string;\n  setSelected: (value: string) => void;\n  categories: {\n    key: string;\n    name: string;\n  }[];\n}\n\nconst CategoryDropdown: FunctionComponent<Props> = ({\n  categoryKey,\n  selected,\n  setSelected = () => null,\n  categories = [],\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  return (\n    <ToolbarItem data-cy={categoryKey}>\n      <Select\n        isOpen={isExpanded}\n        variant={SelectVariant.single}\n        aria-label={'Categories'}\n        onToggle={() => setIsExpanded(!isExpanded)}\n        onSelect={(_, selection) => {\n          setSelected(selection as string);\n          setIsExpanded(false);\n        }}\n        selections={selected}\n        placeholderText={'Filter by'}\n      >\n        {categories.map(({ key, name }) => (\n          <SelectOption key={key} value={key}>\n            {name}\n          </SelectOption>\n        ))}\n      </Select>\n    </ToolbarItem>\n  );\n};\n\nexport default CategoryDropdown;\n","import React, { FunctionComponent, useState } from 'react';\nimport { SelectOptionProps, ToolbarGroup } from '@patternfly/react-core';\n\nimport CategoryDropdown from './CategoryDropdown';\nimport ToolbarInput from './ToolbarInput';\nimport { optionsForCategories } from '../constants';\nimport { SetValues, AttributeType } from '../types';\n\ninterface Props {\n  filterCategories: Record<string, SelectOptionProps[]>;\n  defaultSelected: string;\n  filters: Record<string, AttributeType>;\n  setFilters: SetValues;\n}\n\nconst FilterCategoriesGroup: FunctionComponent<Props> = ({\n  filterCategories,\n  defaultSelected,\n  filters,\n  setFilters,\n}) => {\n  const [currentCategory, setCurrentCategory] = useState(\n    defaultSelected || Object.keys(filterCategories)[0]\n  );\n\n  return (\n    <ToolbarGroup variant=\"filter-group\">\n      <CategoryDropdown\n        categoryKey=\"category_selector\"\n        selected={currentCategory}\n        setSelected={setCurrentCategory}\n        categories={Object.keys(filterCategories).map((el) => ({\n          key: el,\n          name: optionsForCategories[el].name,\n        }))}\n      />\n      {Object.keys(filterCategories).map((key) => (\n        <ToolbarInput\n          key={key}\n          categoryKey={key}\n          value={filterCategories[key].length > 0 ? filters[key] : ''}\n          selectOptions={filterCategories[key]}\n          isVisible={currentCategory === key}\n          setValue={(value) => setFilters(key, value)}\n        />\n      ))}\n    </ToolbarGroup>\n  );\n};\n\nexport default FilterCategoriesGroup;\n","import React, { FunctionComponent } from 'react';\nimport {\n  SplitItem,\n  ToolbarGroup,\n  Split,\n  SelectOptionProps,\n  ToolbarGroupVariant,\n} from '@patternfly/react-core';\n\nimport ToolbarInput from './ToolbarInput';\n\nimport { today } from '../../../Utilities/helpers';\nimport { SetValues, AttributeType } from '../types';\n\nconst getDateByDays = (days: number): string =>\n  today(days).toISOString().split(/T/)[0];\n\nconst strToDate = (date: string): Date => {\n  const nums = date.split('-');\n  return new Date(+nums[0], +nums[1] - 1, +nums[2]);\n};\n\ninterface Props {\n  filters: Record<string, AttributeType>;\n  setFilters: SetValues;\n  values: {\n    quick_date_range: SelectOptionProps[];\n    granularity: SelectOptionProps[];\n  };\n}\n\nconst QuickDateGroup: FunctionComponent<Props> = ({\n  filters,\n  setFilters,\n  values,\n}) => {\n  const endDate = (filters.end_date as string) || getDateByDays(0);\n  const startDate = (filters.start_date as string) || getDateByDays(-30);\n\n  return (\n    <ToolbarGroup variant={ToolbarGroupVariant['filter-group']}>\n      {values.granularity && (\n        <ToolbarInput\n          categoryKey=\"granularity\"\n          value={filters.granularity}\n          selectOptions={values.granularity}\n          setValue={(value) => setFilters('granularity', value)}\n        />\n      )}\n      <ToolbarInput\n        categoryKey=\"quick_date_range\"\n        value={filters.quick_date_range}\n        selectOptions={values.quick_date_range}\n        setValue={(value) => setFilters('quick_date_range', value)}\n      />\n      {['custom', 'roi_custom', 'slow_hosts_custom'].includes(\n        filters.quick_date_range as string\n      ) && (\n        <Split hasGutter>\n          <SplitItem>\n            <ToolbarInput\n              categoryKey=\"start_date\"\n              value={startDate}\n              setValue={(e) => setFilters('start_date', e)}\n              validators={[\n                (date: Date) =>\n                  date > strToDate(endDate) ? 'Must not be after end date' : '',\n              ]}\n            />\n          </SplitItem>\n          <SplitItem style={{ paddingTop: '6px' }}>to</SplitItem>\n          <SplitItem>\n            <ToolbarInput\n              categoryKey=\"end_date\"\n              value={endDate}\n              setValue={(e) => setFilters('end_date', e)}\n              validators={[\n                (date: Date) => {\n                  if (date < strToDate(startDate))\n                    return 'Must not be before start date';\n                  if (date > today()) return 'Must not be after today';\n                  return '';\n                },\n              ]}\n            />\n          </SplitItem>\n        </Split>\n      )}\n    </ToolbarGroup>\n  );\n};\n\nexport default QuickDateGroup;\n","import React, { FunctionComponent } from 'react';\nimport {\n  ToolbarGroup,\n  Button,\n  SelectOptionProps,\n  ButtonVariant,\n  ToolbarGroupVariant,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { SortAmountDownIcon, SortAmountUpIcon } from '@patternfly/react-icons';\n\nimport ToolbarInput from './ToolbarInput';\nimport { SetValues, AttributeType } from '../types';\n\ninterface Props {\n  filters: Record<string, AttributeType>;\n  setFilters: SetValues;\n  sort_options: SelectOptionProps[];\n}\n\nconst SortByGroup: FunctionComponent<Props> = ({\n  filters,\n  setFilters,\n  sort_options,\n}) => (\n  <ToolbarGroup variant={ToolbarGroupVariant['filter-group']}>\n    <ToolbarItem>\n      <ToolbarInput\n        categoryKey=\"sort_options\"\n        value={filters.sort_options}\n        selectOptions={sort_options}\n        setValue={(value) => setFilters('sort_options', value as string)}\n      />\n    </ToolbarItem>\n    <ToolbarItem data-cy={'sort'}>\n      <Button\n        variant={ButtonVariant.control}\n        data-cy={filters.sort_order === 'asc' ? 'desc' : 'asc'}\n        onClick={() =>\n          setFilters(\n            'sort_order',\n            filters.sort_order === 'asc' ? 'desc' : 'asc'\n          )\n        }\n      >\n        {filters.sort_order === 'asc' && <SortAmountUpIcon />}\n        {filters.sort_order === 'desc' && <SortAmountDownIcon />}\n      </Button>\n    </ToolbarItem>\n  </ToolbarGroup>\n);\n\nexport default SortByGroup;\n","import React, { FunctionComponent } from 'react';\nimport { Button, Switch, Popover } from '@patternfly/react-core';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardActions,\n  CardHeader,\n} from '@patternfly/react-core';\nimport {\n  OutlinedQuestionCircleIcon as PFOutlinedQuestionCircleIcon,\n  TimesIcon,\n} from '@patternfly/react-icons';\nimport { SetValues, AttributeType } from '../types';\nimport styled from 'styled-components';\n\nconst OutlinedQuestionCircleIcon = styled(PFOutlinedQuestionCircleIcon)`\n  color: #151515;\n`;\n\nconst PopoverButton = styled(Button)`\n  vertical-align: middle;\n`;\n\ninterface Props {\n  filters: Record<string, AttributeType>;\n  setFilters: SetValues;\n  settingsExpanded: boolean;\n  setSettingsExpanded: (expanded: boolean) => void;\n  id?: string;\n  label?: string;\n  labelOff?: string;\n  isChecked?: AttributeType;\n  onChange?: (\n    checked: boolean,\n    event: React.FormEvent<HTMLInputElement>\n  ) => void;\n  ariaLabel?: string;\n  bodyContent?: string;\n}\n\nconst SettingsPanel: FunctionComponent<Props> = ({\n  settingsExpanded,\n  setSettingsExpanded,\n  id,\n  label,\n  labelOff,\n  isChecked,\n  onChange,\n  ariaLabel,\n  bodyContent,\n}) => (\n  <Card isFlat style={{ backgroundColor: '#EEEEEE' }}>\n    <CardHeader>\n      <CardActions>\n        <Button\n          variant=\"plain\"\n          onClick={() => setSettingsExpanded(!settingsExpanded)}\n        >\n          <TimesIcon />\n        </Button>\n      </CardActions>\n      <CardTitle>Settings</CardTitle>\n    </CardHeader>\n    <CardBody>\n      <Switch\n        id={id}\n        label={label}\n        labelOff={labelOff}\n        isChecked={!!isChecked}\n        onChange={onChange}\n      />\n      <PopoverButton variant=\"plain\">\n        <Popover\n          aria-label={ariaLabel}\n          position={'top'}\n          bodyContent={<div> {bodyContent} </div>}\n        >\n          <OutlinedQuestionCircleIcon />\n        </Popover>\n      </PopoverButton>\n    </CardBody>\n  </Card>\n);\n\nexport default SettingsPanel;\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  Button,\n  ToolbarItem,\n  ToolbarItemVariant,\n  ButtonVariant,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, CogIcon } from '@patternfly/react-icons';\n\nimport { optionsForCategories } from './constants';\nimport { FilterCategoriesGroup, QuickDateGroup, SortByGroup } from './Groups';\nimport { ApiOptionsType, AttributeType, SetValues } from './types';\n\ninterface Props {\n  categories: ApiOptionsType;\n  // Todo: update to use the QueryParams type after known\n  filters: Record<string, AttributeType>;\n  defaultSelected?: string;\n  setFilters: SetValues;\n  pagination: FunctionComponent;\n  settingsPanel: (\n    setSettingsExpanded: (arg0: boolean) => void,\n    settingsExpanded: boolean\n  ) => FunctionComponent;\n  hasSettings: boolean;\n  additionalControls: FunctionComponent[];\n}\n\nconst FilterableToolbar: FunctionComponent<Props> = ({\n  categories,\n  filters,\n  defaultSelected = '',\n  setFilters: setQueryParams,\n  pagination = null,\n  hasSettings = false,\n  settingsPanel = null,\n  additionalControls = [],\n}) => {\n  const [settingsExpanded, setSettingsExpanded] = useState(false);\n  const { quick_date_range, sort_options, granularity, ...restCategories } =\n    categories;\n\n  // Sets name attribute as a dropdown if it has predefined values\n  if (Object.keys(categories).includes('name')) {\n    categories.name[0].value !== null\n      ? (optionsForCategories.name.type = 'select')\n      : (optionsForCategories.name.type = 'text');\n  }\n\n  // Filter out elements which are not in the option object and in defaultParams\n  const filterCategories = Object.keys(restCategories)\n    .filter(\n      (key) =>\n        Object.keys(optionsForCategories).includes(key) &&\n        Object.keys(filters).includes(key)\n    )\n    .reduce((obj: ApiOptionsType, key) => {\n      obj[key] = restCategories[key];\n      return obj;\n    }, {});\n\n  const setFilters = (key: string | null, value: AttributeType | null) => {\n    setQueryParams(key, value);\n  };\n\n  return (\n    <Toolbar\n      className=\"pf-m-toggle-group-container\"\n      clearAllFilters={() => setFilters(null, null)}\n      collapseListedFiltersBreakpoint=\"xl\"\n      data-cy={'filter-toolbar'}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n          {Object.keys(filterCategories).length > 0 && (\n            <FilterCategoriesGroup\n              filterCategories={filterCategories}\n              defaultSelected={defaultSelected}\n              filters={filters}\n              setFilters={setFilters}\n            />\n          )}\n          {(quick_date_range || granularity) && (\n            <QuickDateGroup\n              filters={filters}\n              values={{ quick_date_range, granularity }}\n              setFilters={setFilters}\n            />\n          )}\n          {sort_options && (\n            <SortByGroup\n              filters={filters}\n              setFilters={setFilters}\n              sort_options={sort_options}\n            />\n          )}\n        </ToolbarToggleGroup>\n        {hasSettings && (\n          <ToolbarItem>\n            <Button\n              variant={ButtonVariant.plain}\n              onClick={() => setSettingsExpanded(!settingsExpanded)}\n              aria-label=\"settings\"\n              data-cy={'settings'}\n              isActive={settingsExpanded}\n            >\n              <CogIcon />\n            </Button>\n          </ToolbarItem>\n        )}\n        {additionalControls.length > 0 && (\n          <ToolbarGroup>\n            {additionalControls.map((control, idx) => (\n              <ToolbarItem key={idx}>{control}</ToolbarItem>\n            ))}\n          </ToolbarGroup>\n        )}\n        {pagination && (\n          <ToolbarItem\n            data-cy={'top_pagination'}\n            variant={ToolbarItemVariant.pagination}\n            visibility={{ default: 'hidden', lg: 'visible' }}\n          >\n            {pagination}\n          </ToolbarItem>\n        )}\n      </ToolbarContent>\n      {settingsExpanded &&\n        settingsPanel &&\n        settingsPanel(setSettingsExpanded, settingsExpanded)}\n    </Toolbar>\n  );\n};\n\nexport default FilterableToolbar;\n","export interface OptionsForCategories {\n  [key: string]: {\n    type: string;\n    name: string;\n    hasChips: boolean;\n    placeholder?: string;\n  };\n}\n\nexport const optionsForCategories: OptionsForCategories = {\n  status: {\n    type: 'select',\n    name: 'Status',\n    placeholder: 'Filter by job status',\n    hasChips: true,\n  },\n  quick_date_range: {\n    type: 'select',\n    name: 'Date',\n    placeholder: 'Filter by date',\n    hasChips: false,\n  },\n  start_date: {\n    type: 'date',\n    name: 'Start date',\n    hasChips: false,\n  },\n  end_date: {\n    type: 'date',\n    name: 'End date',\n    hasChips: false,\n  },\n  job_type: {\n    type: 'select',\n    name: 'Job',\n    placeholder: 'Filter by job type',\n    hasChips: true,\n  },\n  org_id: {\n    type: 'select',\n    name: 'Organization',\n    placeholder: 'Filter by organization',\n    hasChips: true,\n  },\n  cluster_id: {\n    type: 'select',\n    name: 'Cluster',\n    placeholder: 'Filter by cluster',\n    hasChips: true,\n  },\n  task_action_id: {\n    type: 'select',\n    name: 'Module',\n    placeholder: 'Filter by module',\n    hasChips: true,\n  },\n  template_id: {\n    type: 'select',\n    name: 'Template',\n    placeholder: 'Filter by template',\n    hasChips: true,\n  },\n  sort_options: {\n    type: 'select',\n    name: 'Sort by',\n    placeholder: 'Sort by attribute',\n    hasChips: false,\n  },\n  automation_status: {\n    type: 'select',\n    name: 'Automation status',\n    placeholder: 'Filter by automation status',\n    hasChips: true,\n  },\n  host_status: {\n    type: 'select',\n    name: 'Host status',\n    placeholder: 'Filter by host status',\n    hasChips: true,\n  },\n  frequency_period: {\n    type: 'select',\n    name: 'Frequency',\n    placeholder: 'Filter by frequency',\n    hasChips: true,\n  },\n  category: {\n    type: 'select',\n    name: 'Category',\n    placeholder: 'Filter by category',\n    hasChips: true,\n  },\n  inventory_id: {\n    type: 'select',\n    name: 'Inventory',\n    placeholder: 'Filter by inventory',\n    hasChips: true,\n  },\n  percentile: {\n    type: 'select',\n    name: 'Percentile',\n    placeholder: 'Filter by percentile',\n    hasChips: true,\n  },\n  adoption_rate_type: {\n    type: 'select',\n    name: 'Adoption rate type',\n    placeholder: 'Filter by adoption rate type',\n    hasChips: false,\n  },\n  granularity: {\n    type: 'select',\n    name: 'Granularity',\n    hasChips: false,\n  },\n  tags: {\n    type: 'select',\n    name: 'Tag',\n    placeholder: 'Filter by tag',\n    hasChips: true,\n  },\n  name: {\n    type: 'text',\n    name: 'Name',\n    placeholder: 'Filter by name',\n    hasChips: true,\n  },\n  description: {\n    type: 'text',\n    name: 'Description',\n    hasChips: true,\n  },\n};\n","import Toolbar from './Toolbar';\nexport default Toolbar;\n"],"names":["message","variant","small","icon","color","value","headingLevel","size","OptionSpan","renderValues","values","map","key","description","SelectOption","Tooltip","content","DateInput","categoryKey","setValue","otherProps","options","DatePicker","name","id","onChange","_event","handleSetValue","inputProps","isReadOnly","propTypes","isRequired","Text","isVisible","searchVal","setSearchVal","useState","useEffect","ToolbarFilter","showToolbarItem","chips","hasChips","categoryName","deleteChip","undefined","InputGroup","TextInput","type","onKeyDown","e","preventDefault","Button","onClick","components","select","selectOptions","nonTypedSelectOptions","expanded","setExpanded","toString","selectOptionsMasterCopy","slice","Array","isArray","length","item","i","comparator","reduce","acc","forEach","push","val","handleSingleChips","_","chip","keyToDelete","find","filteredArr","filter","onDelete","P","checkbox","single","onToggle","onSelect","selection","stringValues","includes","selections","isOpen","hasInlineFilter","placeholderText","placeholder","onFilter","textInput","toLowerCase","maxHeight","date","text","SelectedInput","selected","setSelected","categories","isExpanded","setIsExpanded","ToolbarItem","Select","filterCategories","defaultSelected","filters","setFilters","currentCategory","setCurrentCategory","Object","keys","ToolbarGroup","el","ToolbarInput","getDateByDays","days","toISOString","split","strToDate","nums","Date","endDate","end_date","startDate","start_date","granularity","quick_date_range","Split","hasGutter","SplitItem","validators","style","paddingTop","sort_options","control","sort_order","OutlinedQuestionCircleIcon","PopoverButton","settingsExpanded","setSettingsExpanded","label","labelOff","isChecked","ariaLabel","bodyContent","Card","isFlat","backgroundColor","CardHeader","CardActions","CardTitle","CardBody","Switch","Popover","position","setQueryParams","pagination","hasSettings","settingsPanel","additionalControls","restCategories","obj","className","clearAllFilters","collapseListedFiltersBreakpoint","toggleIcon","breakpoint","plain","isActive","idx","visibility","default","lg","optionsForCategories","status","job_type","org_id","cluster_id","task_action_id","template_id","automation_status","host_status","frequency_period","category","inventory_id","percentile","adoption_rate_type","tags"],"sourceRoot":""}