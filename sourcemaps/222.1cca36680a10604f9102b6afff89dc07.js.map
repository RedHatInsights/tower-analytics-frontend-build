{"version":3,"file":"js/222.7fb4f22279311730db83.js","mappings":"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","sources":["webpack:///./src/Containers/AutomationCalculator/helpers.js","webpack:///./src/Containers/AutomationCalculator/TotalSavings.js","webpack:///./src/Containers/AutomationCalculator/CalculationCost.js","webpack:///./src/Containers/AutomationCalculator/AutomationFormula.js","webpack:///./src/Containers/AutomationCalculator/TopTemplates.js","webpack:///./src/Containers/AutomationCalculator/AutomationCalculator.js"],"sourcesContent":["import styled from 'styled-components';\nimport { CardTitle } from '@patternfly/react-core';\n\nexport const BorderedCardTitle = styled(CardTitle)`\n  border-bottom: 1px solid #d7d7d7;\n  margin-bottom: 10px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardTitle, Title } from '@patternfly/react-core';\nimport currencyFormatter from '../../Utilities/currencyFormatter';\n\nconst TotalSavings = ({ totalSavings = 0 }) => (\n  <Card style={{ borderTop: '3px solid #2B9AF3' }}>\n    <CardTitle style={{ paddingBottom: '0' }}>Total savings</CardTitle>\n    <CardBody>\n      <Title\n        headingLevel=\"h3\"\n        size=\"4xl\"\n        style={{ color: 'var(--pf-global--success-color--200)' }}\n      >\n        {currencyFormatter(totalSavings)}\n      </Title>\n    </CardBody>\n  </Card>\n);\n\nTotalSavings.propTypes = {\n  totalSavings: PropTypes.number,\n};\n\nexport default TotalSavings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport {\n  Card,\n  CardBody,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n} from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { BorderedCardTitle as CardTitle } from './helpers';\n\nconst InputAndText = styled.div`\n  flex: 1;\n`;\n\nconst validFloat = (value) => {\n  const floatValue = parseFloat(value);\n  return floatValue && floatValue < 0 ? '' : value;\n};\n\nconst CalculationCost = ({\n  costManual = '0',\n  setCostManual = () => {},\n  costAutomation = '0',\n  setCostAutomation = () => {},\n}) => (\n  <Card>\n    <CardTitle>Calculate your automation</CardTitle>\n    <CardBody>\n      <InputAndText>\n        <p>Manual cost of automation</p>\n        <em style={{ color: 'var(--pf-global--Color--dark-200)' }}>\n          (e.g. average salary of mid-level Software Engineer)\n        </em>\n        <InputGroup style={{ width: '50%' }}>\n          <InputGroupText>\n            <DollarSignIcon />\n          </InputGroupText>\n          <TextInput\n            id=\"manual-cost\"\n            type=\"number\"\n            aria-label=\"manual-cost\"\n            value={costManual}\n            onChange={(e) => setCostManual(validFloat(e))}\n          />\n          <InputGroupText>/hr</InputGroupText>\n        </InputGroup>\n      </InputAndText>\n      <InputAndText style={{ paddingTop: '10px' }}>\n        <p>Automated process cost</p>\n        <InputGroup style={{ width: '50%' }}>\n          <InputGroupText>\n            <DollarSignIcon />\n          </InputGroupText>\n          <TextInput\n            id=\"automation-cost\"\n            type=\"number\"\n            aria-label=\"automation-cost\"\n            value={costAutomation}\n            onChange={(e) => setCostAutomation(validFloat(e))}\n          />\n          <InputGroupText>/hr</InputGroupText>\n        </InputGroup>\n      </InputAndText>\n    </CardBody>\n  </Card>\n);\n\nCalculationCost.propTypes = {\n  costManual: PropTypes.string,\n  setCostManual: PropTypes.func,\n  costAutomation: PropTypes.string,\n  setCostAutomation: PropTypes.func,\n};\n\nexport default CalculationCost;\n","import React from 'react';\n\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { BorderedCardTitle as CardTitle } from './helpers';\n\nconst AutomationFormula = () => (\n  <Card style={{ height: '100%' }}>\n    <CardTitle>Automation formula</CardTitle>\n    <CardBody>\n      <p>\n        <b>Manual cost for template x</b> =\n        <em>\n          (time for a manual run on one host in hours * (sum of all hosts across\n          all job runs) ) * cost per hour\n        </em>\n      </p>\n      <p>\n        <b>Automation cost for template x</b> =\n        <em>\n          cost of automation per hour * sum of total elapsed hours for a\n          template\n        </em>\n      </p>\n      <p>\n        <b>Savings</b> =\n        <em>Sum of (manual cost - automation cost) across all templates</em>\n      </p>\n    </CardBody>\n  </Card>\n);\n\nexport default AutomationFormula;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  Tooltip,\n  Popover,\n} from '@patternfly/react-core';\nimport {\n  InfoCircleIcon,\n  ToggleOnIcon,\n  ToggleOffIcon,\n} from '@patternfly/react-icons';\n\nimport { capitalize } from '../../Utilities/helpers';\n\nimport currencyFormatter from '../../Utilities/currencyFormatter';\n\nconst TemplateDetail = styled.div`\n  em {\n    display: block;\n    padding: 5px 0;\n  }\n\n  @media (max-width: 1490px) {\n    display: block;\n\n    em {\n      padding: 10px 0;\n      display: block;\n    }\n  }\n`;\n\nconst TemplateDetailSubTitle = styled.em`\n  color: var(--pf-global--Color--dark-200);\n`;\n\nconst TooltipWrapper = styled.div`\n  p {\n    text-align: left;\n  }\n`;\n\nconst IconGroup = styled.div`\n  & svg {\n    fill: var(--pf-global--Color--dark-200);\n\n    :hover {\n      cursor: pointer;\n    }\n\n    :first-of-type {\n      margin-right: 10px;\n      margin-left: 10px;\n\n      @media (max-width: 1350px) {\n        margin-left: 0;\n      }\n    }\n  }\n`;\n\nconst InputAndText = styled.div`\n  flex: 1;\n`;\n\nconst showSortAttr = (details, sortBy) => {\n  const trimmed = sortBy.split(':')[0];\n  const sortAttribute = Object.keys(details).map((k) =>\n    k === trimmed ? `${details[k]}` : null\n  );\n\n  return (\n    <TemplateDetailSubTitle>\n      {capitalize(trimmed.split('_').join(' '))}: {sortAttribute}\n    </TemplateDetailSubTitle>\n  );\n};\n\nconst QuestionIconTooltip = ({ details }) => (\n  <Popover\n    aria-label=\"template detail popover\"\n    position=\"left\"\n    bodyContent={\n      <TooltipWrapper>\n        {Object.keys(details).map((k, i) => (\n          <p key={i}>\n            <b>{capitalize(k.split('_').join(' '))}</b>: {details[k]}\n          </p>\n        ))}\n      </TooltipWrapper>\n    }\n  >\n    <InfoCircleIcon />\n  </Popover>\n);\n\nQuestionIconTooltip.propTypes = {\n  details: PropTypes.object,\n};\n\nconst TopTemplates = ({\n  data = [],\n  sortBy = '',\n  setDataRunTime = () => {},\n  setEnabled = () => {},\n  redirectToJobExplorer = () => {},\n}) => (\n  <Card>\n    <CardBody>\n      <p>Enter the time it takes to run the following templates manually.</p>\n      {data.map((d) => (\n        <div key={d.id}>\n          <Tooltip content={'List of jobs for this template for past 30 days'}>\n            <Button\n              style={{ padding: '15px 0 10px' }}\n              component=\"a\"\n              onClick={() => redirectToJobExplorer(d.id)}\n              variant=\"link\"\n            >\n              {d.name}\n            </Button>\n          </Tooltip>\n          <TemplateDetail>\n            <InputAndText key={d.id}>\n              <InputGroup>\n                <TextInput\n                  id={d.id}\n                  type=\"number\"\n                  aria-label=\"time run manually\"\n                  value={d.avgRunTime / 60}\n                  onChange={(minutes) => setDataRunTime(minutes * 60, d.id)}\n                />\n                <InputGroupText>min</InputGroupText>\n              </InputGroup>\n            </InputAndText>\n            <TemplateDetailSubTitle>\n              x {d.successful_hosts_total} host runs\n            </TemplateDetailSubTitle>\n            {showSortAttr(d, sortBy)}\n            <IconGroup>\n              <QuestionIconTooltip details={d} />\n              {!d.enabled && (\n                <ToggleOffIcon onClick={() => setEnabled(d.id)(true)} />\n              )}\n              {d.enabled && (\n                <ToggleOnIcon onClick={() => setEnabled(d.id)(false)} />\n              )}\n            </IconGroup>\n          </TemplateDetail>\n          <p style={{ color: '#486B00' }}>{currencyFormatter(+d.delta)}</p>\n        </div>\n      ))}\n    </CardBody>\n  </Card>\n);\n\nTopTemplates.propTypes = {\n  data: PropTypes.array,\n  setDataRunTime: PropTypes.func,\n  redirectToJobExplorer: PropTypes.func,\n  deselectedIds: PropTypes.array,\n  setDeselectedIds: PropTypes.func,\n  setEnabled: PropTypes.func,\n  sortBy: PropTypes.string,\n};\n\nexport default TopTemplates;\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\n// Imports from custom components\nimport LoadingState from '../../Components/ApiStatus/LoadingState';\nimport NoData from '../../Components/ApiStatus/NoData';\nimport ApiErrorState from '../../Components/ApiStatus/ApiErrorState';\nimport FilterableToolbar from '../../Components/Toolbar/';\n\n// Imports from API\nimport { readROI, readROIOptions } from '../../Api/';\n\n// Imports from utilities\nimport {\n  useQueryParams,\n  useRedirect,\n  DEFAULT_NAMESPACE,\n} from '../../QueryParams/';\nimport { jobExplorer, roi as roiConst } from '../../Utilities/constants';\nimport { calculateDelta, convertSecondsToHours } from '../../Utilities/helpers';\nimport useRequest from '../../Utilities/useRequest';\n\n// Chart\nimport TopTemplatesSavings from '../../Charts/ROITopTemplates';\n\n// Local imports\nimport { BorderedCardTitle } from './helpers';\nimport TotalSavings from './TotalSavings';\nimport CalculationCost from './CalculationCost';\nimport AutomationFormula from './AutomationFormula';\nimport TopTemplates from './TopTemplates';\nimport { Paths } from '../../paths';\n\nconst mapApi = ({ items = [] }) =>\n  items.map((el) => ({\n    ...el,\n    delta: 0,\n    avgRunTime: 3600,\n    manualCost: 0,\n    automatedCost: 0,\n    enabled: true,\n  }));\n\nconst filterDisabled = (data) => data.filter(({ enabled }) => enabled);\n\nconst updateDeltaCost = (data, costAutomation, costManual) =>\n  data.map((el) => {\n    const manualCost =\n      convertSecondsToHours(el.avgRunTime) *\n      el.successful_hosts_total *\n      parseFloat(costManual);\n    const automatedCost =\n      convertSecondsToHours(el.successful_elapsed_total) *\n      parseFloat(costAutomation);\n    const delta = calculateDelta(automatedCost, manualCost);\n\n    return { ...el, delta, manualCost, automatedCost };\n  });\n\nconst computeTotalSavings = (data) =>\n  data.reduce((sum, curr) => sum + curr.delta, 0);\n\nconst AutomationCalculator = () => {\n  const [costManual, setCostManual] = useState('50');\n  const [costAutomation, setCostAutomation] = useState('20');\n\n  const redirect = useRedirect();\n  const { queryParams, setFromToolbar } = useQueryParams(\n    roiConst.defaultParams\n  );\n\n  const { result: options, request: setOptions } = useRequest(\n    useCallback(() => readROIOptions(queryParams), [queryParams]),\n    {}\n  );\n\n  const {\n    result: api,\n    error: apiError,\n    isLoading: apiIsLoading,\n    isSuccess: apiIsSuccess,\n    request: fetchEndpoint,\n    setValue,\n  } = useRequest(\n    useCallback(async () => {\n      const response = await readROI(queryParams);\n      return updateDeltaCost(mapApi(response), costAutomation, costManual);\n    }, [queryParams]),\n    []\n  );\n\n  /**\n   * Modifies one elements avgRunTime in the unfilteredData\n   * and updates all calculated fields.\n   * Used in top templates.\n   */\n  const setDataRunTime = (seconds, id) => {\n    const updatedData = api.map((el) => {\n      if (el.id === id) {\n        el.avgRunTime = seconds;\n        const updatedDelta = updateDeltaCost(\n          [el],\n          costAutomation,\n          costManual\n        )[0];\n        return updatedDelta;\n      } else {\n        return el;\n      }\n    });\n\n    setValue(updatedData);\n  };\n\n  const setEnabled = (id) => (value) => {\n    setValue(api.map((el) => (el.id === id ? { ...el, enabled: value } : el)));\n  };\n\n  useEffect(() => {\n    setOptions();\n  }, []);\n\n  /**\n   * Recalculates the delta and costs in the data after the cost is changed.\n   */\n  useEffect(() => {\n    setValue(updateDeltaCost(api, costAutomation, costManual));\n  }, [costAutomation, costManual]);\n\n  /**\n   * Get data from API depending on the queryParam.\n   */\n  useEffect(() => {\n    setOptions();\n    fetchEndpoint();\n  }, [queryParams]);\n\n  /**\n   * Function to redirect to the job explorer page\n   * with the same filters as is used here.\n   */\n  const redirectToJobExplorer = (templateId) => {\n    const initialQueryParams = {\n      [DEFAULT_NAMESPACE]: {\n        ...jobExplorer.defaultParams,\n        quick_date_range: 'last_30_days',\n        template_id: [templateId],\n      },\n    };\n\n    redirect(Paths.jobExplorer, initialQueryParams);\n  };\n\n  const renderLeft = () => (\n    <Stack hasGutter>\n      <StackItem>\n        <Card>\n          <BorderedCardTitle>Automation savings</BorderedCardTitle>\n          <CardBody>\n            <TopTemplatesSavings\n              margin={{ top: 20, right: 20, bottom: 20, left: 70 }}\n              id=\"d3-roi-chart-root\"\n              data={filterDisabled(api)}\n            />\n            <p style={{ textAlign: 'center' }}>Templates</p>\n          </CardBody>\n        </Card>\n      </StackItem>\n      <StackItem isFilled>\n        <AutomationFormula />\n      </StackItem>\n    </Stack>\n  );\n\n  const renderRight = () => (\n    <Stack hasGutter>\n      <StackItem>\n        <TotalSavings totalSavings={computeTotalSavings(filterDisabled(api))} />\n      </StackItem>\n      <StackItem>\n        <Stack>\n          <StackItem>\n            <CalculationCost\n              costManual={costManual}\n              setCostManual={setCostManual}\n              costAutomation={costAutomation}\n              setCostAutomation={setCostAutomation}\n            />\n          </StackItem>\n          <StackItem style={{ overflow: 'auto', maxHeight: '48vh' }}>\n            <TopTemplates\n              redirectToJobExplorer={redirectToJobExplorer}\n              data={api}\n              setDataRunTime={setDataRunTime}\n              setUnfilteredData={api}\n              setEnabled={setEnabled}\n              sortBy={`${queryParams.sort_options}:${queryParams.sort_order}`}\n            />\n          </StackItem>\n        </Stack>\n      </StackItem>\n    </Stack>\n  );\n\n  const renderContents = () => {\n    if (apiIsLoading) return <LoadingState />;\n    if (apiError) return <ApiErrorState message={apiError.error} />;\n    if (apiIsSuccess && api.length <= 0) return <NoData />;\n    if (apiIsSuccess && api.length > 0)\n      return (\n        <Grid hasGutter className=\"automation-wrapper\">\n          <GridItem span={9}>{renderLeft()}</GridItem>\n          <GridItem span={3}>{renderRight()}</GridItem>\n        </Grid>\n      );\n\n    return <></>;\n  };\n\n  return (\n    <>\n      <PageHeader>\n        <PageHeaderTitle title={'Automation Calculator'} />\n        <FilterableToolbar\n          categories={options}\n          filters={queryParams}\n          setFilters={setFromToolbar}\n        />\n      </PageHeader>\n      <Main>{renderContents()}</Main>\n    </>\n  );\n};\n\nexport default AutomationCalculator;\n"],"names":["BorderedCardTitle","styled","CardTitle","TotalSavings","totalSavings","Card","style","borderTop","paddingBottom","CardBody","Title","headingLevel","size","color","currencyFormatter","propTypes","PropTypes","InputAndText","validFloat","value","floatValue","parseFloat","CalculationCost","costManual","setCostManual","costAutomation","setCostAutomation","InputGroup","width","InputGroupText","TextInput","id","type","onChange","e","paddingTop","height","TemplateDetail","TemplateDetailSubTitle","TooltipWrapper","IconGroup","QuestionIconTooltip","details","Popover","position","bodyContent","Object","keys","map","k","i","key","capitalize","split","join","TopTemplates","data","sortBy","setDataRunTime","setEnabled","redirectToJobExplorer","d","Tooltip","content","Button","padding","component","onClick","variant","name","avgRunTime","minutes","successful_hosts_total","trimmed","sortAttribute","showSortAttr","enabled","delta","deselectedIds","setDeselectedIds","filterDisabled","filter","updateDeltaCost","el","manualCost","convertSecondsToHours","automatedCost","successful_elapsed_total","calculateDelta","useState","redirect","useRedirect","useQueryParams","roiConst","queryParams","setFromToolbar","useRequest","useCallback","readROIOptions","options","result","setOptions","request","readROI","response","items","api","apiError","error","apiIsLoading","isLoading","apiIsSuccess","isSuccess","fetchEndpoint","setValue","useEffect","PageHeader","PageHeaderTitle","title","categories","filters","setFilters","Main","LoadingState","ApiErrorState","message","length","NoData","Grid","hasGutter","className","GridItem","span","Stack","StackItem","margin","top","right","bottom","left","textAlign","isFilled","reduce","sum","curr","overflow","maxHeight","templateId","initialQueryParams","DEFAULT_NAMESPACE","jobExplorer","quick_date_range","template_id","Paths","seconds","updatedData","setUnfilteredData","sort_options","sort_order"],"sourceRoot":""}