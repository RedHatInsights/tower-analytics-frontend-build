{"version":3,"sources":["webpack:///./src/Components/ApiErrorState.js","webpack:///./src/Components/Toolbar/constants.ts","webpack:///./src/Components/Toolbar/Groups/CategoryDropdown.js","webpack:///./src/Components/Toolbar/Groups/ToolbarInput/Select.js","webpack:///./src/Components/Toolbar/Groups/ToolbarInput/helpers.js","webpack:///./src/Components/Toolbar/Groups/ToolbarInput/Date.tsx","webpack:///./src/Components/Toolbar/Groups/ToolbarInput/Text.js","webpack:///./src/Components/Toolbar/Groups/ToolbarInput/index.js","webpack:///./src/Components/Toolbar/Groups/FiltersCategoriesGroup.js","webpack:///./src/Components/Toolbar/Groups/QuickDateGroup.js","webpack:///./src/Components/Toolbar/Groups/SortByGroup.js","webpack:///./src/Components/Toolbar/Groups/SettingsPanel.js","webpack:///./src/Components/Toolbar/Toolbar.js"],"names":["ApiErrorState","message","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","ExclamationCircleIcon","color","globalDangerColor200","Title","headingLevel","size","EmptyStateBody","propTypes","PropTypes","optionsForCategories","status","type","isSingle","name","placeholder","hasChips","quick_date_range","start_date","end_date","job_type","org_id","cluster_id","template_id","sort_options","automation_status","frequency_period","category","inventory_id","CategoryDropdown","selected","setSelected","categories","useState","isExpanded","setIsExpanded","ToolbarItem","Select","isOpen","aria-label","onToggle","onSelect","_event","selection","selections","placeholderText","map","key","SelectOption","value","OptionSpan","styled","renderValues","values","description","Tooltip","content","item","comparator","val","categoryKey","selectOptions","isVisible","setValue","expanded","setExpanded","options","ToolbarFilter","data-cy","showToolbarItem","chips","forEach","i","undefined","reduce","acc","Number","isInteger","parseInt","cmpItem","push","handleCheckboxChips","categoryName","deleteChip","_","valueToDelete","keyToDelete","find","filteredArr","filter","SelectVariant","includes","hasInlineFilter","onFilter","textInput","toLowerCase","maxHeight","isRequired","__assign","Object","assign","t","s","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","DateInput","_a","_b","_c","_d","otherProps","DatePicker","onChange","inputProps","isReadOnly","Text","searchVal","setSearchVal","useEffect","InputGroup","TextInput","onKeyDown","e","preventDefault","Button","onClick","components","select","date","text","ToolbarInput","SelectedInput","FilterCategoriesGroup","filterCategories","filters","handleSearch","setFilters","keys","currentCategory","setCurrentCategory","ToolbarGroup","el","getDateByDays","days","format","today","toISOString","split","strToDate","nums","Date","QuickDateGroup","endDate","startDate","Split","hasGutter","SplitItem","validators","style","paddingTop","SortByGroup","sort_order","SettingsPanel","settingsExpanded","setSettingsExpanded","Card","isFlat","backgroundColor","CardHeader","CardActions","CardTitle","CardBody","Switch","id","label","labelOff","isChecked","only_root_workflows_and_standalone_jobs","position","FilterableToolbar","qsConfig","pagination","hasSettings","additionalControls","hideQuickDateRange","hideSortOptions","restCategories","history","useHistory","obj","params","parseQueryString","location","search","replaceParams","mergeParams","removeParams","pushHistoryState","pathname","nonNamespacedParams","encodedParams","encodeNonDefaultQueryString","Toolbar","namespace","clearAllFilters","oldParams","oldParamsClone","limit","sort_by","handleRemoveAll","collapseListedFiltersBreakpoint","ToolbarContent","isActive","control","idx","visibility","default","lg"],"mappings":"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","file":"js/605.74a44f5f3aa6c3ac84c2.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { global_danger_color_200 as globalDangerColor200 } from '@patternfly/react-tokens';\n\nconst ApiErrorState = ({ message }) => (\n  <EmptyState variant={EmptyStateVariant.small}>\n    <EmptyStateIcon\n      icon={ExclamationCircleIcon}\n      color={globalDangerColor200.value}\n    />\n    <Title headingLevel=\"h2\" size=\"lg\">\n      Error\n    </Title>\n    <EmptyStateBody>{message}</EmptyStateBody>\n  </EmptyState>\n);\n\nApiErrorState.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default ApiErrorState;\n","export var optionsForCategories = {\n    status: {\n        type: 'select',\n        isSingle: false,\n        name: 'Status',\n        placeholder: 'Filter by job status',\n        hasChips: true,\n    },\n    quick_date_range: {\n        type: 'select',\n        isSingle: true,\n        name: 'Date',\n        placeholder: 'Filter by date',\n        hasChips: false,\n    },\n    start_date: {\n        type: 'date',\n        name: 'Start date',\n        hasChips: false,\n    },\n    end_date: {\n        type: 'date',\n        name: 'End date',\n        hasChips: false,\n    },\n    job_type: {\n        type: 'select',\n        isSingle: false,\n        name: 'Job',\n        placeholder: 'Filter by job type',\n        hasChips: true,\n    },\n    org_id: {\n        type: 'select',\n        isSingle: false,\n        name: 'Organization',\n        placeholder: 'Filter by organization',\n        hasChips: true,\n    },\n    cluster_id: {\n        type: 'select',\n        isSingle: false,\n        name: 'Cluster',\n        placeholder: 'Filter by cluster',\n        hasChips: true,\n    },\n    template_id: {\n        type: 'select',\n        isSingle: false,\n        name: 'Template',\n        placeholder: 'Filter by template',\n        hasChips: true,\n    },\n    sort_options: {\n        type: 'select',\n        isSingle: true,\n        name: 'Sort by',\n        placeholder: 'Sort by attribute',\n        hasChips: false,\n    },\n    automation_status: {\n        type: 'select',\n        isSingle: false,\n        name: 'Automation status',\n        placeholder: 'Filter by automation status',\n        hasChips: true,\n    },\n    frequency_period: {\n        type: 'select',\n        isSingle: false,\n        name: 'Frequency',\n        placeholder: 'Filter by frequency',\n        hasChips: true,\n    },\n    category: {\n        type: 'select',\n        isSingle: false,\n        name: 'Category',\n        placeholder: 'Filter by category',\n        hasChips: true,\n    },\n    inventory_id: {\n        type: 'select',\n        isSingle: false,\n        name: 'Inventory',\n        placeholder: 'Filter by inventory',\n        hasChips: true,\n    },\n    name: {\n        type: 'text',\n        name: 'Search by name',\n        hasChips: true,\n    },\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarItem, Select, SelectOption } from '@patternfly/react-core';\n\nconst CategoryDropdown = ({\n  selected,\n  setSelected = () => {},\n  categories = [],\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <ToolbarItem>\n      <Select\n        isOpen={isExpanded}\n        variant={'single'}\n        aria-label={'Categories'}\n        onToggle={() => setIsExpanded(!isExpanded)}\n        onSelect={(_event, selection) => {\n          setSelected(selection);\n          setIsExpanded(false);\n        }}\n        selections={selected}\n        placeholderText={'Filter by'}\n      >\n        {categories.map(({ key, name }) => (\n          <SelectOption key={key} value={key}>\n            {name}\n          </SelectOption>\n        ))}\n      </Select>\n    </ToolbarItem>\n  );\n};\n\nCategoryDropdown.propTypes = {\n  categories: PropTypes.array,\n  selected: PropTypes.string,\n  setSelected: PropTypes.func,\n};\n\nexport default CategoryDropdown;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Tooltip,\n  ToolbarFilter,\n  Select as PFSelect,\n  SelectOption,\n  SelectVariant,\n} from '@patternfly/react-core';\n\nimport { handleCheckboxChips, handleSingleChips } from './helpers';\nimport { optionsForCategories } from '../../constants';\nimport styled from 'styled-components';\n\nconst OptionSpan = styled('span')`\n  display: block;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  max-width: 300px;\n`;\n\nconst renderValues = (values) =>\n  values &&\n  values.map(({ key, value, description }) => (\n    <SelectOption key={key} value={key} description={description}>\n      <Tooltip content={<div>{value}</div>}>\n        <OptionSpan>{value}</OptionSpan>\n      </Tooltip>\n    </SelectOption>\n  ));\n\nconst Select = ({\n  categoryKey,\n  value,\n  selectOptions,\n  isVisible = true,\n  setValue,\n}) => {\n  const [expanded, setExpanded] = useState(false);\n  const options = optionsForCategories[categoryKey];\n\n  const onDelete = (_, valueToDelete) => {\n    const single = optionsForCategories[categoryKey].isSingle;\n\n    if (single) {\n      setValue(null);\n    } else {\n      const keyToDelete = selectOptions.find(\n        ({ value }) => value === valueToDelete\n      ).key;\n      const filteredArr = value.filter((value) => value !== keyToDelete);\n      setValue(filteredArr);\n    }\n  };\n\n  const onFilter = (_, textInput) => {\n    if (textInput === '') {\n      return renderValues(selectOptions);\n    } else {\n      return renderValues(\n        selectOptions.filter(({ value }) =>\n          value.toLowerCase().includes(textInput.toLowerCase())\n        )\n      );\n    }\n  };\n\n  const handleChips = () => {\n    if (options.isSingle) {\n      return handleSingleChips(value, selectOptions);\n    } else {\n      return handleCheckboxChips(value, selectOptions);\n    }\n  };\n\n  const onSelect = (_, selection) => {\n    if (options.isSingle) {\n      setValue(selection);\n      setExpanded(false);\n    } else {\n      setValue(\n        !value.includes(selection)\n          ? [...value, selection]\n          : value.filter((value) => value !== selection)\n      );\n    }\n  };\n\n  return (\n    <ToolbarFilter\n      data-cy={categoryKey}\n      key={categoryKey}\n      showToolbarItem={isVisible}\n      chips={options.hasChips ? handleChips() : []}\n      categoryName={options.name}\n      deleteChip={options.hasChips ? onDelete : null}\n    >\n      <PFSelect\n        variant={\n          options.isSingle ? SelectVariant.single : SelectVariant.checkbox\n        }\n        aria-label={options.name}\n        onToggle={() => setExpanded(!expanded)}\n        onSelect={onSelect}\n        selections={value}\n        isOpen={expanded}\n        hasInlineFilter\n        placeholderText={options.placeholder}\n        onFilter={onFilter}\n        maxHeight={'1000%'}\n      >\n        {renderValues(selectOptions)}\n      </PFSelect>\n    </ToolbarFilter>\n  );\n};\n\nSelect.propTypes = {\n  categoryKey: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    ),\n  ]).isRequired,\n  selectOptions: PropTypes.array,\n  isVisible: PropTypes.bool,\n  setValue: PropTypes.func.isRequired,\n};\n\nexport default Select;\n","/**\n * Get comparator values if their key is in the item list\n */\nexport const handleCheckboxChips = (item, comparator) => {\n  if (item && comparator) {\n    return item.reduce((acc, i) => {\n      Number.isInteger(parseInt(i)) ? (i = parseInt(i)) : i;\n\n      comparator.forEach((cmpItem) => {\n        if (cmpItem.key === i) {\n          acc.push(cmpItem.value);\n        }\n      });\n\n      return acc;\n    }, []);\n  }\n\n  return [];\n};\n\n/**\n * Convert a list of objects to a list of the last value if defined\n */\nexport const handleSingleChips = (item, comparator) => {\n  if (item && typeof item === 'string' && comparator) {\n    let val;\n    comparator.forEach((i) => {\n      if (i.key === item) {\n        val = i.value;\n      }\n    });\n\n    if (val !== undefined) {\n      return [val];\n    }\n  }\n\n  return [];\n};\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DatePicker } from '@patternfly/react-core';\nimport { optionsForCategories } from '../../constants';\nvar DateInput = function (_a) {\n    var categoryKey = _a.categoryKey, _b = _a.value, value = _b === void 0 ? '' : _b, _c = _a.setValue, setValue = _c === void 0 ? function () { return ({}); } : _c, _d = _a.otherProps, otherProps = _d === void 0 ? {} : _d;\n    var options = optionsForCategories[categoryKey];\n    return (React.createElement(DatePicker, __assign({ \"aria-label\": options.name, value: value, onChange: setValue, inputProps: {\n            isReadOnly: true,\n        } }, otherProps)));\n};\nDateInput.propTypes = {\n    categoryKey: PropTypes.string.isRequired,\n    value: PropTypes.string,\n    setValue: PropTypes.func.isRequired,\n    otherProps: PropTypes.any,\n};\nexport default DateInput;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ToolbarFilter,\n  TextInput,\n  InputGroup,\n  Button,\n} from '@patternfly/react-core';\n\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { optionsForCategories } from '../../constants';\n\nconst Text = ({ categoryKey, isVisible = true, value = '', setValue }) => {\n  const [searchVal, setSearchVal] = useState(value);\n  const options = optionsForCategories[categoryKey];\n\n  const onDelete = () => {\n    setValue('');\n  };\n\n  const handleChips = () => {\n    return value ? [value] : [];\n  };\n\n  useEffect(() => {\n    setSearchVal(value);\n  }, [value]);\n\n  return (\n    <ToolbarFilter\n      data-cy={categoryKey}\n      key={categoryKey}\n      showToolbarItem={isVisible}\n      chips={options.hasChips ? handleChips() : []}\n      categoryName={options.name}\n      deleteChip={options.hasChips ? onDelete : null}\n    >\n      <InputGroup>\n        <TextInput\n          type=\"search\"\n          aria-label={options.name}\n          value={searchVal}\n          onChange={setSearchVal}\n          onKeyDown={(e) => {\n            if (e.key && e.key === 'Enter') {\n              e.preventDefault();\n              setValue(searchVal);\n            }\n          }}\n        />\n        <Button\n          variant=\"control\"\n          aria-label={`Search button for ${options.name}`}\n          onClick={() => {\n            setValue(searchVal);\n          }}\n        >\n          <SearchIcon />\n        </Button>\n      </InputGroup>\n    </ToolbarFilter>\n  );\n};\n\nText.propTypes = {\n  categoryKey: PropTypes.string.isRequired,\n  value: PropTypes.any,\n  isVisible: PropTypes.bool,\n  setValue: PropTypes.func.isRequired,\n};\n\nexport default Text;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from './Select';\nimport DateInput from './Date';\nimport Text from './Text';\nimport { optionsForCategories } from '../../constants';\n\nconst components = {\n  select: Select,\n  date: DateInput,\n  text: Text,\n};\n\nconst ToolbarInput = ({\n  categoryKey,\n  value,\n  selectOptions,\n  isVisible = true,\n  setValue,\n  ...otherProps\n}) => {\n  const options = optionsForCategories[categoryKey];\n  const SelectedInput = components[options.type];\n\n  const defaultValue = () => {\n    if (value) {\n      return value;\n    } else if (options.type !== 'select') {\n      return '';\n    } else if (options.isSingle) {\n      return '';\n    } else {\n      return [];\n    }\n  };\n\n  return (\n    <SelectedInput\n      categoryKey={categoryKey}\n      value={defaultValue()}\n      selectOptions={selectOptions}\n      isVisible={isVisible}\n      setValue={setValue}\n      otherProps={otherProps}\n    />\n  );\n};\n\nToolbarInput.propTypes = {\n  categoryKey: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    ),\n  ]),\n  selectOptions: PropTypes.array,\n  isVisible: PropTypes.bool,\n  setValue: PropTypes.func.isRequired,\n};\n\nexport default ToolbarInput;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarGroup } from '@patternfly/react-core';\n\nimport CategoryDropdown from './CategoryDropdown';\nimport ToolbarInput from './ToolbarInput/';\nimport { optionsForCategories } from '../constants';\n\nconst FilterCategoriesGroup = ({\n  filterCategories,\n  filters,\n  handleSearch,\n  setFilters,\n}) => {\n  const [currentCategory, setCurrentCategory] = useState(\n    Object.keys(filterCategories)[0]\n  );\n\n  return (\n    <ToolbarGroup variant=\"filter-group\">\n      <CategoryDropdown\n        selected={currentCategory}\n        setSelected={setCurrentCategory}\n        categories={Object.keys(filterCategories).map((el) => ({\n          key: el,\n          name: optionsForCategories[el].name,\n        }))}\n      />\n      {Object.keys(filterCategories).map((key) => (\n        <ToolbarInput\n          key={key}\n          categoryKey={key}\n          value={filters[key]}\n          selectOptions={filterCategories[key]}\n          isVisible={currentCategory === key}\n          setValue={(value) => {\n            setFilters(key, value);\n            handleSearch(key, value);\n          }}\n        />\n      ))}\n    </ToolbarGroup>\n  );\n};\n\nFilterCategoriesGroup.propTypes = {\n  filterCategories: PropTypes.object.isRequired,\n  filters: PropTypes.object.isRequired,\n  handleSearch: PropTypes.func.isRequired,\n  setFilters: PropTypes.func.isRequired,\n};\n\nexport default FilterCategoriesGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SplitItem, ToolbarGroup, Split } from '@patternfly/react-core';\n\nimport ToolbarInput from './ToolbarInput/';\n\nimport { today } from '../../../Utilities/helpers';\n\nconst getDateByDays = (days, format = true) => {\n  const date = today(days);\n  return format ? date.toISOString().split(/T/)[0] : date;\n};\n\nconst strToDate = (date) => {\n  const nums = date.split('-');\n  return new Date(nums[0], nums[1] - 1, nums[2]);\n};\n\nconst QuickDateGroup = ({ filters, handleSearch, setFilters, values }) => {\n  const endDate = filters.end_date || getDateByDays(0, true);\n  const startDate = filters.start_date || getDateByDays(-30, true);\n\n  return (\n    <ToolbarGroup variant=\"filter-group\">\n      <ToolbarInput\n        categoryKey=\"quick_date_range\"\n        value={filters.quick_date_range}\n        selectOptions={values}\n        setValue={(value) => setFilters('quick_date_range', value)}\n      />\n      {filters.quick_date_range && filters.quick_date_range.includes('custom') && (\n        <Split hasGutter>\n          <SplitItem>\n            <ToolbarInput\n              categoryKey=\"start_date\"\n              value={startDate}\n              setValue={(e) => {\n                setFilters('start_date', e);\n                handleSearch('start_date', e);\n              }}\n              validators={[\n                (date) =>\n                  typeof endDate === 'string' && date > strToDate(endDate)\n                    ? 'Must not be after end date'\n                    : '',\n              ]}\n            />\n          </SplitItem>\n          <SplitItem style={{ paddingTop: '6px' }}>to</SplitItem>\n          <SplitItem>\n            <ToolbarInput\n              categoryKey=\"end_date\"\n              value={endDate}\n              setValue={(e) => {\n                setFilters('end_date', e);\n                handleSearch('end_date', e);\n              }}\n              validators={[\n                (date) => {\n                  if (\n                    typeof startDate === 'string' &&\n                    date < strToDate(startDate)\n                  ) {\n                    return 'Must not be before start date';\n                  }\n\n                  if (date > today()) {\n                    return 'Must not be after today';\n                  }\n\n                  return '';\n                },\n              ]}\n            />\n          </SplitItem>\n        </Split>\n      )}\n    </ToolbarGroup>\n  );\n};\n\nQuickDateGroup.propTypes = {\n  filters: PropTypes.object.isRequired,\n  handleSearch: PropTypes.func.isRequired,\n  setFilters: PropTypes.func.isRequired,\n  values: PropTypes.array.isRequired,\n};\n\nexport default QuickDateGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarGroup, Button } from '@patternfly/react-core';\nimport { SortAmountDownIcon, SortAmountUpIcon } from '@patternfly/react-icons';\n\nimport ToolbarInput from './ToolbarInput';\n\nconst SortByGroup = ({ filters, handleSearch, setFilters, sort_options }) => (\n  <ToolbarGroup variant=\"filter-group\">\n    <ToolbarInput\n      categoryKey=\"sort_options\"\n      value={filters.sort_options}\n      selectOptions={sort_options}\n      setValue={(value) => {\n        setFilters('sort_options', value);\n        handleSearch('sort_options', value);\n      }}\n    />\n    <Button\n      variant=\"control\"\n      onClick={() => {\n        setFilters('sort_order', filters.sort_order === 'asc' ? 'desc' : 'asc');\n        handleSearch(\n          'sort_order',\n          filters.sort_order === 'asc' ? 'desc' : 'asc'\n        );\n      }}\n    >\n      {filters.sort_order === 'asc' && <SortAmountUpIcon />}\n      {filters.sort_order === 'desc' && <SortAmountDownIcon />}\n    </Button>\n  </ToolbarGroup>\n);\n\nSortByGroup.propTypes = {\n  filters: PropTypes.object.isRequired,\n  handleSearch: PropTypes.func.isRequired,\n  setFilters: PropTypes.func.isRequired,\n  sort_options: PropTypes.array.isRequired,\n};\n\nexport default SortByGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, Switch } from '@patternfly/react-core';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardActions,\n  CardHeader,\n} from '@patternfly/react-core';\nimport { QuestionCircleIcon, TimesIcon } from '@patternfly/react-icons';\n\n/* TODO: For future work: make settings more modular for different pages */\nconst SettingsPanel = ({\n  filters,\n  handleSearch,\n  setFilters,\n  settingsExpanded,\n  setSettingsExpanded,\n}) => (\n  <Card isFlat style={{ backgroundColor: '#EEEEEE' }}>\n    <CardHeader>\n      <CardActions>\n        <Button\n          variant=\"plain\"\n          onClick={() => setSettingsExpanded(!settingsExpanded)}\n        >\n          <TimesIcon />\n        </Button>\n      </CardActions>\n      <CardTitle>Settings</CardTitle>\n    </CardHeader>\n    <CardBody>\n      <Switch\n        id=\"showRootWorkflowJobs\"\n        label=\"Ignore nested workflows and jobs\"\n        labelOff=\"Ignore nested workflows and jobs\"\n        isChecked={filters.only_root_workflows_and_standalone_jobs}\n        onChange={(val) => {\n          setFilters('only_root_workflows_and_standalone_jobs', val);\n          handleSearch('only_root_workflows_and_standalone_jobs', val);\n        }}\n      />\n      <Tooltip\n        position={'top'}\n        content={\n          <div>\n            {' '}\n            If enabled, nested workflows and jobs will not be included in the\n            overall totals. Enable this option to filter out duplicate entries.\n          </div>\n        }\n      >\n        <QuestionCircleIcon />\n      </Tooltip>\n    </CardBody>\n  </Card>\n);\n\nSettingsPanel.propTypes = {\n  filters: PropTypes.object.isRequired,\n  handleSearch: PropTypes.func.isRequired,\n  setFilters: PropTypes.func.isRequired,\n  settingsExpanded: PropTypes.bool.isRequired,\n  setSettingsExpanded: PropTypes.func.isRequired,\n};\n\nexport default SettingsPanel;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  Button,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { FilterIcon, CogIcon } from '@patternfly/react-icons';\n\nimport { optionsForCategories } from './constants';\nimport {\n  FilterCategoriesGroup,\n  QuickDateGroup,\n  SortByGroup,\n  SettingsPanel,\n} from './Groups/';\nimport { useHistory } from 'react-router-dom';\nimport {\n  encodeNonDefaultQueryString,\n  parseQueryString,\n  mergeParams,\n  removeParams,\n  replaceParams,\n} from '../../Utilities/qs';\n\nconst FilterableToolbar = ({\n  categories,\n  filters,\n  qsConfig,\n  setFilters,\n  pagination = null,\n  hasSettings = false,\n  additionalControls = [],\n  hideQuickDateRange = false,\n  hideSortOptions = false,\n}) => {\n  const [settingsExpanded, setSettingsExpanded] = useState(false);\n  const { quick_date_range, sort_options, ...restCategories } = categories;\n  const history = useHistory();\n\n  // Filter out elements which are not in the option object.\n  const filterCategories = Object.keys(restCategories)\n    .filter((key) => Object.keys(optionsForCategories).includes(key))\n    .reduce((obj, key) => {\n      obj[key] = restCategories[key];\n      return obj;\n    }, {});\n\n  const handleSearch = (key, value) => {\n    let params = parseQueryString(qsConfig, history.location.search);\n    params = replaceParams(params, { [key]: value });\n    params = mergeParams(params, { [key]: value });\n    if (value === '' || value.length === 0)\n      params = removeParams(qsConfig, params, { [key]: params[key] });\n    pushHistoryState(params, qsConfig);\n  };\n\n  const handleRemoveAll = (qsConfig) => {\n    // remove everything in oldParams except for page_size and order_by\n    const oldParams = parseQueryString(qsConfig, history.location.search);\n    const oldParamsClone = { ...oldParams };\n    delete oldParamsClone.limit;\n    delete oldParamsClone.sort_by;\n    pushHistoryState(\n      removeParams(qsConfig, oldParams, oldParamsClone),\n      qsConfig\n    );\n  };\n\n  const pushHistoryState = (params, qsConfig) => {\n    const { pathname } = history.location;\n    const nonNamespacedParams = parseQueryString({}, history.location.search);\n    const encodedParams = encodeNonDefaultQueryString(\n      qsConfig,\n      params,\n      nonNamespacedParams\n    );\n    history.push(encodedParams ? `${pathname}?${encodedParams}` : pathname);\n  };\n\n  return (\n    <>\n      <Toolbar\n        id={`${qsConfig.namespace}-filterable-toolbar-with-chip-groups`}\n        clearAllFilters={() => {\n          handleRemoveAll(qsConfig);\n          setFilters(null, null);\n        }}\n        collapseListedFiltersBreakpoint=\"xl\"\n      >\n        <ToolbarContent>\n          <Button variant=\"control\">\n            <FilterIcon />\n          </Button>\n          {Object.keys(filterCategories).length > 0 && (\n            <FilterCategoriesGroup\n              filterCategories={filterCategories}\n              filters={filters}\n              setFilters={setFilters}\n              handleSearch={handleSearch}\n            />\n          )}\n          {!hideQuickDateRange && quick_date_range && (\n            <QuickDateGroup\n              filters={filters}\n              setFilters={setFilters}\n              values={quick_date_range}\n              handleSearch={handleSearch}\n            />\n          )}\n          {!hideSortOptions && sort_options && (\n            <SortByGroup\n              filters={filters}\n              setFilters={setFilters}\n              sort_options={sort_options}\n              handleSearch={handleSearch}\n            />\n          )}\n          {hasSettings && (\n            <ToolbarItem>\n              <Button\n                variant=\"plain\"\n                onClick={() => setSettingsExpanded(!settingsExpanded)}\n                aria-label=\"settings\"\n                isActive={settingsExpanded}\n              >\n                <CogIcon />\n              </Button>\n            </ToolbarItem>\n          )}\n          {additionalControls.length > 0 && (\n            <ToolbarGroup>\n              {additionalControls.map((control, idx) => (\n                <ToolbarItem key={idx}>{control}</ToolbarItem>\n              ))}\n            </ToolbarGroup>\n          )}\n          {pagination && (\n            <ToolbarItem\n              variant=\"pagination\"\n              visibility={{ default: 'hidden', lg: 'visible' }}\n            >\n              {pagination}\n            </ToolbarItem>\n          )}\n        </ToolbarContent>\n        {settingsExpanded && (\n          <SettingsPanel\n            filters={filters}\n            setFilters={setFilters}\n            handleSearch={handleSearch}\n            settingsExpanded={settingsExpanded}\n            setSettingsExpanded={setSettingsExpanded}\n          />\n        )}\n      </Toolbar>\n    </>\n  );\n};\n\nFilterableToolbar.propTypes = {\n  categories: PropTypes.object.isRequired,\n  qsConfig: PropTypes.object.isRequired,\n  filters: PropTypes.object.isRequired,\n  setFilters: PropTypes.func.isRequired,\n  pagination: PropTypes.object,\n  hasSettings: PropTypes.bool,\n  additionalControls: PropTypes.array,\n  hideSortOptions: PropTypes.bool,\n  hideQuickDateRange: PropTypes.bool,\n};\n\nexport default FilterableToolbar;\n"],"sourceRoot":""}