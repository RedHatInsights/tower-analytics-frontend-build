{"version":3,"sources":["webpack:///./src/Containers/Notifications/NotificationsList.js","webpack:///./src/Containers/Notifications/Notifications.js"],"names":["ExternalLinkAltIcon","styled","PFExternalLinkAltIcon","NotificationDrawerListItem","PFNotificationDrawerListItem","NotificationDrawerList","PFNotificationDrawerList","stringifyDate","date","day","moment","now","utc","isAfter","diff","isSame","valueOf","AllNotificationTemplate","notifications","map","message","label","id","notification_id","url","tower_url","variant","key","NotificationDrawerListItemHeader","title","target","rel","href","capitalize","NotificationDrawerListItemBody","timestamp","ErrorNotificationTemplate","filter","notification","NoticeNotificationTemplate","WarningNotificationTemplate","NotificationsList","filterBy","length","LoadingState","propTypes","PropTypes","CardTitle","PFCardTitle","DropdownGroup","notificationOptions","value","disabled","formatClusterName","data","reduce","formatted","cluster_id","uuid","install_uuid","push","qsConfig","getQSConfig","limit","offset","useState","notificationsData","setNotificationsData","clusterOptions","setClusterOptions","selectedCluster","setSelectedCluster","firstRender","setFirstRender","isLoading","setIsLoading","meta","setMeta","useQueryParams","queryParams","setId","setFromPagination","setSeverity","useEffect","readNotifications","then","ignore","fetchEndpoints","Promise","all","readClusters","p","templates","clustersData","initializeWithPreflight","PageHeader","PageHeaderTitle","Main","Card","FormSelect","name","onChange","aria-label","index","FormSelectOption","isDisabled","severity","Pagination","count","params","setPagination","isCompact","CardBody","NoData","NotificationDrawer","options","PaginationVariant"],"mappings":"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","file":"js/612.e434ee9576b62b5adf4d.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport {\n  NotificationDrawerList as PFNotificationDrawerList,\n  NotificationDrawerListItem as PFNotificationDrawerListItem,\n  NotificationDrawerListItemBody,\n  NotificationDrawerListItemHeader,\n} from '@patternfly/react-core';\n\nimport { ExternalLinkAltIcon as PFExternalLinkAltIcon } from '@patternfly/react-icons';\nimport LoadingState from '../../Components/ApiStatus/LoadingState';\nimport { capitalize } from '../../Utilities/helpers';\n\nconst ExternalLinkAltIcon = styled(PFExternalLinkAltIcon)`\n  margin-left: 7px;\n  color: var(--pf-global--Color--400);\n  font-size: 14px;\n`;\n\nconst NotificationDrawerListItem = styled(PFNotificationDrawerListItem)`\n  border-top: 1px solid var(--pf-global--BorderColor--light-100);\n  border-bottom::nth-child(odd): 1px solid var(--pf-global--BorderColor--light-100);\n  box-shadow: none;\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst NotificationDrawerList = styled(PFNotificationDrawerList)`\n  &:last-child {\n    border-bottom: 1px solid var(--pf-global--BorderColor--light-100);\n  }\n`;\n\nconst stringifyDate = (date) => {\n  const day = moment(date);\n  const oneHour = 60 * 60 * 1000;\n  const now = moment().utc();\n\n  if (now.isAfter(day)) {\n    return `${now.diff(day, 'days')} day(s) ago.`;\n  }\n\n  if (day.isSame(now, 'day')) {\n    if (day.valueOf() > oneHour) {\n      return `${day.diff(now, 'hours')} hour(s) ago.`;\n    }\n\n    return `${now.diff(day, 'minutes')} minute(s) ago.`;\n  }\n};\n\nconst AllNotificationTemplate = ({ notifications }) =>\n  notifications.map(\n    ({ date, message, label, notification_id: id, tower_url: url }) => {\n      if (label === '' || label === 'notice') {\n        return (\n          <NotificationDrawerListItem variant=\"info\" key={date + '-' + id}>\n            <NotificationDrawerListItemHeader\n              variant=\"info\"\n              title={\n                <>\n                  {url ? (\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                      {capitalize(label)}\n                      <ExternalLinkAltIcon />\n                    </a>\n                  ) : (\n                    capitalize(label)\n                  )}\n                </>\n              }\n            />\n            <NotificationDrawerListItemBody>\n              {message}{' '}\n            </NotificationDrawerListItemBody>\n          </NotificationDrawerListItem>\n        );\n      }\n\n      if (label === 'error') {\n        return (\n          <NotificationDrawerListItem variant=\"danger\" key={date + '-' + id}>\n            <NotificationDrawerListItemHeader\n              variant=\"danger\"\n              title={\n                <>\n                  {url ? (\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                      {capitalize(label)}\n                      <ExternalLinkAltIcon />\n                    </a>\n                  ) : (\n                    capitalize(label)\n                  )}\n                </>\n              }\n            />\n            <NotificationDrawerListItemBody timestamp={stringifyDate(date)}>\n              {message}{' '}\n            </NotificationDrawerListItemBody>\n          </NotificationDrawerListItem>\n        );\n      }\n\n      if (label === 'warning') {\n        return (\n          <NotificationDrawerListItem variant=\"warning\" key={date + '-' + id}>\n            <NotificationDrawerListItemHeader\n              variant=\"warning\"\n              title={\n                <>\n                  {url ? (\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                      {capitalize(label)}\n                      <ExternalLinkAltIcon />\n                    </a>\n                  ) : (\n                    capitalize(label)\n                  )}\n                </>\n              }\n            />\n            <NotificationDrawerListItemBody timestamp={stringifyDate(date)}>\n              {message}{' '}\n            </NotificationDrawerListItemBody>\n          </NotificationDrawerListItem>\n        );\n      }\n    }\n  );\n\nconst ErrorNotificationTemplate = ({ notifications }) =>\n  notifications\n    .filter((notification) => notification.label === 'error')\n    .map(({ message, date, label, notification_id: id, tower_url: url }) => (\n      <NotificationDrawerListItem variant=\"danger\" key={date + '-' + id}>\n        <NotificationDrawerListItemHeader\n          variant=\"danger\"\n          title={\n            <>\n              {url ? (\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                  {capitalize(label)}\n                  <ExternalLinkAltIcon />\n                </a>\n              ) : (\n                capitalize(label)\n              )}\n            </>\n          }\n        />\n        <NotificationDrawerListItemBody timestamp={stringifyDate(date)}>\n          {message}{' '}\n        </NotificationDrawerListItemBody>\n      </NotificationDrawerListItem>\n    ));\n\nconst NoticeNotificationTemplate = ({ notifications }) =>\n  notifications\n    .filter((notification) => notification.label === 'notice')\n    .map(({ message, date, label, notification_id: id, tower_url: url }) => (\n      <NotificationDrawerListItem variant=\"info\" key={date + '-' + id}>\n        <NotificationDrawerListItemHeader\n          variant=\"info\"\n          title={\n            <>\n              {url ? (\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                  {capitalize(label)}\n                  <ExternalLinkAltIcon />\n                </a>\n              ) : (\n                capitalize(label)\n              )}\n            </>\n          }\n        />\n        <NotificationDrawerListItemBody timestamp={stringifyDate(date)}>\n          {message}{' '}\n        </NotificationDrawerListItemBody>\n      </NotificationDrawerListItem>\n    ));\n\nconst WarningNotificationTemplate = ({ notifications }) =>\n  notifications\n    .filter((notification) => notification.label === 'warning')\n    .map(({ message, date, label, notification_id: id, tower_url: url }) => (\n      <NotificationDrawerListItem variant=\"warning\" key={date + '-' + id}>\n        <NotificationDrawerListItemHeader\n          variant=\"warning\"\n          title={\n            <>\n              {url ? (\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                  {capitalize(label)}\n                  <ExternalLinkAltIcon />\n                </a>\n              ) : (\n                capitalize(label)\n              )}\n            </>\n          }\n        />\n        <NotificationDrawerListItemBody timestamp={stringifyDate(date)}>\n          {message}{' '}\n        </NotificationDrawerListItemBody>\n      </NotificationDrawerListItem>\n    ));\n\nconst NotificationsList = ({ filterBy, notifications }) => (\n  <>\n    <NotificationDrawerList>\n      {notifications.length <= 0 && <LoadingState />}\n      {filterBy === '' && (\n        <AllNotificationTemplate notifications={notifications} />\n      )}\n      {filterBy === 'notice' && (\n        <NoticeNotificationTemplate notifications={notifications} />\n      )}\n      {filterBy === 'error' && (\n        <ErrorNotificationTemplate notifications={notifications} />\n      )}\n      {filterBy === 'warning' && (\n        <WarningNotificationTemplate notifications={notifications} />\n      )}\n    </NotificationDrawerList>\n  </>\n);\n\nAllNotificationTemplate.propTypes = {\n  notifications: PropTypes.array,\n};\n\nErrorNotificationTemplate.propTypes = {\n  notifications: PropTypes.array,\n};\n\nWarningNotificationTemplate.propTypes = {\n  notifications: PropTypes.array,\n};\n\nNotificationsList.propTypes = {\n  notifications: PropTypes.array,\n  filterBy: PropTypes.string,\n};\n\nexport default NotificationsList;\n","import React, { useState, useEffect } from 'react';\n\nimport { useQueryParams } from '../../Utilities/useQueryParams';\n\nimport styled from 'styled-components';\nimport LoadingState from '../../Components/ApiStatus/LoadingState';\nimport NoData from '../../Components/ApiStatus/NoData';\nimport { readClusters, readNotifications } from '../../Api/';\n\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle as PFCardTitle,\n  FormSelect,\n  FormSelectOption,\n  PaginationVariant,\n  NotificationDrawer,\n} from '@patternfly/react-core';\n\nimport NotificationsList from './NotificationsList';\nimport Pagination from '../../Components/Pagination';\nimport { getQSConfig } from '../../Utilities/qs';\n\nconst CardTitle = styled(PFCardTitle)`\n  display: flex;\n  justify-content: space-between;\n\n  @media screen and (max-width: 1035px) {\n    display: block;\n  }\n`;\n\nconst DropdownGroup = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-end;\n\n  @media screen and (max-width: 1035px) {\n    display: block;\n  }\n\n  select {\n    margin: 0 10px;\n    width: 150px;\n\n    @media screen and (max-width: 1035px) {\n      margin: 10px 10px 0 0;\n    }\n\n    @media screen and (max-width: 865px) {\n      width: 100%;\n    }\n  }\n`;\n\nconst notificationOptions = [\n  {\n    value: 'please choose',\n    label: 'Select Notification Severity',\n    disabled: true,\n  },\n  { value: 'error', label: 'View Critical', disabled: false },\n  { value: 'warning', label: 'View Warning', disabled: false },\n  { value: 'notice', label: 'View Notice', disabled: false },\n  { value: '', label: 'View All', disabled: false },\n];\n\nfunction formatClusterName(data) {\n  const defaultClusterOptions = [\n    { value: 'please choose', label: 'Select cluster', disabled: true },\n    { value: '', label: 'All Clusters', disabled: false },\n    { value: -1, label: 'Unassociated', disabled: false },\n  ];\n  return data.reduce(\n    (formatted, { label, cluster_id: id, install_uuid: uuid }) => {\n      if (label.length === 0) {\n        formatted.push({ value: id, label: uuid, disabled: false });\n      } else {\n        formatted.push({ value: id, label, disabled: false });\n      }\n\n      return formatted;\n    },\n    defaultClusterOptions\n  );\n}\n\nconst initialQueryParams = {\n  defaultParams: {\n    limit: 5,\n    offset: 0,\n  },\n};\n\n// takes json and returns\nconst qsConfig = getQSConfig(\n  'notifications',\n  { ...initialQueryParams.defaultParams },\n  ['limit', 'offset']\n);\n\nconst Notifications = () => {\n  const [notificationsData, setNotificationsData] = useState([]);\n  const [clusterOptions, setClusterOptions] = useState([]);\n  const [selectedCluster, setSelectedCluster] = useState('');\n  const [firstRender, setFirstRender] = useState(true);\n  const [isLoading, setIsLoading] = useState(true);\n  const [meta, setMeta] = useState({});\n\n  // params from toolbar/searchbar\n  const { queryParams, setId, setFromPagination, setSeverity } =\n    useQueryParams(qsConfig);\n\n  useEffect(() => {\n    if (firstRender) {\n      return;\n    }\n\n    const getData = () => {\n      return readNotifications(queryParams);\n    };\n\n    const update = () => {\n      setIsLoading(true);\n      getData().then(({ notifications: notificationsData = [], meta }) => {\n        setNotificationsData(notificationsData);\n        setMeta(meta);\n        setIsLoading(false);\n      });\n    };\n\n    update();\n  }, [queryParams]);\n\n  useEffect(() => {\n    let ignore = false;\n    const fetchEndpoints = () => {\n      return Promise.all(\n        [readClusters(), readNotifications(queryParams)].map((p) =>\n          p.catch(() => [])\n        )\n      );\n    };\n\n    async function initializeWithPreflight() {\n      setIsLoading(true);\n      fetchEndpoints().then(\n        ([\n          { templates: clustersData = [] },\n          { notifications: notificationsData = [], meta },\n        ]) => {\n          if (!ignore) {\n            const clusterOptions = formatClusterName(clustersData);\n            setClusterOptions(clusterOptions);\n            setNotificationsData(notificationsData);\n            setMeta(meta);\n            setFirstRender(false);\n            setIsLoading(false);\n          }\n        }\n      );\n    }\n\n    initializeWithPreflight();\n    return () => (ignore = true);\n  }, [queryParams]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle title={'Notifications'} />\n      </PageHeader>\n      <>\n        <Main>\n          <Card>\n            <CardTitle>\n              <DropdownGroup>\n                <FormSelect\n                  name=\"selectedCluster\"\n                  value={selectedCluster}\n                  onChange={(value) => {\n                    setSelectedCluster(value);\n                    setId(value);\n                    setFromPagination(0);\n                  }}\n                  aria-label=\"Select Cluster\"\n                >\n                  {clusterOptions.map(({ value, label, disabled }, index) => (\n                    <FormSelectOption\n                      isDisabled={disabled}\n                      key={index}\n                      value={value}\n                      label={label}\n                    />\n                  ))}\n                </FormSelect>\n                <FormSelect\n                  name=\"selectedNotification\"\n                  value={queryParams.severity || ''}\n                  onChange={(value) => {\n                    setSeverity(value);\n                    setFromPagination(0);\n                  }}\n                  aria-label=\"Select Notification Type\"\n                >\n                  {notificationOptions.map(\n                    ({ disabled, value, label }, index) => (\n                      <FormSelectOption\n                        isDisabled={disabled}\n                        key={index}\n                        value={value}\n                        label={label}\n                      />\n                    )\n                  )}\n                </FormSelect>\n              </DropdownGroup>\n              <Pagination\n                count={meta?.count}\n                qsConfig={qsConfig}\n                params={{\n                  limit: queryParams.limit,\n                  offset: queryParams.offset,\n                }}\n                setPagination={setFromPagination}\n                isCompact\n              />\n            </CardTitle>\n            <CardBody>\n              {isLoading && <LoadingState />}\n              {!isLoading && notificationsData.length <= 0 && <NoData />}\n              {!isLoading && notificationsData.length > 0 && (\n                <NotificationDrawer>\n                  <NotificationsList\n                    filterBy={queryParams.severity || ''}\n                    options={notificationOptions}\n                    notifications={notificationsData}\n                  />\n                </NotificationDrawer>\n              )}\n              <Pagination\n                count={meta?.count}\n                qsConfig={qsConfig}\n                params={{\n                  limit: queryParams.limit,\n                  offset: queryParams.offset,\n                }}\n                setPagination={setFromPagination}\n                variant={PaginationVariant.bottom}\n              />\n            </CardBody>\n          </Card>\n        </Main>\n      </>\n    </React.Fragment>\n  );\n};\n\nexport default Notifications;\n"],"sourceRoot":""}